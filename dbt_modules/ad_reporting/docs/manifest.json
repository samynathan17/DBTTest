{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.0", "generated_at": "2021-03-09T23:28:48.858383Z", "invocation_id": "9843f5c2-369f-4c22-a993-2aeaab334c95", "env": {}, "project_id": "9bf57d857f8bb3abf75f1b334ad30f3c", "user_id": "17115028-2cdc-4f57-abce-f8b742a5937d", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "twitter_line_item_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_line_item_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "twitter_line_item_history_data.csv", "original_file_path": "data/twitter_line_item_history_data.csv", "name": "twitter_line_item_history_data", "resource_type": "seed", "alias": "twitter_line_item_history_data", "checksum": {"name": "sha256", "checksum": "b22edb0c149ef5e3c14f3e5bea6d34447db94ad0f89d00bb074b0f72b2044fee"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter_line_item_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "linkedin_campaign_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "linkedin_campaign_group_history_data.csv", "original_file_path": "data/linkedin_campaign_group_history_data.csv", "name": "linkedin_campaign_group_history_data", "resource_type": "seed", "alias": "linkedin_campaign_group_history_data", "checksum": {"name": "sha256", "checksum": "a3e2f426d56d779f1bcb3013b2d4862e7a8203c0372c4892e598165fedab1744"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin_campaign_group_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "facebook_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "facebook_ads_ad_history_data.csv", "original_file_path": "data/facebook_ads_ad_history_data.csv", "name": "facebook_ads_ad_history_data", "resource_type": "seed", "alias": "facebook_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "25b7f0feecd46923840679a47529564155c8763cead441b31aa21611c7c7a701"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"id": "int64", "account_id": "int64", "ad_set_id": "int64", "campaign_id": "int64", "creative_id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "ad_set_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "creative_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_ad_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_account_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "linkedin_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "linkedin_account_history_data.csv", "original_file_path": "data/linkedin_account_history_data.csv", "name": "linkedin_account_history_data", "resource_type": "seed", "alias": "linkedin_account_history_data", "checksum": {"name": "sha256", "checksum": "e00ceef7b82a006c9fb463fe928e58f1d0bdaeddb0541508934c62d0142084fb"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin_account_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "linkedin_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "linkedin_campaign_history_data.csv", "original_file_path": "data/linkedin_campaign_history_data.csv", "name": "linkedin_campaign_history_data", "resource_type": "seed", "alias": "linkedin_campaign_history_data", "checksum": {"name": "sha256", "checksum": "063da5a71a42213130cf9f604668ddf280be6c4695956520418390ce6f3d1e87"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin_campaign_history_data`"}, "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "google_ads_final_url_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "google_ads_final_url_performance_data.csv", "original_file_path": "data/google_ads_final_url_performance_data.csv", "name": "google_ads_final_url_performance_data", "resource_type": "seed", "alias": "google_ads_final_url_performance_data", "checksum": {"name": "sha256", "checksum": "6e58d77f59b6bf4e9c721a8e5eadd66ae0a9c1a73f055606d703e3abac1e10ea"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"ad_group_id": "INT64", "campaign_id": "INT64", "external_customer_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`google_ads_final_url_performance_data`"}, "seed.ad_reporting_integration_tests.twitter_campaign_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "twitter_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "twitter_campaign_history_data.csv", "original_file_path": "data/twitter_campaign_history_data.csv", "name": "twitter_campaign_history_data", "resource_type": "seed", "alias": "twitter_campaign_history_data", "checksum": {"name": "sha256", "checksum": "92a9f18103e025ab35199a59f71a0eac8f5a7517a7a6f0bd0c9367b43e0045ed"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter_campaign_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_creative_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "linkedin_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "linkedin_creative_history_data.csv", "original_file_path": "data/linkedin_creative_history_data.csv", "name": "linkedin_creative_history_data", "resource_type": "seed", "alias": "linkedin_creative_history_data", "checksum": {"name": "sha256", "checksum": "7c80b5be327ce6a841cc2c17fec12807e8fa09a4a9622d50e0a4768293deee3b"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"created_time": "timestamp", "last_modified_time": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin_creative_history_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_account_history_data.csv", "original_file_path": "data/microsoft_ads_account_history_data.csv", "name": "microsoft_ads_account_history_data", "resource_type": "seed", "alias": "microsoft_ads_account_history_data", "checksum": {"name": "sha256", "checksum": "2de08fa142cabec96d61b080a788ea37294b7983743727a44410737713510ea7"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_account_history_data`"}, "seed.ad_reporting_integration_tests.pin_promotion_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "pin_promotion_history_data"], "unique_id": "seed.ad_reporting_integration_tests.pin_promotion_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "pin_promotion_history_data.csv", "original_file_path": "data/pin_promotion_history_data.csv", "name": "pin_promotion_history_data", "resource_type": "seed", "alias": "pin_promotion_history_data", "checksum": {"name": "sha256", "checksum": "9dd8d1c6e9c07f7eaee989bbfb1eec635928eb2f9f0c4fade7fe720e36b6710f"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"ID": "int64", "AD_GROUP_ID": "int64", "PIN_ID": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "AD_GROUP_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "PIN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`pin_promotion_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "facebook_ads_creative_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "facebook_ads_creative_history_data.csv", "original_file_path": "data/facebook_ads_creative_history_data.csv", "name": "facebook_ads_creative_history_data", "resource_type": "seed", "alias": "facebook_ads_creative_history_data", "checksum": {"name": "path", "checksum": "data/facebook_ads_creative_history_data.csv"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"page_link": "string", "template_page_link": "string", "id": "int64", "account_id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"page_link": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}", "template_page_link": "{{ 'string' if target.name == 'bigquery' else 'varchar' }}", "id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_creative_history_data`"}, "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "twitter_promoted_tweet_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "twitter_promoted_tweet_history_data.csv", "original_file_path": "data/twitter_promoted_tweet_history_data.csv", "name": "twitter_promoted_tweet_history_data", "resource_type": "seed", "alias": "twitter_promoted_tweet_history_data", "checksum": {"name": "sha256", "checksum": "c86c8537ad1859822edecc33c3770ff89482970d11e866b85f35a0882a2725ca"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"tweet_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"tweet_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter_promoted_tweet_history_data`"}, "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "twitter_promoted_tweet_report_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "twitter_promoted_tweet_report_data.csv", "original_file_path": "data/twitter_promoted_tweet_report_data.csv", "name": "twitter_promoted_tweet_report_data", "resource_type": "seed", "alias": "twitter_promoted_tweet_report_data", "checksum": {"name": "sha256", "checksum": "a2e76c3f8c81841095f0c4108cb566e2f51c06729dc83cb34da22db21308f519"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter_promoted_tweet_report_data`"}, "seed.ad_reporting_integration_tests.ad_group_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "ad_group_history_data.csv", "original_file_path": "data/ad_group_history_data.csv", "name": "ad_group_history_data", "resource_type": "seed", "alias": "ad_group_history_data", "checksum": {"name": "sha256", "checksum": "ef23777af254918465840a752893efe60d8eb29387c96fab44635175c5cee6e6"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"ID": "int64", "CAMPAIGN_ID": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "CAMPAIGN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`ad_group_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "facebook_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "facebook_ads_campaign_history_data.csv", "original_file_path": "data/facebook_ads_campaign_history_data.csv", "name": "facebook_ads_campaign_history_data", "resource_type": "seed", "alias": "facebook_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "0fc07559cd2c4d2d19ee30743b3d37bc40891faa670fac0ecf53b2c2df66bee5"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"id": "int64", "account_id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_campaign_history_data`"}, "seed.ad_reporting_integration_tests.twitter_tweet_url_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "twitter_tweet_url_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_tweet_url_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "twitter_tweet_url_data.csv", "original_file_path": "data/twitter_tweet_url_data.csv", "name": "twitter_tweet_url_data", "resource_type": "seed", "alias": "twitter_tweet_url_data", "checksum": {"name": "sha256", "checksum": "58b1b79764a2e24bf990e3940fc1766f4d5331631d872a3cac60ad9c56b3d943"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"tweet_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"tweet_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter_tweet_url_data`"}, "seed.ad_reporting_integration_tests.campaign_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "campaign_history_data.csv", "original_file_path": "data/campaign_history_data.csv", "name": "campaign_history_data", "resource_type": "seed", "alias": "campaign_history_data", "checksum": {"name": "sha256", "checksum": "b6968916ef6c8933ac5b2331237af6db1614cedd5d9ad61bdbe574d6cfd6d8e1"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"ID": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`campaign_history_data`"}, "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "linkedin_ad_analytics_by_creative_data"], "unique_id": "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "linkedin_ad_analytics_by_creative_data.csv", "original_file_path": "data/linkedin_ad_analytics_by_creative_data.csv", "name": "linkedin_ad_analytics_by_creative_data", "resource_type": "seed", "alias": "linkedin_ad_analytics_by_creative_data", "checksum": {"name": "sha256", "checksum": "90a1a324923b47307989ab10594f537f8c45262ffcdfd8ffbe09bae7f05760f7"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"day": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"day": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin_ad_analytics_by_creative_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "facebook_ads_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "facebook_ads_account_history_data.csv", "original_file_path": "data/facebook_ads_account_history_data.csv", "name": "facebook_ads_account_history_data", "resource_type": "seed", "alias": "facebook_ads_account_history_data", "checksum": {"name": "sha256", "checksum": "92f318955a317f351b928ce94de43eae07f29dc3cadbd0f1a26e62fdba1dc4b1"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_account_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "facebook_ads_basic_ad_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "facebook_ads_basic_ad_data.csv", "original_file_path": "data/facebook_ads_basic_ad_data.csv", "name": "facebook_ads_basic_ad_data", "resource_type": "seed", "alias": "facebook_ads_basic_ad_data", "checksum": {"name": "sha256", "checksum": "0c4ee00ee3a1d9f3a5ccd76384a745b8dddf21eaa9f73ea0f9eabcc3df2968a4"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"ad_id": "int64", "account_id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_basic_ad_data`"}, "seed.ad_reporting_integration_tests.google_ads_click_performance_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "google_ads_click_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_click_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "google_ads_click_performance_data.csv", "original_file_path": "data/google_ads_click_performance_data.csv", "name": "google_ads_click_performance_data", "resource_type": "seed", "alias": "google_ads_click_performance_data", "checksum": {"name": "sha256", "checksum": "97e9bb010087b2022acfead14656b057cca0e26628841ddc3ca07d9682fc78ec"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"ad_group_id": "INT64", "campaign_id": "INT64", "criteria_id": "INT64", "external_customer_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "criteria_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`google_ads_click_performance_data`"}, "seed.ad_reporting_integration_tests.twitter_account_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "twitter_account_history_data"], "unique_id": "seed.ad_reporting_integration_tests.twitter_account_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "twitter_account_history_data.csv", "original_file_path": "data/twitter_account_history_data.csv", "name": "twitter_account_history_data", "resource_type": "seed", "alias": "twitter_account_history_data", "checksum": {"name": "sha256", "checksum": "0901eba818791fcdb5ceae038d0d2dc86f889a4e8c5535a6797ff60858c0877d"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter_account_history_data`"}, "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "facebook_ads_ad_set_history_data"], "unique_id": "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "facebook_ads_ad_set_history_data.csv", "original_file_path": "data/facebook_ads_ad_set_history_data.csv", "name": "facebook_ads_ad_set_history_data", "resource_type": "seed", "alias": "facebook_ads_ad_set_history_data", "checksum": {"name": "sha256", "checksum": "fa5715da546f5758e2191b632fd1f333e30c2b20b8f2c4f3077591a529f51551"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"id": "int64", "account_id": "int64", "campaign_id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_ad_set_history_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_performance_daily_report_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_performance_daily_report_data.csv", "original_file_path": "data/microsoft_ads_ad_performance_daily_report_data.csv", "name": "microsoft_ads_ad_performance_daily_report_data", "resource_type": "seed", "alias": "microsoft_ads_ad_performance_daily_report_data", "checksum": {"name": "sha256", "checksum": "0b3585b6ed6c3d18c8c892a3a446231fd7d6b32b470f55f933214dfb7df0af91"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"account_id": "INT64", "campaign_id": "INT64", "ad_group_id": "INT64", "ad_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"account_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_ad_performance_daily_report_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_history_data.csv", "original_file_path": "data/microsoft_ads_ad_history_data.csv", "name": "microsoft_ads_ad_history_data", "resource_type": "seed", "alias": "microsoft_ads_ad_history_data", "checksum": {"name": "sha256", "checksum": "46fa2ec5ff1aa5ce0476d8a3c1c06f3fa502c1a46606bff897dfe99a06bfda35"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"id": "INT64", "ad_group_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_ad_history_data`"}, "seed.ad_reporting_integration_tests.pin_promotion_report_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "pin_promotion_report_data"], "unique_id": "seed.ad_reporting_integration_tests.pin_promotion_report_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "pin_promotion_report_data.csv", "original_file_path": "data/pin_promotion_report_data.csv", "name": "pin_promotion_report_data", "resource_type": "seed", "alias": "pin_promotion_report_data", "checksum": {"name": "sha256", "checksum": "4aa4efcd681cab55f7e446763ed01bb5100e470b613842b655c4960674b864ac"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"PIN_PROMOTION_ID": "int64", "AD_GROUP_ID": "int64", "CAMPAIGN_ID": "int64", "ADVERTISER_ID": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"PIN_PROMOTION_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "AD_GROUP_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "CAMPAIGN_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "ADVERTISER_ID": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`pin_promotion_report_data`"}, "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "google_ads_criteria_performance_data"], "unique_id": "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "google_ads_criteria_performance_data.csv", "original_file_path": "data/google_ads_criteria_performance_data.csv", "name": "google_ads_criteria_performance_data", "resource_type": "seed", "alias": "google_ads_criteria_performance_data", "checksum": {"name": "sha256", "checksum": "be2dab9389efd247f0a9b6e75d28ccbe242446dee9969b8353515b1fd096d628"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"ad_group_id": "INT64", "campaign_id": "INT64", "external_customer_id": "INT64", "id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"ad_group_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "external_customer_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`google_ads_criteria_performance_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_campaign_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_campaign_history_data.csv", "original_file_path": "data/microsoft_ads_campaign_history_data.csv", "name": "microsoft_ads_campaign_history_data", "resource_type": "seed", "alias": "microsoft_ads_campaign_history_data", "checksum": {"name": "sha256", "checksum": "c5b3e24279ba9df8926fe7e4c58165b0f8fa09172b222cebc2202866cb266e19"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_campaign_history_data`"}, "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting_integration_tests", "microsoft_ads_ad_group_history_data"], "unique_id": "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data", "package_name": "ad_reporting_integration_tests", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests", "path": "microsoft_ads_ad_group_history_data.csv", "original_file_path": "data/microsoft_ads_ad_group_history_data.csv", "name": "microsoft_ads_ad_group_history_data", "resource_type": "seed", "alias": "microsoft_ads_ad_group_history_data", "checksum": {"name": "sha256", "checksum": "f63ae5a2597243253d5396752c86a4784abfc3543ba36fe9affeeec09f0cb3c8"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"id": "INT64", "campaign_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "campaign_id": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_ad_group_history_data`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_group_history') }}\n\n), fields as (\n\n    select \n        id as ad_group_id,\n        campaign_id,\n        name as ad_group_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_group_id','modified_timestamp']) }} as ad_group_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_group_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_group_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__ad_group_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_group_history.sql", "name": "stg_microsoft_ads__ad_group_history", "resource_type": "model", "alias": "stg_microsoft_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "81a7e9df750513ce63a8e599b4ff78de1871a81287524b327945ac5a3f1bbe86"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads_ad_group_history_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data"]}, "description": "Each record in this table represents a version of a Microsoft ad group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_version_id": {"name": "ad_group_version_id", "description": "A unique ID for the version of an ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_group_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_ad_group_history_data`\n\n), fields as (\n\n    select \n        id as ad_group_id,\n        campaign_id,\n        name as ad_group_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(ad_group_id as \n    string\n), ''), '-', coalesce(cast(modified_timestamp as \n    string\n), '')) as \n    string\n))) as ad_group_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_group_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_group_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_performance_daily_report')}}\n\n), fields as (\n\n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        clicks,\n        impressions,\n        spend\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_performance_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__ad_performance_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__ad_performance_daily_report.sql", "name": "stg_microsoft_ads__ad_performance_daily_report", "resource_type": "model", "alias": "stg_microsoft_ads__ad_performance_daily_report", "checksum": {"name": "sha256", "checksum": "145e193000e5fc77f910f3fe9e3f47104b54389a6da7c9796c82867d0cbe9b92"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads_ad_performance_daily_report_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data"]}, "description": "Each record in this table represents the daily performance of a Microsoft ad.", "columns": {"date_day": {"name": "date_day", "description": "The date of the ad performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency that spend and other metrics are reported in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of advertising spend that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_performance_daily_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_ad_performance_daily_report_data`\n\n), fields as (\n\n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        clicks,\n        impressions,\n        spend\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_performance_daily_report`"}, "model.microsoft_ads_source.stg_microsoft_ads__ad_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_history') }}\n\n), fields as (\n\n    select \n        id as ad_id,\n        final_url,\n        ad_group_id,\n        modified_time as modified_timestamp\n    from base\n\n), url_fields as (\n\n    select \n        *,\n        {{ dbt_utils.split_part('final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('final_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_term') }} as utm_term\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_id','modified_timestamp']) }} as ad_version_id\n    from url_fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__ad_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_history.sql", "name": "stg_microsoft_ads__ad_history", "resource_type": "model", "alias": "stg_microsoft_ads__ad_history", "checksum": {"name": "sha256", "checksum": "5206ec8f8977dd7cbd75cf3a7bc0717dde6ce75d8c52ac3050f8ec527a5d9f87"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads_ad_history_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data"]}, "description": "Each record in this table represents a version of a Microsoft ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The full URL that the ad links to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_version_id": {"name": "ad_version_id", "description": "A unique ID for the version of an ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__ad_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_ad_history_data`\n\n), fields as (\n\n    select \n        id as ad_id,\n        final_url,\n        ad_group_id,\n        modified_time as modified_timestamp\n    from base\n\n), url_fields as (\n\n    select \n        *,\n        \n\n    split(\n        final_url,\n        '?'\n        )[safe_offset(0)]\n\n as base_url,\n        \n    safe_cast(\n\n    split(\n        \n\n    split(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n\n,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_path,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_source='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_source,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_medium='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_medium,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_campaign,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_content='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_content,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_term='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_term\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(ad_id as \n    string\n), ''), '-', coalesce(cast(modified_timestamp as \n    string\n), '')) as \n    string\n))) as ad_version_id\n    from url_fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__account_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('account_history') }}\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['account_id','modified_timestamp']) }} as account_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__account_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__account_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__account_history.sql", "original_file_path": "models/stg_microsoft_ads__account_history.sql", "name": "stg_microsoft_ads__account_history", "resource_type": "model", "alias": "stg_microsoft_ads__account_history", "checksum": {"name": "sha256", "checksum": "19867b7e9b8fc35feaff5ed55f0f759fc4ed2817d6852bdd611fbbed8906a579"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads_account_history_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_account_history_data"]}, "description": "Each record in this table represents a version of a Microsoft account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_version_id": {"name": "account_version_id", "description": "A unique ID for the version of an account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__account_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_account_history_data`\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(account_id as \n    string\n), ''), '-', coalesce(cast(modified_timestamp as \n    string\n), '')) as \n    string\n))) as account_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__account_history`"}, "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('campaign_history') }}\n\n), fields as (\n\n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','modified_timestamp']) }} as campaign_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__campaign_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__campaign_history.sql", "original_file_path": "models/stg_microsoft_ads__campaign_history.sql", "name": "stg_microsoft_ads__campaign_history", "resource_type": "model", "alias": "stg_microsoft_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "362c1e62ce15b237e40d5f8c4e6e1c5d42b008ef5c554141250aec06ca272c14"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads_campaign_history_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data"]}, "description": "Each record in this table represents a version of a Microsoft campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_version_id": {"name": "campaign_version_id", "description": "A unique ID for the version of an campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads__campaign_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads_campaign_history_data`\n\n), fields as (\n\n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(campaign_id as \n    string\n), ''), '-', coalesce(cast(modified_timestamp as \n    string\n), '')) as \n    string\n))) as campaign_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__campaign_history`"}, "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "account_version_id", "model": "{{ ref('stg_microsoft_ads__account_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "unique_stg_microsoft_ads__account_history_account_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/unique_stg_microsoft_ads__account_history_account_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__account_history_account_version_id", "resource_type": "test", "alias": "unique_stg_microsoft_ads__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/unique_stg_microsoft_ads__account_history_account_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        account_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__account_history`\n    where account_version_id is not null\n    group by account_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "account_version_id", "model": "{{ ref('stg_microsoft_ads__account_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "not_null_stg_microsoft_ads__account_history_account_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/not_null_stg_microsoft_ads__account_history_account_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__account_history_account_version_id", "resource_type": "test", "alias": "not_null_stg_microsoft_ads__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/not_null_stg_microsoft_ads__account_history_account_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__account_history`\nwhere account_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id"}, "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ad_group_version_id", "model": "{{ ref('stg_microsoft_ads__ad_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "unique_stg_microsoft_ads__ad_group_history_ad_group_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__ad_group_history_ad_group_version_id", "resource_type": "test", "alias": "unique_stg_microsoft_ads__ad_group_history_ad_group_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__ad_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/unique_stg_microsoft_ads__ad_group_history_ad_group_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        ad_group_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_group_history`\n    where ad_group_version_id is not null\n    group by ad_group_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_version_id"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ad_group_version_id", "model": "{{ ref('stg_microsoft_ads__ad_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id", "resource_type": "test", "alias": "not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__ad_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_group_history`\nwhere ad_group_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_group_version_id"}, "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ad_version_id", "model": "{{ ref('stg_microsoft_ads__ad_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "unique_stg_microsoft_ads__ad_history_ad_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/unique_stg_microsoft_ads__ad_history_ad_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__ad_history_ad_version_id", "resource_type": "test", "alias": "unique_stg_microsoft_ads__ad_history_ad_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__ad_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/unique_stg_microsoft_ads__ad_history_ad_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        ad_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_history`\n    where ad_version_id is not null\n    group by ad_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_version_id"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ad_version_id", "model": "{{ ref('stg_microsoft_ads__ad_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "not_null_stg_microsoft_ads__ad_history_ad_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/not_null_stg_microsoft_ads__ad_history_ad_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__ad_history_ad_version_id", "resource_type": "test", "alias": "not_null_stg_microsoft_ads__ad_history_ad_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__ad_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/not_null_stg_microsoft_ads__ad_history_ad_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_history`\nwhere ad_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_version_id"}, "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_version_id", "model": "{{ ref('stg_microsoft_ads__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "unique_stg_microsoft_ads__campaign_history_campaign_version_id"], "unique_id": "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/unique_stg_microsoft_ads__campaign_history_campaign_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "unique_stg_microsoft_ads__campaign_history_campaign_version_id", "resource_type": "test", "alias": "unique_stg_microsoft_ads__campaign_history_campaign_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/unique_stg_microsoft_ads__campaign_history_campaign_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__campaign_history`\n    where campaign_version_id is not null\n    group by campaign_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id"}, "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_version_id", "model": "{{ ref('stg_microsoft_ads__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads_source", "schema_test", "not_null_stg_microsoft_ads__campaign_history_campaign_version_id"], "unique_id": "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "schema_test/not_null_stg_microsoft_ads__campaign_history_campaign_version_id.sql", "original_file_path": "models/stg_microsoft_ads.yml", "name": "not_null_stg_microsoft_ads__campaign_history_campaign_version_id", "resource_type": "test", "alias": "not_null_stg_microsoft_ads__campaign_history_campaign_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_microsoft_ads__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/microsoft_ads_source/models/stg_microsoft_ads.yml/schema_test/not_null_stg_microsoft_ads__campaign_history_campaign_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__campaign_history`\nwhere campaign_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id"}, "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media": {"raw_sql": "{{ config(enabled=target.type=='bigquery') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n  \n), fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        caption, \n        description, \n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/bigquery/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "b0b8d0da06b2a42d30965c6711b527d014079438f9807ef89534a57dd38954bd"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": "target/compiled/facebook_ads_creative_history/models/bigquery/stg_facebook_ads__carousel_media.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`int__facebook_ads__carousel_media_prep`\n  \n), fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        caption, \n        description, \n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__carousel_media`"}, "model.facebook_ads_creative_history.stg_facebook_ads__app_link": {"raw_sql": "{{ config(enabled=target.type=='bigquery') }}\n\nwith base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n  select \n    _fivetran_id, \n    creative_id, \n    template_app_link_spec_ios,\n    template_app_link_spec_ipad,\n    template_app_link_spec_android,\n    template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n  \n), unnested_{{ app }} as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    '{{ app }}' as app_type,\n    json_extract_scalar(element, '$.index') as index,\n    json_extract_scalar(element, '$.app_name') as app_name,\n    json_extract_scalar(element, '$.app_store_id') as app_store_id,\n    json_extract_scalar(element, '$.class') as class_name,\n    json_extract_scalar(element, '$.package') as package_name,\n    json_extract_scalar(element, '$.template_page') as template_page\n  from required_fields\n  left join unnest(json_extract_array(template_app_link_spec_{{ app }})) as element\n\n{% endfor %}\n\n), unioned as (\n\n    select * from unnested_ios\n    union all\n    select * from unnested_iphone\n    union all\n    select * from unnested_ipad\n    union all\n    select * from unnested_android\n\n)\n\nselect *\nfrom unioned", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__app_link.sql", "original_file_path": "models/bigquery/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "resource_type": "model", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "d16532911b444655703f0ccccf6c0b5a13db91a0073ab17ecd88043071fab7ee"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": "target/compiled/facebook_ads_creative_history/models/bigquery/stg_facebook_ads__app_link.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n  select *\n  from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history`\n\n), required_fields as (\n\n  select \n    _fivetran_id, \n    creative_id, \n    template_app_link_spec_ios,\n    template_app_link_spec_ipad,\n    template_app_link_spec_android,\n    template_app_link_spec_iphone\n  from base\n\n\n  \n), unnested_ios as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    'ios' as app_type,\n    json_extract_scalar(element, '$.index') as index,\n    json_extract_scalar(element, '$.app_name') as app_name,\n    json_extract_scalar(element, '$.app_store_id') as app_store_id,\n    json_extract_scalar(element, '$.class') as class_name,\n    json_extract_scalar(element, '$.package') as package_name,\n    json_extract_scalar(element, '$.template_page') as template_page\n  from required_fields\n  left join unnest(json_extract_array(template_app_link_spec_ios)) as element\n\n\n  \n), unnested_ipad as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    'ipad' as app_type,\n    json_extract_scalar(element, '$.index') as index,\n    json_extract_scalar(element, '$.app_name') as app_name,\n    json_extract_scalar(element, '$.app_store_id') as app_store_id,\n    json_extract_scalar(element, '$.class') as class_name,\n    json_extract_scalar(element, '$.package') as package_name,\n    json_extract_scalar(element, '$.template_page') as template_page\n  from required_fields\n  left join unnest(json_extract_array(template_app_link_spec_ipad)) as element\n\n\n  \n), unnested_android as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    'android' as app_type,\n    json_extract_scalar(element, '$.index') as index,\n    json_extract_scalar(element, '$.app_name') as app_name,\n    json_extract_scalar(element, '$.app_store_id') as app_store_id,\n    json_extract_scalar(element, '$.class') as class_name,\n    json_extract_scalar(element, '$.package') as package_name,\n    json_extract_scalar(element, '$.template_page') as template_page\n  from required_fields\n  left join unnest(json_extract_array(template_app_link_spec_android)) as element\n\n\n  \n), unnested_iphone as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    'iphone' as app_type,\n    json_extract_scalar(element, '$.index') as index,\n    json_extract_scalar(element, '$.app_name') as app_name,\n    json_extract_scalar(element, '$.app_store_id') as app_store_id,\n    json_extract_scalar(element, '$.class') as class_name,\n    json_extract_scalar(element, '$.package') as package_name,\n    json_extract_scalar(element, '$.template_page') as template_page\n  from required_fields\n  left join unnest(json_extract_array(template_app_link_spec_iphone)) as element\n\n\n\n), unioned as (\n\n    select * from unnested_ios\n    union all\n    select * from unnested_iphone\n    union all\n    select * from unnested_ipad\n    union all\n    select * from unnested_android\n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__app_link`"}, "model.facebook_ads_creative_history.stg_facebook_ads__url_tag": {"raw_sql": "{{ config(enabled=target.type=='bigquery') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n\n), cleaned_json as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        json_extract_array(replace(trim(url_tags, '\"'),'\\\\','')) as cleaned_url_tags\n    from required_fields\n\n), unnested as (\n    \n    select _fivetran_id, creative_id, url_tag_element\n    from cleaned_json\n    left join unnest(cleaned_url_tags) as url_tag_element\n    where cleaned_url_tags is not null\n  \n), fields as (\n    \n    select \n        _fivetran_id,\n        creative_id,\n        json_extract_scalar(url_tag_element, '$.key') as key,\n        json_extract_scalar(url_tag_element, '$.value') as value,\n        json_extract_scalar(url_tag_element, '$.type') as type\n    from unnested\n  \n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__url_tag.sql", "original_file_path": "models/bigquery/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "resource_type": "model", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "03fe363c2dfd4be9a56b21c05ea03dfaf34d002bcd43f8e303330ceebadb91ef"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": "target/compiled/facebook_ads_creative_history/models/bigquery/stg_facebook_ads__url_tag.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history`\n\n), required_fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n\n), cleaned_json as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        json_extract_array(replace(trim(url_tags, '\"'),'\\\\','')) as cleaned_url_tags\n    from required_fields\n\n), unnested as (\n    \n    select _fivetran_id, creative_id, url_tag_element\n    from cleaned_json\n    left join unnest(cleaned_url_tags) as url_tag_element\n    where cleaned_url_tags is not null\n  \n), fields as (\n    \n    select \n        _fivetran_id,\n        creative_id,\n        json_extract_scalar(url_tag_element, '$.key') as key,\n        json_extract_scalar(url_tag_element, '$.value') as value,\n        json_extract_scalar(url_tag_element, '$.type') as type\n    from unnested\n  \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__url_tag`"}, "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags": {"raw_sql": "{{ config(enabled=target.type=='bigquery') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n  \n), unnested as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        index,\n        json_extract_scalar(element, '$.key') as key,\n        json_extract_scalar(element, '$.value') as value\n    from base\n    inner join unnest(url_tags) as element\n\n)\n\nselect *\nfrom unnested", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/bigquery/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "899751ccef2fcea5586324d839e4a1994692ae3d2c6026f005cdd7c0eb361c03"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": "target/compiled/facebook_ads_creative_history/models/bigquery/stg_facebook_ads__carousel_media_url_tags.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`int__facebook_ads__carousel_media_prep`\n  \n), unnested as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        index,\n        json_extract_scalar(element, '$.key') as key,\n        json_extract_scalar(element, '$.value') as value\n    from base\n    inner join unnest(url_tags) as element\n\n)\n\nselect *\nfrom unnested", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__carousel_media_url_tags`"}, "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep": {"raw_sql": "{{ config(enabled=target.type=='bigquery') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id, \n        creative_id, \n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message\n    from base\n    where object_story_link_data_child_attachments is not null\n  \n), unnested as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption, \n        object_story_link_data_description as description, \n        object_story_link_data_message as message,\n        json_extract_scalar(element, '$.link') as link,\n        json_extract_array(element, '$.url_tags') as url_tags,\n        row_number() over (partition by _fivetran_id, creative_id) as index\n    from required_fields\n    left join unnest(json_extract_array(object_story_link_data_child_attachments)) as element\n\n)\n\nselect *\nfrom unnested", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "bigquery", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "bigquery/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/bigquery/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "resource_type": "model", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "cf001b39ba5090af1fd53f6e1a45070e69af484ab52cabd87f9b7de0a8ef3fe4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_creative_history/models/bigquery/int__facebook_ads__carousel_media_prep.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history`\n\n), required_fields as (\n\n    select \n        _fivetran_id, \n        creative_id, \n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message\n    from base\n    where object_story_link_data_child_attachments is not null\n  \n), unnested as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption, \n        object_story_link_data_description as description, \n        object_story_link_data_message as message,\n        json_extract_scalar(element, '$.link') as link,\n        json_extract_array(element, '$.url_tags') as url_tags,\n        row_number() over (partition by _fivetran_id, creative_id) as index\n    from required_fields\n    left join unnest(json_extract_array(object_story_link_data_child_attachments)) as element\n\n)\n\nselect *\nfrom unnested", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`int__facebook_ads__carousel_media_prep`"}, "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url": {"raw_sql": "{{ config(enabled=target.type=='bigquery') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (  \n  \n    select \n        _fivetran_id, \n        asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n  \n), unnested as (\n\n    select \n        _fivetran_id,\n        nullif(json_extract_scalar(elements,'$.display_url'),'') as display_url,\n        nullif(json_extract_scalar(elements,'$.website_url'),'') as website_url,\n        row_number() over (partition by _fivetran_id) as index\n    from required_fields\n    left join unnest(json_extract_array(asset_feed_spec_link_urls)) as elements\n\n)\n\nselect *\nfrom unnested", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "bigquery", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "bigquery/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/bigquery/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "resource_type": "model", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "6a0b8aa95ad7ce39febb6ecb98e3e3ee4ca75a2b5f17d2c0571c303f00441884"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": "target/compiled/facebook_ads_creative_history/models/bigquery/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history`\n\n), required_fields as (  \n  \n    select \n        _fivetran_id, \n        asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n  \n), unnested as (\n\n    select \n        _fivetran_id,\n        nullif(json_extract_scalar(elements,'$.display_url'),'') as display_url,\n        nullif(json_extract_scalar(elements,'$.website_url'),'') as website_url,\n        row_number() over (partition by _fivetran_id) as index\n    from required_fields\n    left join unnest(json_extract_array(asset_feed_spec_link_urls)) as elements\n\n)\n\nselect *\nfrom unnested", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history_asset_feed_spec_link_url`"}, "model.facebook_ads_creative_history.utils__facebook_ads__numbers": {"raw_sql": "{{ dbt_utils.generate_series(upper_bound=1000) }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "redshift", "utils__facebook_ads__numbers"], "unique_id": "model.facebook_ads_creative_history.utils__facebook_ads__numbers", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "redshift/utils__facebook_ads__numbers.sql", "original_file_path": "models/redshift/utils__facebook_ads__numbers.sql", "name": "utils__facebook_ads__numbers", "resource_type": "model", "alias": "utils__facebook_ads__numbers", "checksum": {"name": "sha256", "checksum": "d0b8959131dfc9e1f7b1116c0adfb9e7f1b8a548be9ace85fc293a379eeeaf9c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_creative_history/models/redshift/utils__facebook_ads__numbers.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1000\n    order by generated_number\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`utils__facebook_ads__numbers`"}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "app_type", "index", "template_page"], "model": "{{ ref('stg_facebook_ads__app_link') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "schema_test", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link_fad7584238c22445a91ce88d15cbba6e.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__app_link"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__app_link"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link_fad7584238c22445a91ce88d15cbba6e.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, app_type, index, template_page\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__app_link`\n\n    group by _fivetran_id, app_type, index, template_page\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "index"], "model": "{{ ref('stg_facebook_ads__carousel_media') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "schema_test", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__carousel_media"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, index\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__carousel_media`\n\n    group by _fivetran_id, index\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "index", "key"], "model": "{{ ref('stg_facebook_ads__carousel_media_url_tags') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "schema_test", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__carousel_media_url_tags"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, index, key\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__carousel_media_url_tags`\n\n    group by _fivetran_id, index, key\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "index"], "model": "{{ ref('stg_facebook_ads__creative_history_asset_feed_spec_link_url') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "schema_test", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__creative_history_asset_feed_spec_link_url"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, index\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history_asset_feed_spec_link_url`\n\n    group by _fivetran_id, index\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": "dbt_utils", "name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "key", "type"], "model": "{{ ref('stg_facebook_ads__url_tag') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "schema_test", "dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type"], "unique_id": "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type.sql", "original_file_path": "models/facebook_backwards_compatibility.yml", "name": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type", "resource_type": "test", "alias": "dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__url_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.facebook_ads_creative_history.stg_facebook_ads__url_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_creative_history/models/facebook_backwards_compatibility.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, key, type\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__url_tag`\n\n    group by _fivetran_id, key, type\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "model.twitter_ads.twitter__line_item_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('twitter__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        line_item_name,\n        line_item_id,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n), unique_id as (\n\n    select  \n        *,\n        {{ dbt_utils.surrogate_key(['date_day','line_item_id']) }} as daily_line_item_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "twitter__line_item_report"], "unique_id": "model.twitter_ads.twitter__line_item_report", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "twitter__line_item_report.sql", "original_file_path": "models/twitter__line_item_report.sql", "name": "twitter__line_item_report", "resource_type": "model", "alias": "twitter__line_item_report", "checksum": {"name": "sha256", "checksum": "b4747032b54810f802d9c4e4e9ace63279683bda99fc110fff2aaf9e598617a7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "Each record represents the daily ad performance of each line item.", "columns": {"daily_line_item_id": {"name": "daily_line_item_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/twitter.yml", "build_path": "target/compiled/twitter_ads/models/twitter__line_item_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`twitter__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        line_item_name,\n        line_item_id,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3,4,5\n\n), unique_id as (\n\n    select  \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(date_day as \n    string\n), ''), '-', coalesce(cast(line_item_id as \n    string\n), '')) as \n    string\n))) as daily_line_item_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter__line_item_report`"}, "model.twitter_ads.twitter__ad_adapter": {"raw_sql": "with accounts as (\n\n    select *\n    from {{ var('twitter_account_history') }}\n    where is_latest_version = True\n\n), campaigns as (\n\n    select *\n    from {{ var('twitter_campaign_history') }}\n    where is_latest_version = True\n\n), line_items as (\n\n    select *\n    from {{ var('twitter_line_item_history') }}\n    where is_latest_version = True\n\n), metrics as (\n\n    select *\n    from {{ var('twitter_promoted_tweet_report') }}\n\n), promoted_tweet as (\n\n    select *\n    from {{ var('twitter_promoted_tweet_history')}}\n    where is_latest_version = True\n\n), tweet_url as (\n\n    select *\n    from {{ var('twitter_tweet_url') }}\n\n), joined as (\n\n    select\n        metrics.date_day,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        line_items.name as line_item_name,\n        line_items.line_item_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        sum(metrics.spend) as spend,\n        sum(metrics.clicks) as clicks,\n        sum(metrics.url_clicks) as url_clicks,\n        sum(metrics.impressions) as impressions\n    from metrics\n    left join promoted_tweet\n        using (promoted_tweet_id)\n    left join tweet_url\n        using (tweet_id)\n    left join line_items\n        using (line_item_id)\n    left join campaigns\n        using (campaign_id)\n    {{ dbt_utils.group_by(13) }}\n\n), unique_id as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','base_url','line_item_id','campaign_id']) }} as daily_ad_id\n    from joined\n\n)\n\nselect *\nfrom unique_id", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "twitter__ad_adapter"], "unique_id": "model.twitter_ads.twitter__ad_adapter", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "twitter__ad_adapter.sql", "original_file_path": "models/twitter__ad_adapter.sql", "name": "twitter__ad_adapter", "resource_type": "model", "alias": "twitter__ad_adapter", "checksum": {"name": "sha256", "checksum": "3e7b88b1ddd7e7007047bd26b259f32e6dbc8c4daef9f11a1dc0ee7421843c68"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__account_history"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__line_item_history"], ["stg_twitter_ads__promoted_tweet_report"], ["stg_twitter_ads__promoted_tweet_history"], ["stg_twitter_ads__tweet_url"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__tweet_url"]}, "description": "Each record represents the daily performance of a line item at the URL level.", "columns": {"daily_ad_id": {"name": "daily_ad_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/twitter.yml", "build_path": "target/compiled/twitter_ads/models/twitter__ad_adapter.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with accounts as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__account_history`\n    where is_latest_version = True\n\n), campaigns as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__campaign_history`\n    where is_latest_version = True\n\n), line_items as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__line_item_history`\n    where is_latest_version = True\n\n), metrics as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_report`\n\n), promoted_tweet as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_history`\n    where is_latest_version = True\n\n), tweet_url as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__tweet_url`\n\n), joined as (\n\n    select\n        metrics.date_day,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        line_items.name as line_item_name,\n        line_items.line_item_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        sum(metrics.spend) as spend,\n        sum(metrics.clicks) as clicks,\n        sum(metrics.url_clicks) as url_clicks,\n        sum(metrics.impressions) as impressions\n    from metrics\n    left join promoted_tweet\n        using (promoted_tweet_id)\n    left join tweet_url\n        using (tweet_id)\n    left join line_items\n        using (line_item_id)\n    left join campaigns\n        using (campaign_id)\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13\n\n), unique_id as (\n\n    select\n        *,\n        to_hex(md5(cast(concat(coalesce(cast(date_day as \n    string\n), ''), '-', coalesce(cast(base_url as \n    string\n), ''), '-', coalesce(cast(line_item_id as \n    string\n), ''), '-', coalesce(cast(campaign_id as \n    string\n), '')) as \n    string\n))) as daily_ad_id\n    from joined\n\n)\n\nselect *\nfrom unique_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter__ad_adapter`"}, "model.twitter_ads.twitter__campaign_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('twitter__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n), unique_id as (\n\n    select  \n        *,\n        {{ dbt_utils.surrogate_key(['date_day','campaign_id']) }} as daily_campaign_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "twitter__campaign_report"], "unique_id": "model.twitter_ads.twitter__campaign_report", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "twitter__campaign_report.sql", "original_file_path": "models/twitter__campaign_report.sql", "name": "twitter__campaign_report", "resource_type": "model", "alias": "twitter__campaign_report", "checksum": {"name": "sha256", "checksum": "e07bd94ffe796f110278a6463b2e6600c5418291dc9ee29d5bd4a290f2f21ddf"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "Each record represents the daily ad performance of each campaign.", "columns": {"daily_campaign_id": {"name": "daily_campaign_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/twitter.yml", "build_path": "target/compiled/twitter_ads/models/twitter__campaign_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`twitter__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3\n\n), unique_id as (\n\n    select  \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(date_day as \n    string\n), ''), '-', coalesce(cast(campaign_id as \n    string\n), '')) as \n    string\n))) as daily_campaign_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`twitter__campaign_report`"}, "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "daily_ad_id", "model": "{{ ref('twitter__ad_adapter') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "schema_test", "unique_twitter__ad_adapter_daily_ad_id"], "unique_id": "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "schema_test/unique_twitter__ad_adapter_daily_ad_id.sql", "original_file_path": "models/twitter.yml", "name": "unique_twitter__ad_adapter_daily_ad_id", "resource_type": "test", "alias": "unique_twitter__ad_adapter_daily_ad_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads/models/twitter.yml/schema_test/unique_twitter__ad_adapter_daily_ad_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        daily_ad_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`twitter__ad_adapter`\n    where daily_ad_id is not null\n    group by daily_ad_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_ad_id"}, "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "daily_ad_id", "model": "{{ ref('twitter__ad_adapter') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "schema_test", "not_null_twitter__ad_adapter_daily_ad_id"], "unique_id": "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "schema_test/not_null_twitter__ad_adapter_daily_ad_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter__ad_adapter_daily_ad_id", "resource_type": "test", "alias": "not_null_twitter__ad_adapter_daily_ad_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads/models/twitter.yml/schema_test/not_null_twitter__ad_adapter_daily_ad_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter__ad_adapter`\nwhere daily_ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_ad_id"}, "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "daily_campaign_id", "model": "{{ ref('twitter__campaign_report') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "schema_test", "unique_twitter__campaign_report_daily_campaign_id"], "unique_id": "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "schema_test/unique_twitter__campaign_report_daily_campaign_id.sql", "original_file_path": "models/twitter.yml", "name": "unique_twitter__campaign_report_daily_campaign_id", "resource_type": "test", "alias": "unique_twitter__campaign_report_daily_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["twitter__campaign_report"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.twitter_ads.twitter__campaign_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads/models/twitter.yml/schema_test/unique_twitter__campaign_report_daily_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        daily_campaign_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`twitter__campaign_report`\n    where daily_campaign_id is not null\n    group by daily_campaign_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_campaign_id"}, "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "daily_campaign_id", "model": "{{ ref('twitter__campaign_report') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "schema_test", "not_null_twitter__campaign_report_daily_campaign_id"], "unique_id": "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "schema_test/not_null_twitter__campaign_report_daily_campaign_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter__campaign_report_daily_campaign_id", "resource_type": "test", "alias": "not_null_twitter__campaign_report_daily_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["twitter__campaign_report"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.twitter_ads.twitter__campaign_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads/models/twitter.yml/schema_test/not_null_twitter__campaign_report_daily_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter__campaign_report`\nwhere daily_campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_campaign_id"}, "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "daily_line_item_id", "model": "{{ ref('twitter__line_item_report') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "schema_test", "unique_twitter__line_item_report_daily_line_item_id"], "unique_id": "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "schema_test/unique_twitter__line_item_report_daily_line_item_id.sql", "original_file_path": "models/twitter.yml", "name": "unique_twitter__line_item_report_daily_line_item_id", "resource_type": "test", "alias": "unique_twitter__line_item_report_daily_line_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["twitter__line_item_report"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.twitter_ads.twitter__line_item_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads/models/twitter.yml/schema_test/unique_twitter__line_item_report_daily_line_item_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        daily_line_item_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`twitter__line_item_report`\n    where daily_line_item_id is not null\n    group by daily_line_item_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_line_item_id"}, "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "daily_line_item_id", "model": "{{ ref('twitter__line_item_report') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads", "schema_test", "not_null_twitter__line_item_report_daily_line_item_id"], "unique_id": "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id", "package_name": "twitter_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads", "path": "schema_test/not_null_twitter__line_item_report_daily_line_item_id.sql", "original_file_path": "models/twitter.yml", "name": "not_null_twitter__line_item_report_daily_line_item_id", "resource_type": "test", "alias": "not_null_twitter__line_item_report_daily_line_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["twitter__line_item_report"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.twitter_ads.twitter__line_item_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads/models/twitter.yml/schema_test/not_null_twitter__line_item_report_daily_line_item_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter__line_item_report`\nwhere daily_line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_line_item_id"}, "model.pinterest.pinterest_ads__ad_adapter": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('pin_promotion_report') }}\n\n), pins as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_pin_promotion') }}\n\n), ad_groups as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_ad_group') }}\n\n), campaigns as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_campaign') }}\n\n), joined as (\n\n    select \n        report.date_day as campaign_date,\n        report.ad_group_id,\n        report.campaign_id,\n        report.spend,\n        report.impressions,\n        report.clicks,\n        campaigns.name as campaign_name,\n        ad_groups.name as ad_group_name,\n        pins.destination_url,\n        pins.base_url,\n        pins.url_host,\n        pins.url_path,\n        pins.utm_source,\n        pins.utm_medium,\n        pins.utm_campaign,\n        pins.utm_content,\n        pins.utm_term\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n\n), aggregates as (\n\n    select         \n        {{ dbt_utils.surrogate_key(\n            [\n                'campaign_date',\n                'campaign_id',\n                'ad_group_id',\n                'destination_url'\n            ]\n        ) }} as daily_id,\n\n        campaign_date,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        'pinterest ads' as platform,\n\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from joined\n    {{ dbt_utils.group_by(15) }}\n    \n)\n\nselect * \nfrom aggregates", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "pinterest_ads__ad_adapter"], "unique_id": "model.pinterest.pinterest_ads__ad_adapter", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "pinterest_ads__ad_adapter.sql", "original_file_path": "models/pinterest_ads__ad_adapter.sql", "name": "pinterest_ads__ad_adapter", "resource_type": "model", "alias": "pinterest_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "98da74c5a1100513fef60696cebb1f4c1f3d4c3e397e3f1fce7b03f8b70685ac"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"], ["int_pinterest_ads__most_recent_pin_promotion"], ["int_pinterest_ads__most_recent_ad_group"], ["int_pinterest_ads__most_recent_campaign"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "model.pinterest.int_pinterest_ads__most_recent_ad_group", "model.pinterest.int_pinterest_ads__most_recent_campaign"]}, "description": "Each record in this table represents the daily performance of ads at the ad group and url level.", "columns": {"daily_id": {"name": "daily_id", "description": "A unique key, a combination of the campaign, ad group and campaign date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Pinterest Ads", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/pinterest.yml", "build_path": "target/compiled/pinterest/models/pinterest_ads__ad_adapter.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with  __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n),  __dbt__CTE__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n),  __dbt__CTE__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n),report as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_report`\n\n), pins as (\n\n    select *\n    from __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion\n\n), ad_groups as (\n\n    select *\n    from __dbt__CTE__int_pinterest_ads__most_recent_ad_group\n\n), campaigns as (\n\n    select *\n    from __dbt__CTE__int_pinterest_ads__most_recent_campaign\n\n), joined as (\n\n    select \n        report.date_day as campaign_date,\n        report.ad_group_id,\n        report.campaign_id,\n        report.spend,\n        report.impressions,\n        report.clicks,\n        campaigns.name as campaign_name,\n        ad_groups.name as ad_group_name,\n        pins.destination_url,\n        pins.base_url,\n        pins.url_host,\n        pins.url_path,\n        pins.utm_source,\n        pins.utm_medium,\n        pins.utm_campaign,\n        pins.utm_content,\n        pins.utm_term\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n\n), aggregates as (\n\n    select         \n        to_hex(md5(cast(concat(coalesce(cast(campaign_date as \n    string\n), ''), '-', coalesce(cast(campaign_id as \n    string\n), ''), '-', coalesce(cast(ad_group_id as \n    string\n), ''), '-', coalesce(cast(destination_url as \n    string\n), '')) as \n    string\n))) as daily_id,\n\n        campaign_date,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        'pinterest ads' as platform,\n\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from joined\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    \n)\n\nselect * \nfrom aggregates", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}, {"id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}, {"id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__ad_adapter`"}, "model.pinterest.pinterest_ads__campaign_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter') }}\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "pinterest_ads__campaign_ad_report"], "unique_id": "model.pinterest.pinterest_ads__campaign_ad_report", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "pinterest_ads__campaign_ad_report.sql", "original_file_path": "models/pinterest_ads__campaign_ad_report.sql", "name": "pinterest_ads__campaign_ad_report", "resource_type": "model", "alias": "pinterest_ads__campaign_ad_report", "checksum": {"name": "sha256", "checksum": "c64645f6eba71e8c169caa5ef0bdd4c1d35a720666c88e38ca1e72a9ac9818d5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/pinterest.yml", "build_path": "target/compiled/pinterest/models/pinterest_ads__campaign_ad_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__ad_adapter`\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__campaign_ad_report`"}, "model.pinterest.pinterest_ads__ad_group_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter') }}\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "pinterest_ads__ad_group_ad_report"], "unique_id": "model.pinterest.pinterest_ads__ad_group_ad_report", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "pinterest_ads__ad_group_ad_report.sql", "original_file_path": "models/pinterest_ads__ad_group_ad_report.sql", "name": "pinterest_ads__ad_group_ad_report", "resource_type": "model", "alias": "pinterest_ads__ad_group_ad_report", "checksum": {"name": "sha256", "checksum": "fdcf38ebeeb0e16ce6fa4454ad0f684e3d51d9ff15f94e811b4837c239d6ea8d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the ad group level.", "columns": {"campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/pinterest.yml", "build_path": "target/compiled/pinterest/models/pinterest_ads__ad_group_ad_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__ad_adapter`\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__ad_group_ad_report`"}, "model.pinterest.int_pinterest_ads__most_recent_campaign": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('campaign_history') }}\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "intermediate", "int_pinterest_ads__most_recent_campaign"], "unique_id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "intermediate/int_pinterest_ads__most_recent_campaign.sql", "original_file_path": "models/intermediate/int_pinterest_ads__most_recent_campaign.sql", "name": "int_pinterest_ads__most_recent_campaign", "resource_type": "model", "alias": "int_pinterest_ads__most_recent_campaign", "checksum": {"name": "sha256", "checksum": "9dec8bee1a362714ea373056a154c08c35dde732de1bad36901cba59823a9d3a"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "description": "", "columns": {"campaign_id": {"name": "campaign_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate.yml", "build_path": "target/compiled/pinterest/models/intermediate/int_pinterest_ads__most_recent_campaign.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.pinterest.int_pinterest_ads__most_recent_pin_promotion": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('pin_promotion_history') }}\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "intermediate", "int_pinterest_ads__most_recent_pin_promotion"], "unique_id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "intermediate/int_pinterest_ads__most_recent_pin_promotion.sql", "original_file_path": "models/intermediate/int_pinterest_ads__most_recent_pin_promotion.sql", "name": "int_pinterest_ads__most_recent_pin_promotion", "resource_type": "model", "alias": "int_pinterest_ads__most_recent_pin_promotion", "checksum": {"name": "sha256", "checksum": "88b7d30cb438e94648e7be8b789690c9aad37802a8b4e76bc105a3a729e2b3a6"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "description": "", "columns": {"pin_promotion_id": {"name": "pin_promotion_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate.yml", "build_path": "target/compiled/pinterest/models/intermediate/int_pinterest_ads__most_recent_pin_promotion.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.pinterest.int_pinterest_ads__most_recent_ad_group": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_group_history') }}\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "intermediate", "int_pinterest_ads__most_recent_ad_group"], "unique_id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "intermediate/int_pinterest_ads__most_recent_ad_group.sql", "original_file_path": "models/intermediate/int_pinterest_ads__most_recent_ad_group.sql", "name": "int_pinterest_ads__most_recent_ad_group", "resource_type": "model", "alias": "int_pinterest_ads__most_recent_ad_group", "checksum": {"name": "sha256", "checksum": "e3ff2ad5deca2030f19bc439aef48cf5a6f36b2e4a2699229b5de4a581483eeb"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "description": "", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/intermediate.yml", "build_path": "target/compiled/pinterest/models/intermediate/int_pinterest_ads__most_recent_ad_group.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "daily_id", "model": "{{ ref('pinterest_ads__ad_adapter') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "unique_pinterest_ads__ad_adapter_daily_id"], "unique_id": "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/unique_pinterest_ads__ad_adapter_daily_id.sql", "original_file_path": "models/pinterest.yml", "name": "unique_pinterest_ads__ad_adapter_daily_id", "resource_type": "test", "alias": "unique_pinterest_ads__ad_adapter_daily_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/pinterest.yml/schema_test/unique_pinterest_ads__ad_adapter_daily_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        daily_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__ad_adapter`\n    where daily_id is not null\n    group by daily_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_id"}, "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "daily_id", "model": "{{ ref('pinterest_ads__ad_adapter') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "not_null_pinterest_ads__ad_adapter_daily_id"], "unique_id": "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/not_null_pinterest_ads__ad_adapter_daily_id.sql", "original_file_path": "models/pinterest.yml", "name": "not_null_pinterest_ads__ad_adapter_daily_id", "resource_type": "test", "alias": "not_null_pinterest_ads__ad_adapter_daily_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/pinterest.yml/schema_test/not_null_pinterest_ads__ad_adapter_daily_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__ad_adapter`\nwhere daily_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_id"}, "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ad_group_id", "model": "{{ ref('int_pinterest_ads__most_recent_ad_group') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "unique_int_pinterest_ads__most_recent_ad_group_ad_group_id"], "unique_id": "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_int_pinterest_ads__most_recent_ad_group_ad_group_id", "resource_type": "test", "alias": "unique_int_pinterest_ads__most_recent_ad_group_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["int_pinterest_ads__most_recent_ad_group"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/schema_test/unique_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__CTE__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select count(*) as validation_errors\nfrom (\n\n    select\n        ad_group_id\n\n    from __dbt__CTE__int_pinterest_ads__most_recent_ad_group\n    where ad_group_id is not null\n    group by ad_group_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "ad_group_id"}, "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ad_group_id", "model": "{{ ref('int_pinterest_ads__most_recent_ad_group') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id"], "unique_id": "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id", "resource_type": "test", "alias": "not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["int_pinterest_ads__most_recent_ad_group"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/schema_test/not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__CTE__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select count(*) as validation_errors\nfrom __dbt__CTE__int_pinterest_ads__most_recent_ad_group\nwhere ad_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_ad_group", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_ad_group as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by ad_group_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "ad_group_id"}, "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('int_pinterest_ads__most_recent_campaign') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "unique_int_pinterest_ads__most_recent_campaign_campaign_id"], "unique_id": "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/unique_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_int_pinterest_ads__most_recent_campaign_campaign_id", "resource_type": "test", "alias": "unique_int_pinterest_ads__most_recent_campaign_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["int_pinterest_ads__most_recent_campaign"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_campaign"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/schema_test/unique_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__CTE__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select count(*) as validation_errors\nfrom (\n\n    select\n        campaign_id\n\n    from __dbt__CTE__int_pinterest_ads__most_recent_campaign\n    where campaign_id is not null\n    group by campaign_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "campaign_id"}, "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('int_pinterest_ads__most_recent_campaign') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "not_null_int_pinterest_ads__most_recent_campaign_campaign_id"], "unique_id": "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/not_null_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_int_pinterest_ads__most_recent_campaign_campaign_id", "resource_type": "test", "alias": "not_null_int_pinterest_ads__most_recent_campaign_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["int_pinterest_ads__most_recent_campaign"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_campaign"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/schema_test/not_null_int_pinterest_ads__most_recent_campaign_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__CTE__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select count(*) as validation_errors\nfrom __dbt__CTE__int_pinterest_ads__most_recent_campaign\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_campaign", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_campaign as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by campaign_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "campaign_id"}, "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ ref('int_pinterest_ads__most_recent_pin_promotion') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id"], "unique_id": "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "resource_type": "test", "alias": "unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["int_pinterest_ads__most_recent_pin_promotion"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/schema_test/unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select count(*) as validation_errors\nfrom (\n\n    select\n        pin_promotion_id\n\n    from __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion\n    where pin_promotion_id is not null\n    group by pin_promotion_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "pin_promotion_id"}, "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "pin_promotion_id", "model": "{{ ref('int_pinterest_ads__most_recent_pin_promotion') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest", "schema_test", "not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id"], "unique_id": "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "package_name": "pinterest", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest", "path": "schema_test/not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "resource_type": "test", "alias": "not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["int_pinterest_ads__most_recent_pin_promotion"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest/models/intermediate/intermediate.yml/schema_test/not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)select count(*) as validation_errors\nfrom __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion\nwhere pin_promotion_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "sql": " __dbt__CTE__int_pinterest_ads__most_recent_pin_promotion as (\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n\n), row_num as (\n\n    select \n        *,\n        row_number() over (partition by pin_promotion_id order by _fivetran_synced desc) as rn\n    from base\n\n), filtered as (\n\n    select *\n    from row_num\n    where rn = 1\n    \n)\n\nselect *\nfrom filtered\n)"}], "relation_name": null, "column_name": "pin_promotion_id"}, "model.google_ads.google_ads__click_performance": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('click_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        campaign_id,\n        ad_group_id,\n        criteria_id,\n        gclid,\n        row_number() over (partition by gclid order by date_day) as rn\n    from base\n\n), filtered as ( -- we've heard that sometimes duplicates gclids are an issue. This dedupe ensures no glcids are double counted.\n\n    select *\n    from fields\n    where gclid is not null \n    and rn = 1\n\n)\n\nselect * from filtered", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads", "google_ads__click_performance"], "unique_id": "model.google_ads.google_ads__click_performance", "package_name": "google_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads", "path": "google_ads__click_performance.sql", "original_file_path": "models/google_ads__click_performance.sql", "name": "google_ads__click_performance", "resource_type": "model", "alias": "google_ads__click_performance", "checksum": {"name": "sha256", "checksum": "1ac18c28a1f39d4e4636b5661ebf6d652d763533522edd9cae2b0ded266bef52"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__click_performance"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.google_ads_source.stg_google_ads__click_performance"]}, "description": "Each record represents a click, with a unique Google Click ID (gclid).", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gclid": {"name": "gclid", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/google_ads.yml", "build_path": "target/compiled/google_ads/models/google_ads__click_performance.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__click_performance`\n\n), fields as (\n\n    select\n        date_day,\n        campaign_id,\n        ad_group_id,\n        criteria_id,\n        gclid,\n        row_number() over (partition by gclid order by date_day) as rn\n    from base\n\n), filtered as ( -- we've heard that sometimes duplicates gclids are an issue. This dedupe ensures no glcids are double counted.\n\n    select *\n    from fields\n    where gclid is not null \n    and rn = 1\n\n)\n\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`google_ads__click_performance`"}, "model.google_ads.google_ads__url_ad_adapter": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('final_url_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    {{ dbt_utils.group_by(15) }}\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads", "url", "google_ads__url_ad_adapter"], "unique_id": "model.google_ads.google_ads__url_ad_adapter", "package_name": "google_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads", "path": "url/google_ads__url_ad_adapter.sql", "original_file_path": "models/url/google_ads__url_ad_adapter.sql", "name": "google_ads__url_ad_adapter", "resource_type": "model", "alias": "google_ads__url_ad_adapter", "checksum": {"name": "sha256", "checksum": "06670d8b653b284ce021145e5bb740e18059a6b27f0db71d25da3123b19b417d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__final_url_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads/models/url/google_ads__url_ad_adapter.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__final_url_performance`\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`google_ads__url_ad_adapter`"}, "model.google_ads.google_ads__criteria_ad_adapter": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('criteria_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        criteria, \n        criteria_type,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    {{ dbt_utils.group_by(9) }}\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads", "criteria", "google_ads__criteria_ad_adapter"], "unique_id": "model.google_ads.google_ads__criteria_ad_adapter", "package_name": "google_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads", "path": "criteria/google_ads__criteria_ad_adapter.sql", "original_file_path": "models/criteria/google_ads__criteria_ad_adapter.sql", "name": "google_ads__criteria_ad_adapter", "resource_type": "model", "alias": "google_ads__criteria_ad_adapter", "checksum": {"name": "sha256", "checksum": "9beaea4e5ecb0c34077755163908b48fb8f89ee381daa5c4a5e68ab9a52a9aca"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__criteria_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__criteria_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads/models/criteria/google_ads__criteria_ad_adapter.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__criteria_performance`\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        criteria, \n        criteria_type,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    group by 1,2,3,4,5,6,7,8,9\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`google_ads__criteria_ad_adapter`"}, "model.linkedin_source.stg_linkedin__campaign_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__campaign_group_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__campaign_group_history_tmp')),\n                staging_columns=get_campaign_group_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        created_time as created_at,\n        name as campaign_group_name\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_group_id','last_modified_at']) }} as campaign_group_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "stg_linkedin__campaign_group_history"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_group_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "stg_linkedin__campaign_group_history.sql", "original_file_path": "models/stg_linkedin__campaign_group_history.sql", "name": "stg_linkedin__campaign_group_history", "resource_type": "model", "alias": "stg_linkedin__campaign_group_history", "checksum": {"name": "sha256", "checksum": "3e88f6e64c57280b2359b49d0d7e932e3ae856bf123bf10e60a4d6a7ecf5a3df"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__campaign_group_history_tmp"], ["stg_linkedin__campaign_group_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_campaign_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "model.linkedin_source.stg_linkedin__campaign_group_history_tmp"]}, "description": "", "columns": {"campaign_group_version_id": {"name": "campaign_group_version_id", "description": "A unique key, a combination of campaign_group_id and last_modified_at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign group belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": "target/compiled/linkedin_source/models/stg_linkedin__campaign_group_history.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history_tmp`\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    backfilled\n    \n as \n    \n    backfilled\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    run_schedule_end\n    \n as \n    \n    run_schedule_end\n    \n, \n    \n    \n    run_schedule_start\n    \n as \n    \n    run_schedule_start\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n    from base\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        created_time as created_at,\n        name as campaign_group_name\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(campaign_group_id as \n    string\n), ''), '-', coalesce(cast(last_modified_at as \n    string\n), '')) as \n    string\n))) as campaign_group_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history`"}, "model.linkedin_source.stg_linkedin__account_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__account_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as account_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['account_id','version_tag']) }} as account_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "stg_linkedin__account_history"], "unique_id": "model.linkedin_source.stg_linkedin__account_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "stg_linkedin__account_history.sql", "original_file_path": "models/stg_linkedin__account_history.sql", "name": "stg_linkedin__account_history", "resource_type": "model", "alias": "stg_linkedin__account_history", "checksum": {"name": "sha256", "checksum": "47289b364cf0c57c36e3148c7a6b35dbbea35b58c7aae107a3c0ad9de72a3df6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__account_history_tmp"], ["stg_linkedin__account_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__account_history_tmp", "model.linkedin_source.stg_linkedin__account_history_tmp"]}, "description": "", "columns": {"account_version_id": {"name": "account_version_id", "description": "A unique key, a combination of account_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": "target/compiled/linkedin_source/models/stg_linkedin__account_history.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history_tmp`\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notified_on_campaign_optimization\n    \n as \n    \n    notified_on_campaign_optimization\n    \n, \n    \n    \n    notified_on_creative_approval\n    \n as \n    \n    notified_on_creative_approval\n    \n, \n    \n    \n    notified_on_creative_rejection\n    \n as \n    \n    notified_on_creative_rejection\n    \n, \n    \n    \n    notified_on_end_of_campaign\n    \n as \n    \n    notified_on_end_of_campaign\n    \n, \n    \n    \n    reference\n    \n as \n    \n    reference\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_budget_amount\n    \n as \n    \n    total_budget_amount\n    \n, \n    \n    \n    total_budget_currency_code\n    \n as \n    \n    total_budget_currency_code\n    \n, \n    \n    \n    total_budget_ends_at\n    \n as \n    \n    total_budget_ends_at\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    version_tag\n    \n as \n    \n    version_tag\n    \n\n\n\n    from base\n\n), fields as (\n\n    select \n        id as account_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(account_id as \n    string\n), ''), '-', coalesce(cast(version_tag as \n    string\n), '')) as \n    string\n))) as account_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history`"}, "model.linkedin_source.stg_linkedin__ad_analytics_by_creative": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__ad_analytics_by_creative_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__ad_analytics_by_creative_tmp')),\n                staging_columns=get_ad_analytics_by_creative_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        creative_id,\n        day as date_day,\n        clicks, \n        impressions,\n        {% if var('linkedin__use_local_currency') %}\n        cost_in_local_currency as cost\n        {% else %}\n        cost_in_usd as cost\n        {% endif %}\n    from macro\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','creative_id']) }} as daily_creative_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "stg_linkedin__ad_analytics_by_creative"], "unique_id": "model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "stg_linkedin__ad_analytics_by_creative.sql", "original_file_path": "models/stg_linkedin__ad_analytics_by_creative.sql", "name": "stg_linkedin__ad_analytics_by_creative", "resource_type": "model", "alias": "stg_linkedin__ad_analytics_by_creative", "checksum": {"name": "sha256", "checksum": "7c9fa54e76fcd8c0bc3dbd15f20e976882ee0876f96215b9dd1c91c9a39068b9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative_tmp"], ["stg_linkedin__ad_analytics_by_creative_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_ad_analytics_by_creative_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp"]}, "description": "", "columns": {"daily_creative_id": {"name": "daily_creative_id", "description": "A unique key, a combination of creative_id and date_day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": "target/compiled/linkedin_source/models/stg_linkedin__ad_analytics_by_creative.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__ad_analytics_by_creative_tmp`\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    action_clicks\n    \n as \n    \n    action_clicks\n    \n, \n    \n    \n    ad_unit_clicks\n    \n as \n    \n    ad_unit_clicks\n    \n, \n    \n    \n    approximate_unique_impressions\n    \n as \n    \n    approximate_unique_impressions\n    \n, \n    \n    \n    card_clicks\n    \n as \n    \n    card_clicks\n    \n, \n    \n    \n    card_impressions\n    \n as \n    \n    card_impressions\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    comment_likes\n    \n as \n    \n    comment_likes\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    cast(null as \n    int64\n) as \n    \n    comments_likes\n    \n , \n    \n    \n    company_page_clicks\n    \n as \n    \n    company_page_clicks\n    \n, \n    \n    \n    conversion_value_in_local_currency\n    \n as \n    \n    conversion_value_in_local_currency\n    \n, \n    \n    \n    cost_in_local_currency\n    \n as \n    \n    cost_in_local_currency\n    \n, \n    \n    \n    cost_in_usd\n    \n as \n    \n    cost_in_usd\n    \n, \n    \n    \n    creative_id\n    \n as \n    \n    creative_id\n    \n, \n    \n    \n    day\n    \n as \n    \n    day\n    \n, \n    \n    \n    external_website_conversions\n    \n as \n    \n    external_website_conversions\n    \n, \n    \n    \n    external_website_post_click_conversions\n    \n as \n    \n    external_website_post_click_conversions\n    \n, \n    \n    \n    external_website_post_view_conversions\n    \n as \n    \n    external_website_post_view_conversions\n    \n, \n    \n    \n    follows\n    \n as \n    \n    follows\n    \n, \n    \n    \n    full_screen_plays\n    \n as \n    \n    full_screen_plays\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    landing_page_clicks\n    \n as \n    \n    landing_page_clicks\n    \n, \n    \n    \n    lead_generation_mail_contact_info_shares\n    \n as \n    \n    lead_generation_mail_contact_info_shares\n    \n, \n    \n    \n    lead_generation_mail_interested_clicks\n    \n as \n    \n    lead_generation_mail_interested_clicks\n    \n, \n    \n    \n    likes\n    \n as \n    \n    likes\n    \n, \n    \n    \n    one_click_lead_form_opens\n    \n as \n    \n    one_click_lead_form_opens\n    \n, \n    \n    \n    one_click_leads\n    \n as \n    \n    one_click_leads\n    \n, \n    \n    \n    opens\n    \n as \n    \n    opens\n    \n, \n    \n    \n    other_engagements\n    \n as \n    \n    other_engagements\n    \n, \n    \n    \n    shares\n    \n as \n    \n    shares\n    \n, \n    \n    \n    text_url_clicks\n    \n as \n    \n    text_url_clicks\n    \n, \n    \n    \n    total_engagements\n    \n as \n    \n    total_engagements\n    \n, \n    \n    \n    video_completions\n    \n as \n    \n    video_completions\n    \n, \n    \n    \n    video_first_quartile_completions\n    \n as \n    \n    video_first_quartile_completions\n    \n, \n    \n    \n    video_midpoint_completions\n    \n as \n    \n    video_midpoint_completions\n    \n, \n    \n    \n    video_starts\n    \n as \n    \n    video_starts\n    \n, \n    \n    \n    video_third_quartile_completions\n    \n as \n    \n    video_third_quartile_completions\n    \n, \n    \n    \n    video_views\n    \n as \n    \n    video_views\n    \n, \n    \n    \n    viral_card_clicks\n    \n as \n    \n    viral_card_clicks\n    \n, \n    \n    \n    viral_card_impressions\n    \n as \n    \n    viral_card_impressions\n    \n, \n    \n    \n    viral_clicks\n    \n as \n    \n    viral_clicks\n    \n, \n    \n    \n    viral_comment_likes\n    \n as \n    \n    viral_comment_likes\n    \n, \n    \n    \n    viral_comments\n    \n as \n    \n    viral_comments\n    \n, \n    \n    \n    viral_company_page_clicks\n    \n as \n    \n    viral_company_page_clicks\n    \n, \n    \n    \n    viral_external_website_conversions\n    \n as \n    \n    viral_external_website_conversions\n    \n, \n    \n    \n    viral_external_website_post_click_conversions\n    \n as \n    \n    viral_external_website_post_click_conversions\n    \n, \n    \n    \n    viral_external_website_post_view_conversions\n    \n as \n    \n    viral_external_website_post_view_conversions\n    \n, \n    cast(null as \n    int64\n) as \n    \n    viral_extrernal_website_conversions\n    \n , \n    cast(null as \n    int64\n) as \n    \n    viral_extrernal_website_post_click_conversions\n    \n , \n    cast(null as \n    int64\n) as \n    \n    viral_extrernal_website_post_view_conversions\n    \n , \n    \n    \n    viral_follows\n    \n as \n    \n    viral_follows\n    \n, \n    \n    \n    viral_full_screen_plays\n    \n as \n    \n    viral_full_screen_plays\n    \n, \n    \n    \n    viral_impressions\n    \n as \n    \n    viral_impressions\n    \n, \n    \n    \n    viral_landing_page_clicks\n    \n as \n    \n    viral_landing_page_clicks\n    \n, \n    \n    \n    viral_likes\n    \n as \n    \n    viral_likes\n    \n, \n    \n    \n    viral_one_click_lead_form_opens\n    \n as \n    \n    viral_one_click_lead_form_opens\n    \n, \n    \n    \n    viral_one_click_leads\n    \n as \n    \n    viral_one_click_leads\n    \n, \n    \n    \n    viral_other_engagements\n    \n as \n    \n    viral_other_engagements\n    \n, \n    \n    \n    viral_shares\n    \n as \n    \n    viral_shares\n    \n, \n    \n    \n    viral_total_engagements\n    \n as \n    \n    viral_total_engagements\n    \n, \n    \n    \n    viral_video_completions\n    \n as \n    \n    viral_video_completions\n    \n, \n    \n    \n    viral_video_first_quartile_completions\n    \n as \n    \n    viral_video_first_quartile_completions\n    \n, \n    \n    \n    viral_video_midpoint_completions\n    \n as \n    \n    viral_video_midpoint_completions\n    \n, \n    \n    \n    viral_video_starts\n    \n as \n    \n    viral_video_starts\n    \n, \n    \n    \n    viral_video_third_quartile_completions\n    \n as \n    \n    viral_video_third_quartile_completions\n    \n, \n    \n    \n    viral_video_views\n    \n as \n    \n    viral_video_views\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        creative_id,\n        day as date_day,\n        clicks, \n        impressions,\n        \n        cost_in_local_currency as cost\n        \n    from macro\n\n), surrogate_key as (\n\n    select\n        *,\n        to_hex(md5(cast(concat(coalesce(cast(date_day as \n    string\n), ''), '-', coalesce(cast(creative_id as \n    string\n), '')) as \n    string\n))) as daily_creative_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__ad_analytics_by_creative`"}, "model.linkedin_source.stg_linkedin__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__campaign_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        campaign_group_id,\n        created_time as created_at,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','version_tag']) }} as campaign_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "stg_linkedin__campaign_history"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "stg_linkedin__campaign_history.sql", "original_file_path": "models/stg_linkedin__campaign_history.sql", "name": "stg_linkedin__campaign_history", "resource_type": "model", "alias": "stg_linkedin__campaign_history", "checksum": {"name": "sha256", "checksum": "eed133513eebb453786e95474020e8c843724fb71b9e5a6aa77e526a641f720c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__campaign_history_tmp"], ["stg_linkedin__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history_tmp", "model.linkedin_source.stg_linkedin__campaign_history_tmp"]}, "description": "", "columns": {"campaign_version_id": {"name": "campaign_version_id", "description": "A unique key, a combination of campaign_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "The ID of the campaign group the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": "target/compiled/linkedin_source/models/stg_linkedin__campaign_history.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history_tmp`\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    associated_entity\n    \n as \n    \n    associated_entity\n    \n, \n    \n    \n    audience_expansion_enabled\n    \n as \n    \n    audience_expansion_enabled\n    \n, \n    \n    \n    campaign_group_id\n    \n as \n    \n    campaign_group_id\n    \n, \n    \n    \n    cost_type\n    \n as \n    \n    cost_type\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    creative_selection\n    \n as \n    \n    creative_selection\n    \n, \n    \n    \n    daily_budget_amount\n    \n as \n    \n    daily_budget_amount\n    \n, \n    \n    \n    daily_budget_currency_code\n    \n as \n    \n    daily_budget_currency_code\n    \n, \n    \n    \n    format\n    \n as \n    \n    format\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    locale_country\n    \n as \n    \n    locale_country\n    \n, \n    \n    \n    locale_language\n    \n as \n    \n    locale_language\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    objective_type\n    \n as \n    \n    objective_type\n    \n, \n    \n    \n    offsite_delivery_enabled\n    \n as \n    \n    offsite_delivery_enabled\n    \n, \n    \n    \n    optimization_target_type\n    \n as \n    \n    optimization_target_type\n    \n, \n    \n    \n    run_schedule_end\n    \n as \n    \n    run_schedule_end\n    \n, \n    \n    \n    run_schedule_start\n    \n as \n    \n    run_schedule_start\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_cost_amount\n    \n as \n    \n    unit_cost_amount\n    \n, \n    \n    \n    unit_cost_currency_code\n    \n as \n    \n    unit_cost_currency_code\n    \n, \n    \n    \n    version_tag\n    \n as \n    \n    version_tag\n    \n\n\n\n    from base\n\n), fields as (\n\n    select \n        id as campaign_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        campaign_group_id,\n        created_time as created_at,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(campaign_id as \n    string\n), ''), '-', coalesce(cast(version_tag as \n    string\n), '')) as \n    string\n))) as campaign_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history`"}, "model.linkedin_source.stg_linkedin__creative_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__creative_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        id as creative_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        campaign_id,\n        type as creative_type,\n        cast(version_tag as numeric) as version_tag,\n        status as creative_status,\n        click_uri\n    from macro\n\n), url_fields as (\n\n    select \n        *,\n        {{ dbt_utils.split_part('click_uri', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('click_uri') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('click_uri') }} as url_path,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_term') }} as utm_term\n    from fields\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\n    from url_fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['creative_id','version_tag']) }} as creative_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "stg_linkedin__creative_history"], "unique_id": "model.linkedin_source.stg_linkedin__creative_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "stg_linkedin__creative_history.sql", "original_file_path": "models/stg_linkedin__creative_history.sql", "name": "stg_linkedin__creative_history", "resource_type": "model", "alias": "stg_linkedin__creative_history", "checksum": {"name": "sha256", "checksum": "a637fb0eb85e160ee0c7c1a8348ba82aaca98687277a54cf33f33cca42e92f91"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__creative_history_tmp"], ["stg_linkedin__creative_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history_tmp", "model.linkedin_source.stg_linkedin__creative_history_tmp"]}, "description": "", "columns": {"creative_version_id": {"name": "creative_version_id", "description": "A unique key, a combination of creative_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign the creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_status": {"name": "creative_status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": "target/compiled/linkedin_source/models/stg_linkedin__creative_history.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history_tmp`\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    call_to_action_label_type\n    \n as \n    \n    call_to_action_label_type\n    \n, \n    \n    \n    call_to_action_target\n    \n as \n    \n    call_to_action_target\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    click_uri\n    \n as \n    \n    click_uri\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    follow_company_call_to_action\n    \n as \n    \n    follow_company_call_to_action\n    \n, \n    \n    \n    follow_company_organization_logo\n    \n as \n    \n    follow_company_organization_logo\n    \n, \n    \n    \n    follow_company_organization_name\n    \n as \n    \n    follow_company_organization_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    jobs_company_name\n    \n as \n    \n    jobs_company_name\n    \n, \n    \n    \n    jobs_logo\n    \n as \n    \n    jobs_logo\n    \n, \n    \n    \n    jobs_organization\n    \n as \n    \n    jobs_organization\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    reference\n    \n as \n    \n    reference\n    \n, \n    \n    \n    review_status\n    \n as \n    \n    review_status\n    \n, \n    \n    \n    sponsored_in_mail_content\n    \n as \n    \n    sponsored_in_mail_content\n    \n, \n    \n    \n    sponsored_update_activity\n    \n as \n    \n    sponsored_update_activity\n    \n, \n    \n    \n    sponsored_update_carousel_activity\n    \n as \n    \n    sponsored_update_carousel_activity\n    \n, \n    \n    \n    sponsored_update_carousel_direct_sponsored_content\n    \n as \n    \n    sponsored_update_carousel_direct_sponsored_content\n    \n, \n    \n    \n    sponsored_update_carousel_share\n    \n as \n    \n    sponsored_update_carousel_share\n    \n, \n    \n    \n    sponsored_update_carousel_share_content_description\n    \n as \n    \n    sponsored_update_carousel_share_content_description\n    \n, \n    \n    \n    sponsored_update_carousel_share_content_share_media_category\n    \n as \n    \n    sponsored_update_carousel_share_content_share_media_category\n    \n, \n    \n    \n    sponsored_update_carousel_share_content_title\n    \n as \n    \n    sponsored_update_carousel_share_content_title\n    \n, \n    \n    \n    sponsored_update_carousel_share_subject\n    \n as \n    \n    sponsored_update_carousel_share_subject\n    \n, \n    \n    \n    sponsored_update_direct_sponsored_content\n    \n as \n    \n    sponsored_update_direct_sponsored_content\n    \n, \n    \n    \n    sponsored_update_share\n    \n as \n    \n    sponsored_update_share\n    \n, \n    \n    \n    sponsored_update_share_content_description\n    \n as \n    \n    sponsored_update_share_content_description\n    \n, \n    \n    \n    sponsored_update_share_content_share_media_category\n    \n as \n    \n    sponsored_update_share_content_share_media_category\n    \n, \n    \n    \n    sponsored_update_share_content_title\n    \n as \n    \n    sponsored_update_share_content_title\n    \n, \n    \n    \n    sponsored_update_share_subject\n    \n as \n    \n    sponsored_update_share_subject\n    \n, \n    \n    \n    sponsored_video_media_asset\n    \n as \n    \n    sponsored_video_media_asset\n    \n, \n    \n    \n    sponsored_video_user_generated_content_post\n    \n as \n    \n    sponsored_video_user_generated_content_post\n    \n, \n    \n    \n    spotlight_call_to_action\n    \n as \n    \n    spotlight_call_to_action\n    \n, \n    \n    \n    spotlight_custom_background\n    \n as \n    \n    spotlight_custom_background\n    \n, \n    \n    \n    spotlight_description\n    \n as \n    \n    spotlight_description\n    \n, \n    \n    \n    spotlight_forum_name\n    \n as \n    \n    spotlight_forum_name\n    \n, \n    \n    \n    spotlight_headline\n    \n as \n    \n    spotlight_headline\n    \n, \n    \n    \n    spotlight_logo\n    \n as \n    \n    spotlight_logo\n    \n, \n    \n    \n    spotlight_show_member_profile_photo\n    \n as \n    \n    spotlight_show_member_profile_photo\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    text_ad_text\n    \n as \n    \n    text_ad_text\n    \n, \n    \n    \n    text_ad_title\n    \n as \n    \n    text_ad_title\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    version_tag\n    \n as \n    \n    version_tag\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        id as creative_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        campaign_id,\n        type as creative_type,\n        cast(version_tag as numeric) as version_tag,\n        status as creative_status,\n        click_uri\n    from macro\n\n), url_fields as (\n\n    select \n        *,\n        \n\n    split(\n        click_uri,\n        '?'\n        )[safe_offset(0)]\n\n as base_url,\n        \n    safe_cast(\n\n    split(\n        \n\n    split(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n\n,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        click_uri,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_path,\n        nullif(\n\n    split(\n        \n\n    split(\n        click_uri,\n        'utm_source='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_source,\n        nullif(\n\n    split(\n        \n\n    split(\n        click_uri,\n        'utm_medium='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_medium,\n        nullif(\n\n    split(\n        \n\n    split(\n        click_uri,\n        'utm_campaign='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_campaign,\n        nullif(\n\n    split(\n        \n\n    split(\n        click_uri,\n        'utm_content='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_content,\n        nullif(\n\n    split(\n        \n\n    split(\n        click_uri,\n        'utm_term='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_term\n    from fields\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\n    from url_fields\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(creative_id as \n    string\n), ''), '-', coalesce(cast(version_tag as \n    string\n), '')) as \n    string\n))) as creative_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history`"}, "model.linkedin_source.stg_linkedin__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__campaign_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__campaign_history_tmp.sql", "name": "stg_linkedin__campaign_history_tmp", "resource_type": "model", "alias": "stg_linkedin__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin_campaign_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_campaign_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__campaign_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`linkedin_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history_tmp`"}, "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp": {"raw_sql": "select *\nfrom {{ var('ad_analytics_by_creative') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__ad_analytics_by_creative_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "name": "stg_linkedin__ad_analytics_by_creative_tmp", "resource_type": "model", "alias": "stg_linkedin__ad_analytics_by_creative_tmp", "checksum": {"name": "sha256", "checksum": "149662e300437302314d44f3ca4038be5caea5292080f81b8d4f928ad30a8e26"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin_ad_analytics_by_creative_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`linkedin_ad_analytics_by_creative_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__ad_analytics_by_creative_tmp`"}, "model.linkedin_source.stg_linkedin__account_history_tmp": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__account_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__account_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__account_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__account_history_tmp.sql", "name": "stg_linkedin__account_history_tmp", "resource_type": "model", "alias": "stg_linkedin__account_history_tmp", "checksum": {"name": "sha256", "checksum": "507b2d73a5d179ae1e5f4a45315c44a57983481cd15fe8835f7ec23d67407325"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin_account_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_account_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__account_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`linkedin_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history_tmp`"}, "model.linkedin_source.stg_linkedin__campaign_group_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_group_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__campaign_group_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__campaign_group_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__campaign_group_history_tmp.sql", "name": "stg_linkedin__campaign_group_history_tmp", "resource_type": "model", "alias": "stg_linkedin__campaign_group_history_tmp", "checksum": {"name": "sha256", "checksum": "5c8d7b73b2d6858e838ae8c60f86ad34518ec7a09197352cf36ae8dc3702cef4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin_campaign_group_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__campaign_group_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`linkedin_campaign_group_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history_tmp`"}, "model.linkedin_source.stg_linkedin__creative_history_tmp": {"raw_sql": "select *\nfrom {{ var('creative_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__creative_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__creative_history_tmp", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__creative_history_tmp.sql", "name": "stg_linkedin__creative_history_tmp", "resource_type": "model", "alias": "stg_linkedin__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "0a9c48b8a93c4db4b87927959573fea6c2cb654b2c30967379d4e3682479c3b8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin_creative_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.linkedin_creative_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/tmp/stg_linkedin__creative_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`linkedin_creative_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history_tmp`"}, "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "daily_creative_id", "model": "{{ ref('stg_linkedin__ad_analytics_by_creative') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "resource_type": "test", "alias": "unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__ad_analytics_by_creative"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        daily_creative_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__ad_analytics_by_creative`\n    where daily_creative_id is not null\n    group by daily_creative_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id"}, "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "daily_creative_id", "model": "{{ ref('stg_linkedin__ad_analytics_by_creative') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "resource_type": "test", "alias": "not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__ad_analytics_by_creative"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__ad_analytics_by_creative`\nwhere daily_creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id"}, "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ ref('stg_linkedin__ad_analytics_by_creative') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__ad_analytics_by_creative_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__ad_analytics_by_creative_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__ad_analytics_by_creative_creative_id", "resource_type": "test", "alias": "not_null_stg_linkedin__ad_analytics_by_creative_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__ad_analytics_by_creative"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__ad_analytics_by_creative_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__ad_analytics_by_creative`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id"}, "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "creative_version_id", "model": "{{ ref('stg_linkedin__creative_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "unique_stg_linkedin__creative_history_creative_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/unique_stg_linkedin__creative_history_creative_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__creative_history_creative_version_id", "resource_type": "test", "alias": "unique_stg_linkedin__creative_history_creative_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__creative_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/unique_stg_linkedin__creative_history_creative_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        creative_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history`\n    where creative_version_id is not null\n    group by creative_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_version_id"}, "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "creative_version_id", "model": "{{ ref('stg_linkedin__creative_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__creative_history_creative_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__creative_history_creative_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__creative_history_creative_version_id", "resource_type": "test", "alias": "not_null_stg_linkedin__creative_history_creative_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__creative_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__creative_history_creative_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history`\nwhere creative_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_version_id"}, "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ ref('stg_linkedin__creative_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__creative_history_creative_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__creative_history_creative_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__creative_history_creative_id", "resource_type": "test", "alias": "not_null_stg_linkedin__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__creative_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__creative_history_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id"}, "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ ref('stg_linkedin__creative_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__creative_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__creative_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__creative_history_valid_from", "resource_type": "test", "alias": "not_null_stg_linkedin__creative_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__creative_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__creative_history_valid_from.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history`\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from"}, "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_version_id", "model": "{{ ref('stg_linkedin__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "unique_stg_linkedin__campaign_history_campaign_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/unique_stg_linkedin__campaign_history_campaign_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__campaign_history_campaign_version_id", "resource_type": "test", "alias": "unique_stg_linkedin__campaign_history_campaign_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/unique_stg_linkedin__campaign_history_campaign_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history`\n    where campaign_version_id is not null\n    group by campaign_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id"}, "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_version_id", "model": "{{ ref('stg_linkedin__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__campaign_history_campaign_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__campaign_history_campaign_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_history_campaign_version_id", "resource_type": "test", "alias": "not_null_stg_linkedin__campaign_history_campaign_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__campaign_history_campaign_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history`\nwhere campaign_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_version_id"}, "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('stg_linkedin__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__campaign_history_campaign_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__campaign_history_campaign_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_history_campaign_id", "resource_type": "test", "alias": "not_null_stg_linkedin__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__campaign_history_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id"}, "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ ref('stg_linkedin__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__campaign_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__campaign_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_history_valid_from", "resource_type": "test", "alias": "not_null_stg_linkedin__campaign_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__campaign_history_valid_from.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history`\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from"}, "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_group_version_id", "model": "{{ ref('stg_linkedin__campaign_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "unique_stg_linkedin__campaign_group_history_campaign_group_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/unique_stg_linkedin__campaign_group_history_campaign_group_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__campaign_group_history_campaign_group_version_id", "resource_type": "test", "alias": "unique_stg_linkedin__campaign_group_history_campaign_group_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/unique_stg_linkedin__campaign_group_history_campaign_group_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_group_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history`\n    where campaign_group_version_id is not null\n    group by campaign_group_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_version_id"}, "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_group_version_id", "model": "{{ ref('stg_linkedin__campaign_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__campaign_group_history_campaign_group_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__campaign_group_history_campaign_group_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_group_history_campaign_group_version_id", "resource_type": "test", "alias": "not_null_stg_linkedin__campaign_group_history_campaign_group_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__campaign_group_history_campaign_group_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history`\nwhere campaign_group_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_version_id"}, "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_group_id", "model": "{{ ref('stg_linkedin__campaign_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__campaign_group_history_campaign_group_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__campaign_group_history_campaign_group_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_group_history_campaign_group_id", "resource_type": "test", "alias": "not_null_stg_linkedin__campaign_group_history_campaign_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__campaign_group_history_campaign_group_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history`\nwhere campaign_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_group_id"}, "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ ref('stg_linkedin__campaign_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__campaign_group_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__campaign_group_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__campaign_group_history_valid_from", "resource_type": "test", "alias": "not_null_stg_linkedin__campaign_group_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__campaign_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__campaign_group_history_valid_from.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history`\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from"}, "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "account_version_id", "model": "{{ ref('stg_linkedin__account_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "unique_stg_linkedin__account_history_account_version_id"], "unique_id": "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/unique_stg_linkedin__account_history_account_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "unique_stg_linkedin__account_history_account_version_id", "resource_type": "test", "alias": "unique_stg_linkedin__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/unique_stg_linkedin__account_history_account_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        account_version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history`\n    where account_version_id is not null\n    group by account_version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id"}, "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "account_version_id", "model": "{{ ref('stg_linkedin__account_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__account_history_account_version_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__account_history_account_version_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__account_history_account_version_id", "resource_type": "test", "alias": "not_null_stg_linkedin__account_history_account_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__account_history_account_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history`\nwhere account_version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_version_id"}, "test.linkedin_source.not_null_stg_linkedin__account_history_account_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ ref('stg_linkedin__account_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__account_history_account_id"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__account_history_account_id", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__account_history_account_id.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__account_history_account_id", "resource_type": "test", "alias": "not_null_stg_linkedin__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__account_history_account_id.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ ref('stg_linkedin__account_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin_source", "schema_test", "not_null_stg_linkedin__account_history_valid_from"], "unique_id": "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "schema_test/not_null_stg_linkedin__account_history_valid_from.sql", "original_file_path": "models/stg_linkedin.yml", "name": "not_null_stg_linkedin__account_history_valid_from", "resource_type": "test", "alias": "not_null_stg_linkedin__account_history_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_linkedin__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin_source.stg_linkedin__account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin_source/models/stg_linkedin.yml/schema_test/not_null_stg_linkedin__account_history_valid_from.sql", "deferred": false, "unrendered_config": {"materialized": "view", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history`\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "valid_from"}, "model.facebook_ads.facebook_ads__ad_adapter": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), creatives as (\n\n    select *\n    from {{ ref('facebook_ads__creative_history_prep') }}\n\n), accounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), ad_sets as (\n\n    select *\n    from {{ var('ad_set_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads \n        on cast(report.ad_id as {{ dbt_utils.type_bigint() }}) = cast(ads.ad_id as {{ dbt_utils.type_bigint() }})\n    left join creatives\n        on cast(ads.creative_id as {{ dbt_utils.type_bigint() }}) = cast(creatives.creative_id as {{ dbt_utils.type_bigint() }})\n    left join ad_sets\n        on cast(ads.ad_set_id as {{ dbt_utils.type_bigint() }}) = cast(ad_sets.ad_set_id as {{ dbt_utils.type_bigint() }})\n    left join campaigns\n        on cast(ads.campaign_id as {{ dbt_utils.type_bigint() }}) = cast(campaigns.campaign_id as {{ dbt_utils.type_bigint() }})\n    left join accounts\n        on cast(report.account_id as {{ dbt_utils.type_bigint() }}) = cast(accounts.account_id as {{ dbt_utils.type_bigint() }})\n    {{ dbt_utils.group_by(19) }}\n\n\n)\n\nselect *\nfrom joined", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads", "facebook_ads__ad_adapter"], "unique_id": "model.facebook_ads.facebook_ads__ad_adapter", "package_name": "facebook_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads", "path": "facebook_ads__ad_adapter.sql", "original_file_path": "models/facebook_ads__ad_adapter.sql", "name": "facebook_ads__ad_adapter", "resource_type": "model", "alias": "facebook_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "c05e82c67c92164b2aae820c38e94d7a0dbc747c46200db0414f9e6cbfae2f50"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["facebook_ads__creative_history_prep"], ["stg_facebook_ads__account_history"], ["stg_facebook_ads__ad_history"], ["stg_facebook_ads__ad_set_history"], ["stg_facebook_ads__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads.facebook_ads__creative_history_prep", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "description": "Each record represents the daily performance of a Facebook ad at the URL level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "The name of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": "target/compiled/facebook_ads/models/facebook_ads__ad_adapter.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__basic_ad`\n\n), creatives as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__creative_history_prep`\n\n), accounts as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__account_history`\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_history`\n    where is_most_recent_record = true\n\n), ad_sets as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_set_history`\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__campaign_history`\n    where is_most_recent_record = true\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads \n        on cast(report.ad_id as \n    int64\n) = cast(ads.ad_id as \n    int64\n)\n    left join creatives\n        on cast(ads.creative_id as \n    int64\n) = cast(creatives.creative_id as \n    int64\n)\n    left join ad_sets\n        on cast(ads.ad_set_id as \n    int64\n) = cast(ad_sets.ad_set_id as \n    int64\n)\n    left join campaigns\n        on cast(ads.campaign_id as \n    int64\n) = cast(campaigns.campaign_id as \n    int64\n)\n    left join accounts\n        on cast(report.account_id as \n    int64\n) = cast(accounts.account_id as \n    int64\n)\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__ad_adapter`"}, "model.facebook_ads.facebook_ads__campaign_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads", "facebook_ads__campaign_report"], "unique_id": "model.facebook_ads.facebook_ads__campaign_report", "package_name": "facebook_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads", "path": "facebook_ads__campaign_report.sql", "original_file_path": "models/facebook_ads__campaign_report.sql", "name": "facebook_ads__campaign_report", "resource_type": "model", "alias": "facebook_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "b28376174ed927010e23da45bb78c471301958da7c791688a01fa9463dc8322f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "Each record represents the daily performance of a Facebook campaign.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": "target/compiled/facebook_ads/models/facebook_ads__campaign_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__campaign_report`"}, "model.facebook_ads.facebook_ads__account_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads", "facebook_ads__account_report"], "unique_id": "model.facebook_ads.facebook_ads__account_report", "package_name": "facebook_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads", "path": "facebook_ads__account_report.sql", "original_file_path": "models/facebook_ads__account_report.sql", "name": "facebook_ads__account_report", "resource_type": "model", "alias": "facebook_ads__account_report", "checksum": {"name": "sha256", "checksum": "e5408441b95d4c2e24bcc42d1593abc8d6ca78fd0d1025c3a80b9ec2c5327b3d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "Each record represents the daily performance of a Facebook account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": "target/compiled/facebook_ads/models/facebook_ads__account_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__account_report`"}, "model.facebook_ads.facebook_ads__ad_set_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_set_id,\n        ad_set_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads", "facebook_ads__ad_set_report"], "unique_id": "model.facebook_ads.facebook_ads__ad_set_report", "package_name": "facebook_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads", "path": "facebook_ads__ad_set_report.sql", "original_file_path": "models/facebook_ads__ad_set_report.sql", "name": "facebook_ads__ad_set_report", "resource_type": "model", "alias": "facebook_ads__ad_set_report", "checksum": {"name": "sha256", "checksum": "78e9c00573145c6e150285505b125a89df26296d2d301d55cb68b22a87fa9092"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "Each record represents the daily performance of a Facebook ad set.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": "target/compiled/facebook_ads/models/facebook_ads__ad_set_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_set_id,\n        ad_set_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__ad_set_report`"}, "model.facebook_ads.facebook_ads__creative_history_prep": {"raw_sql": "{% set url_field = \"coalesce(page_link,template_page_link)\" %}\n\nwith base as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from {{ var('url_tag') }}\n\n), url_tags_pivoted as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        min(case when key = 'utm_source' then value end) as utm_source,\n        min(case when key = 'utm_medium' then value end) as utm_medium,\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\n        min(case when key = 'utm_content' then value end) as utm_content,\n        min(case when key = 'utm_term' then value end) as utm_term\n    from url_tags\n    group by 1,2\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        account_id,\n        creative_name,\n        {{ url_field }} as url,\n        {{ dbt_utils.split_part(url_field, \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host(url_field) }} as url_host,\n        '/' || {{ dbt_utils.get_url_path(url_field) }} as url_path,\n        coalesce(url_tags_pivoted.utm_source, {{ dbt_utils.get_url_parameter(url_field, 'utm_source') }}) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, {{ dbt_utils.get_url_parameter(url_field, 'utm_medium') }}) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, {{ dbt_utils.get_url_parameter(url_field, 'utm_campaign') }}) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, {{ dbt_utils.get_url_parameter(url_field, 'utm_content') }}) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, {{ dbt_utils.get_url_parameter(url_field, 'utm_term') }}) as utm_term\n    from base\n    left join url_tags_pivoted\n        using (_fivetran_id, creative_id)\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads", "intermediate", "facebook_ads__creative_history_prep"], "unique_id": "model.facebook_ads.facebook_ads__creative_history_prep", "package_name": "facebook_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads", "path": "intermediate/facebook_ads__creative_history_prep.sql", "original_file_path": "models/intermediate/facebook_ads__creative_history_prep.sql", "name": "facebook_ads__creative_history_prep", "resource_type": "model", "alias": "facebook_ads__creative_history_prep", "checksum": {"name": "sha256", "checksum": "62de9cd1fe2d606faa77dd9e5c8bdcf911f44172876ac4e2faf83d58a38ce5f4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["stg_facebook_ads__url_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads_creative_history.stg_facebook_ads__url_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads/models/intermediate/facebook_ads__creative_history_prep.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history`\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__url_tag`\n\n), url_tags_pivoted as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        min(case when key = 'utm_source' then value end) as utm_source,\n        min(case when key = 'utm_medium' then value end) as utm_medium,\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\n        min(case when key = 'utm_content' then value end) as utm_content,\n        min(case when key = 'utm_term' then value end) as utm_term\n    from url_tags\n    group by 1,2\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        account_id,\n        creative_name,\n        coalesce(page_link,template_page_link) as url,\n        \n\n    split(\n        coalesce(page_link,template_page_link),\n        '?'\n        )[safe_offset(0)]\n\n as base_url,\n        \n    safe_cast(\n\n    split(\n        \n\n    split(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n\n,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        coalesce(page_link,template_page_link),\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_path,\n        coalesce(url_tags_pivoted.utm_source, nullif(\n\n    split(\n        \n\n    split(\n        coalesce(page_link,template_page_link),\n        'utm_source='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'')) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, nullif(\n\n    split(\n        \n\n    split(\n        coalesce(page_link,template_page_link),\n        'utm_medium='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'')) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, nullif(\n\n    split(\n        \n\n    split(\n        coalesce(page_link,template_page_link),\n        'utm_campaign='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'')) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, nullif(\n\n    split(\n        \n\n    split(\n        coalesce(page_link,template_page_link),\n        'utm_content='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'')) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, nullif(\n\n    split(\n        \n\n    split(\n        coalesce(page_link,template_page_link),\n        'utm_term='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'')) as utm_term\n    from base\n    left join url_tags_pivoted\n        using (_fivetran_id, creative_id)\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__creative_history_prep`"}, "model.google_ads_source.stg_google_ads__final_url_performance": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_google_ads__final_url_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__final_url_performance_tmp')),\n                staging_columns=get_final_url_performance_columns()\n            )\n        }}\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        {{ dbt_utils.split_part('final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('final_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_term') }} as utm_term\n    from renamed\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','campaign_id','ad_group_id','final_url']) }} as final_url_performance_id\n    from url_fields\n\n)\n\nselect * from surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "stg_google_ads__final_url_performance"], "unique_id": "model.google_ads_source.stg_google_ads__final_url_performance", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "stg_google_ads__final_url_performance.sql", "original_file_path": "models/stg_google_ads__final_url_performance.sql", "name": "stg_google_ads__final_url_performance", "resource_type": "model", "alias": "stg_google_ads__final_url_performance", "checksum": {"name": "sha256", "checksum": "c7bcb352042009de5bdbf24781f0c9f9505d5a3f47c3b74b6bb980ff58defdc8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__final_url_performance_tmp"], ["stg_google_ads__final_url_performance_tmp"]], "sources": [], "depends_on": {"macros": ["macro.google_ads_source.get_final_url_performance_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance_tmp", "model.google_ads_source.stg_google_ads__final_url_performance_tmp"]}, "description": "Each record represents the performance of a final url at the ad group level.", "columns": {"final_url_performance_id": {"name": "final_url_performance_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "Effective final URL of the impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_google_ads.yml", "build_path": "target/compiled/google_ads_source/models/stg_google_ads__final_url_performance.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__final_url_performance_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_descriptive_name\n    \n as account_name , \n    \n    \n    ad_group_id\n    \n as \n    \n    ad_group_id\n    \n, \n    \n    \n    ad_group_name\n    \n as \n    \n    ad_group_name\n    \n, \n    \n    \n    ad_group_status\n    \n as \n    \n    ad_group_status\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    campaign_name\n    \n as \n    \n    campaign_name\n    \n, \n    \n    \n    campaign_status\n    \n as \n    \n    campaign_status\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    cost\n    \n as spend , \n    \n    \n    date\n    \n as date_day , \n    \n    \n    effective_final_url\n    \n as final_url , \n    \n    \n    external_customer_id\n    \n as \n    \n    external_customer_id\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n\n\n\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        \n\n    split(\n        final_url,\n        '?'\n        )[safe_offset(0)]\n\n as base_url,\n        \n    safe_cast(\n\n    split(\n        \n\n    split(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n\n,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_path,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_source='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_source,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_medium='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_medium,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_campaign,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_content='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_content,\n        nullif(\n\n    split(\n        \n\n    split(\n        final_url,\n        'utm_term='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_term\n    from renamed\n\n), surrogate_key as (\n\n    select\n        *,\n        to_hex(md5(cast(concat(coalesce(cast(date_day as \n    string\n), ''), '-', coalesce(cast(campaign_id as \n    string\n), ''), '-', coalesce(cast(ad_group_id as \n    string\n), ''), '-', coalesce(cast(final_url as \n    string\n), '')) as \n    string\n))) as final_url_performance_id\n    from url_fields\n\n)\n\nselect * from surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__final_url_performance`"}, "model.google_ads_source.stg_google_ads__criteria_performance": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_google_ads__criteria_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__criteria_performance_tmp')),\n                staging_columns=get_criteria_performance_columns()\n            )\n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "stg_google_ads__criteria_performance"], "unique_id": "model.google_ads_source.stg_google_ads__criteria_performance", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "stg_google_ads__criteria_performance.sql", "original_file_path": "models/stg_google_ads__criteria_performance.sql", "name": "stg_google_ads__criteria_performance", "resource_type": "model", "alias": "stg_google_ads__criteria_performance", "checksum": {"name": "sha256", "checksum": "cab386a6e1339cca50efe849aff8dd46e1b218c01435e1c34975695c0d7a7707"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__criteria_performance_tmp"], ["stg_google_ads__criteria_performance_tmp"]], "sources": [], "depends_on": {"macros": ["macro.google_ads_source.get_criteria_performance_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__criteria_performance_tmp", "model.google_ads_source.stg_google_ads__criteria_performance_tmp"]}, "description": "The Criteria Performance report includes statistics aggregated at the ad group criteria level, one row per ad group and criteria combination.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria": {"name": "criteria", "description": "Descriptive string for the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_destination_url": {"name": "criteria_destination_url", "description": "Destination URL of the criterion that triggered ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_type": {"name": "criteria_type", "description": "The type of the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the main object of this row.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_google_ads.yml", "build_path": "target/compiled/google_ads_source/models/stg_google_ads__criteria_performance.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__criteria_performance_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_descriptive_name\n    \n as account_name , \n    \n    \n    ad_group_id\n    \n as \n    \n    ad_group_id\n    \n, \n    \n    \n    ad_group_name\n    \n as \n    \n    ad_group_name\n    \n, \n    \n    \n    ad_group_status\n    \n as \n    \n    ad_group_status\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    campaign_name\n    \n as \n    \n    campaign_name\n    \n, \n    \n    \n    campaign_status\n    \n as \n    \n    campaign_status\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    cost\n    \n as spend , \n    \n    \n    criteria\n    \n as \n    \n    criteria\n    \n, \n    \n    \n    criteria_destination_url\n    \n as \n    \n    criteria_destination_url\n    \n, \n    \n    \n    criteria_type\n    \n as \n    \n    criteria_type\n    \n, \n    \n    \n    date\n    \n as date_day , \n    \n    \n    external_customer_id\n    \n as \n    \n    external_customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n\n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__criteria_performance`"}, "model.google_ads_source.stg_google_ads__click_performance": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_google_ads__click_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__click_performance_tmp')),\n                staging_columns=get_click_performance_columns()\n            )\n        }}\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "stg_google_ads__click_performance"], "unique_id": "model.google_ads_source.stg_google_ads__click_performance", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "stg_google_ads__click_performance.sql", "original_file_path": "models/stg_google_ads__click_performance.sql", "name": "stg_google_ads__click_performance", "resource_type": "model", "alias": "stg_google_ads__click_performance", "checksum": {"name": "sha256", "checksum": "09c799096d686097dbbdca7a35775d101b90109a64754b3d5eb6fcc3146e93f1"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__click_performance_tmp"], ["stg_google_ads__click_performance_tmp"]], "sources": [], "depends_on": {"macros": ["macro.google_ads_source.get_click_performance_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__click_performance_tmp", "model.google_ads_source.stg_google_ads__click_performance_tmp"]}, "description": "The Click Performance report includes stats aggregated at each click level.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gclid": {"name": "gclid", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_google_ads.yml", "build_path": "target/compiled/google_ads_source/models/stg_google_ads__click_performance.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__click_performance_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_descriptive_name\n    \n as account_name , \n    \n    \n    ad_group_id\n    \n as \n    \n    ad_group_id\n    \n, \n    \n    \n    ad_group_name\n    \n as \n    \n    ad_group_name\n    \n, \n    \n    \n    ad_group_status\n    \n as \n    \n    ad_group_status\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    campaign_name\n    \n as \n    \n    campaign_name\n    \n, \n    \n    \n    campaign_status\n    \n as \n    \n    campaign_status\n    \n, \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    criteria_id\n    \n as \n    \n    criteria_id\n    \n, \n    \n    \n    date\n    \n as date_day , \n    \n    \n    external_customer_id\n    \n as \n    \n    external_customer_id\n    \n, \n    \n    \n    gcl_id\n    \n as gclid \n\n\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__click_performance`"}, "model.google_ads_source.stg_google_ads__criteria_performance_tmp": {"raw_sql": "select *\nfrom {{ var('google_ads__criteria_performance') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "tmp", "stg_google_ads__criteria_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__criteria_performance_tmp", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "tmp/stg_google_ads__criteria_performance_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__criteria_performance_tmp.sql", "name": "stg_google_ads__criteria_performance_tmp", "resource_type": "model", "alias": "stg_google_ads__criteria_performance_tmp", "checksum": {"name": "sha256", "checksum": "7dcd0105ffa8756de05ceb01442e8a8a0f5ffc49c768f1dc9019b4bf97e39646"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["google_ads_criteria_performance_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.google_ads_criteria_performance_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__criteria_performance_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`google_ads_criteria_performance_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__criteria_performance_tmp`"}, "model.google_ads_source.stg_google_ads__final_url_performance_tmp": {"raw_sql": "select *\nfrom {{ var('google_ads__final_url_performance') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "tmp", "stg_google_ads__final_url_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__final_url_performance_tmp", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "tmp/stg_google_ads__final_url_performance_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__final_url_performance_tmp.sql", "name": "stg_google_ads__final_url_performance_tmp", "resource_type": "model", "alias": "stg_google_ads__final_url_performance_tmp", "checksum": {"name": "sha256", "checksum": "39bc5a08bad45382306a5471022da5a84fe9b0a136a098fbfe755133362fedf7"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["google_ads_final_url_performance_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.google_ads_final_url_performance_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__final_url_performance_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`google_ads_final_url_performance_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__final_url_performance_tmp`"}, "model.google_ads_source.stg_google_ads__click_performance_tmp": {"raw_sql": "select *\nfrom {{ var('google_ads__click_performance') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "tmp", "stg_google_ads__click_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__click_performance_tmp", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "tmp/stg_google_ads__click_performance_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__click_performance_tmp.sql", "name": "stg_google_ads__click_performance_tmp", "resource_type": "model", "alias": "stg_google_ads__click_performance_tmp", "checksum": {"name": "sha256", "checksum": "c9d788fde9d96b012d19958261fe0ebb10f29fece959e828a14d7fbae3eec1ce"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["google_ads_click_performance_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.google_ads_click_performance_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads_source/models/tmp/stg_google_ads__click_performance_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`google_ads_click_performance_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__click_performance_tmp`"}, "test.google_ads_source.unique_stg_google_ads__click_performance_gclid": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "gclid", "model": "{{ ref('stg_google_ads__click_performance') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "schema_test", "unique_stg_google_ads__click_performance_gclid"], "unique_id": "test.google_ads_source.unique_stg_google_ads__click_performance_gclid", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "schema_test/unique_stg_google_ads__click_performance_gclid.sql", "original_file_path": "models/stg_google_ads.yml", "name": "unique_stg_google_ads__click_performance_gclid", "resource_type": "test", "alias": "unique_stg_google_ads__click_performance_gclid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_google_ads__click_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.google_ads_source.stg_google_ads__click_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/schema_test/unique_stg_google_ads__click_performance_gclid.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        gclid\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__click_performance`\n    where gclid is not null\n    group by gclid\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gclid"}, "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "gclid", "model": "{{ ref('stg_google_ads__click_performance') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "schema_test", "not_null_stg_google_ads__click_performance_gclid"], "unique_id": "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "schema_test/not_null_stg_google_ads__click_performance_gclid.sql", "original_file_path": "models/stg_google_ads.yml", "name": "not_null_stg_google_ads__click_performance_gclid", "resource_type": "test", "alias": "not_null_stg_google_ads__click_performance_gclid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_google_ads__click_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.google_ads_source.stg_google_ads__click_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/schema_test/not_null_stg_google_ads__click_performance_gclid.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__click_performance`\nwhere gclid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gclid"}, "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "final_url_performance_id", "model": "{{ ref('stg_google_ads__final_url_performance') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "schema_test", "unique_stg_google_ads__final_url_performance_final_url_performance_id"], "unique_id": "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "schema_test/unique_stg_google_ads__final_url_performance_final_url_performance_id.sql", "original_file_path": "models/stg_google_ads.yml", "name": "unique_stg_google_ads__final_url_performance_final_url_performance_id", "resource_type": "test", "alias": "unique_stg_google_ads__final_url_performance_final_url_performance_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_google_ads__final_url_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/schema_test/unique_stg_google_ads__final_url_performance_final_url_performance_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        final_url_performance_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__final_url_performance`\n    where final_url_performance_id is not null\n    group by final_url_performance_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "final_url_performance_id"}, "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "final_url_performance_id", "model": "{{ ref('stg_google_ads__final_url_performance') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["google_ads_source", "schema_test", "not_null_stg_google_ads__final_url_performance_final_url_performance_id"], "unique_id": "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "schema_test/not_null_stg_google_ads__final_url_performance_final_url_performance_id.sql", "original_file_path": "models/stg_google_ads.yml", "name": "not_null_stg_google_ads__final_url_performance_final_url_performance_id", "resource_type": "test", "alias": "not_null_stg_google_ads__final_url_performance_final_url_performance_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_google_ads__final_url_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/google_ads_source/models/stg_google_ads.yml/schema_test/not_null_stg_google_ads__final_url_performance_final_url_performance_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads__final_url_performance`\nwhere final_url_performance_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "final_url_performance_id"}, "model.ad_reporting.ad_reporting": {"raw_sql": "{{ config(materialized='table') }}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations(get_staging_files()) }}\n\n)\n\nselect *\nfrom unioned", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting", "ad_reporting"], "unique_id": "model.ad_reporting.ad_reporting", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "ad_reporting.sql", "original_file_path": "models/ad_reporting.sql", "name": "ad_reporting", "resource_type": "model", "alias": "ad_reporting", "checksum": {"name": "sha256", "checksum": "784246a0409d33272ba9a91588fe732a6a85fa6ff4f1e7774d22d226ca1914db"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads"], ["stg_microsoft_ads"], ["stg_linkedin_ads"], ["stg_twitter_ads"], ["stg_google_ads"], ["stg_facebook_ads"]], "sources": [], "depends_on": {"macros": ["macro.ad_reporting.get_staging_files", "macro.dbt_utils.union_relations"], "nodes": ["model.ad_reporting.stg_pinterest_ads", "model.ad_reporting.stg_microsoft_ads", "model.ad_reporting.stg_linkedin_ads", "model.ad_reporting.stg_twitter_ads", "model.ad_reporting.stg_google_ads", "model.ad_reporting.stg_facebook_ads"]}, "description": "Each record in this table represents the daily performance of ads.", "columns": {"campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "A label for the ad group, if present in the source data. Mapped from fields including `campaign_group_name`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data. Mapped from fields including `campaign_group_id`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform the records relate to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/ad_reporting.yml", "build_path": "target/compiled/ad_reporting/models/ad_reporting.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "\n\nwith unioned as (\n\n    \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads`' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(null as STRING) as `platform` ,\n                    cast(null as DATE) as `date_day` ,\n                    cast(null as STRING) as `account_name` ,\n                    cast(null as INT64) as `account_id` ,\n                    cast(null as STRING) as `campaign_name` ,\n                    cast(null as STRING) as `campaign_id` ,\n                    cast(null as STRING) as `ad_group_name` ,\n                    cast(null as STRING) as `ad_group_id` ,\n                    cast(null as STRING) as `base_url` ,\n                    cast(null as STRING) as `url_host` ,\n                    cast(null as STRING) as `url_path` ,\n                    cast(null as STRING) as `utm_source` ,\n                    cast(null as STRING) as `utm_medium` ,\n                    cast(null as STRING) as `utm_campaign` ,\n                    cast(null as STRING) as `utm_content` ,\n                    cast(null as STRING) as `utm_term` ,\n                    cast(null as INT64) as `clicks` ,\n                    cast(null as INT64) as `impressions` ,\n                    cast(null as FLOAT64) as `spend` \n\n            from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads`\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads`' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`platform` as STRING) as `platform` ,\n                    cast(`date_day` as DATE) as `date_day` ,\n                    cast(`account_name` as STRING) as `account_name` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`campaign_name` as STRING) as `campaign_name` ,\n                    cast(`campaign_id` as STRING) as `campaign_id` ,\n                    cast(`ad_group_name` as STRING) as `ad_group_name` ,\n                    cast(`ad_group_id` as STRING) as `ad_group_id` ,\n                    cast(`base_url` as STRING) as `base_url` ,\n                    cast(`url_host` as STRING) as `url_host` ,\n                    cast(`url_path` as STRING) as `url_path` ,\n                    cast(`utm_source` as STRING) as `utm_source` ,\n                    cast(`utm_medium` as STRING) as `utm_medium` ,\n                    cast(`utm_campaign` as STRING) as `utm_campaign` ,\n                    cast(`utm_content` as STRING) as `utm_content` ,\n                    cast(`utm_term` as STRING) as `utm_term` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`spend` as FLOAT64) as `spend` \n\n            from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads`\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin_ads`' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`platform` as STRING) as `platform` ,\n                    cast(`date_day` as DATE) as `date_day` ,\n                    cast(`account_name` as STRING) as `account_name` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`campaign_name` as STRING) as `campaign_name` ,\n                    cast(`campaign_id` as STRING) as `campaign_id` ,\n                    cast(`ad_group_name` as STRING) as `ad_group_name` ,\n                    cast(`ad_group_id` as STRING) as `ad_group_id` ,\n                    cast(`base_url` as STRING) as `base_url` ,\n                    cast(`url_host` as STRING) as `url_host` ,\n                    cast(`url_path` as STRING) as `url_path` ,\n                    cast(`utm_source` as STRING) as `utm_source` ,\n                    cast(`utm_medium` as STRING) as `utm_medium` ,\n                    cast(`utm_campaign` as STRING) as `utm_campaign` ,\n                    cast(`utm_content` as STRING) as `utm_content` ,\n                    cast(`utm_term` as STRING) as `utm_term` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`spend` as FLOAT64) as `spend` \n\n            from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin_ads`\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads`' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`platform` as STRING) as `platform` ,\n                    cast(`date_day` as DATE) as `date_day` ,\n                    cast(null as STRING) as `account_name` ,\n                    cast(null as INT64) as `account_id` ,\n                    cast(`campaign_name` as STRING) as `campaign_name` ,\n                    cast(`campaign_id` as STRING) as `campaign_id` ,\n                    cast(`ad_group_name` as STRING) as `ad_group_name` ,\n                    cast(`ad_group_id` as STRING) as `ad_group_id` ,\n                    cast(`base_url` as STRING) as `base_url` ,\n                    cast(`url_host` as STRING) as `url_host` ,\n                    cast(`url_path` as STRING) as `url_path` ,\n                    cast(`utm_source` as STRING) as `utm_source` ,\n                    cast(`utm_medium` as STRING) as `utm_medium` ,\n                    cast(`utm_campaign` as STRING) as `utm_campaign` ,\n                    cast(`utm_content` as STRING) as `utm_content` ,\n                    cast(`utm_term` as STRING) as `utm_term` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`spend` as FLOAT64) as `spend` \n\n            from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads`\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads`' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`platform` as STRING) as `platform` ,\n                    cast(`date_day` as DATE) as `date_day` ,\n                    cast(`account_name` as STRING) as `account_name` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`campaign_name` as STRING) as `campaign_name` ,\n                    cast(`campaign_id` as STRING) as `campaign_id` ,\n                    cast(`ad_group_name` as STRING) as `ad_group_name` ,\n                    cast(`ad_group_id` as STRING) as `ad_group_id` ,\n                    cast(`base_url` as STRING) as `base_url` ,\n                    cast(`url_host` as STRING) as `url_host` ,\n                    cast(`url_path` as STRING) as `url_path` ,\n                    cast(`utm_source` as STRING) as `utm_source` ,\n                    cast(`utm_medium` as STRING) as `utm_medium` ,\n                    cast(`utm_campaign` as STRING) as `utm_campaign` ,\n                    cast(`utm_content` as STRING) as `utm_content` ,\n                    cast(`utm_term` as STRING) as `utm_term` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`spend` as FLOAT64) as `spend` \n\n            from `dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads`\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads`' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`platform` as STRING) as `platform` ,\n                    cast(`date_day` as DATE) as `date_day` ,\n                    cast(null as STRING) as `account_name` ,\n                    cast(null as INT64) as `account_id` ,\n                    cast(`campaign_name` as STRING) as `campaign_name` ,\n                    cast(`campaign_id` as STRING) as `campaign_id` ,\n                    cast(`ad_group_name` as STRING) as `ad_group_name` ,\n                    cast(`ad_group_id` as STRING) as `ad_group_id` ,\n                    cast(`base_url` as STRING) as `base_url` ,\n                    cast(`url_host` as STRING) as `url_host` ,\n                    cast(`url_path` as STRING) as `url_path` ,\n                    cast(`utm_source` as STRING) as `utm_source` ,\n                    cast(`utm_medium` as STRING) as `utm_medium` ,\n                    cast(`utm_campaign` as STRING) as `utm_campaign` ,\n                    cast(`utm_content` as STRING) as `utm_content` ,\n                    cast(`utm_term` as STRING) as `utm_term` ,\n                    cast(`clicks` as INT64) as `clicks` ,\n                    cast(`impressions` as INT64) as `impressions` ,\n                    cast(`spend` as FLOAT64) as `spend` \n\n            from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads`\n        )\n\n        \n\n)\n\nselect *\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`ad_reporting`"}, "model.ad_reporting.stg_microsoft_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        'Microsoft Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting", "stg_microsoft_ads"], "unique_id": "model.ad_reporting.stg_microsoft_ads", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "stg_microsoft_ads.sql", "original_file_path": "models/stg_microsoft_ads.sql", "name": "stg_microsoft_ads", "resource_type": "model", "alias": "stg_microsoft_ads", "checksum": {"name": "sha256", "checksum": "b2a054a0f77d31906c5cd7349f7e2e895fd5a3636ebac8c48843995425adf717"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/ad_reporting/models/stg_microsoft_ads.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__ad_adapter`\n\n), fields as (\n\n    select\n        'Microsoft Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as \n    string\n) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads`"}, "model.ad_reporting.stg_facebook_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        cast(date_day as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name,\n        cast(ad_set_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_set_name as ad_group_name,\n        'Facebook Ads' as platform,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting", "stg_facebook_ads"], "unique_id": "model.ad_reporting.stg_facebook_ads", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "stg_facebook_ads.sql", "original_file_path": "models/stg_facebook_ads.sql", "name": "stg_facebook_ads", "resource_type": "model", "alias": "stg_facebook_ads", "checksum": {"name": "sha256", "checksum": "d4ececfc19510a7c2454f0deb7bdd1bf8e87e12bb0fb9875294c4afb02d274d3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/ad_reporting/models/stg_facebook_ads.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads__ad_adapter`\n\n), fields as (\n\n    select\n        cast(date_day as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as \n    string\n) as campaign_id,\n        campaign_name,\n        cast(ad_set_id as \n    string\n) as ad_group_id,\n        ad_set_name as ad_group_name,\n        'Facebook Ads' as platform,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads`"}, "model.ad_reporting.stg_linkedin_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__linkedin_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter')}}\n\n), fields as (\n\n    select\n        'LinkedIn Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_group_name as ad_group_name,\n        cast(campaign_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting", "stg_linkedin_ads"], "unique_id": "model.ad_reporting.stg_linkedin_ads", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "stg_linkedin_ads.sql", "original_file_path": "models/stg_linkedin_ads.sql", "name": "stg_linkedin_ads", "resource_type": "model", "alias": "stg_linkedin_ads", "checksum": {"name": "sha256", "checksum": "ca89fe398ad06d1516ae53dee87f5973dd4f78fbd37228593bf7af594e97228f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/ad_reporting/models/stg_linkedin_ads.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`\n\n), fields as (\n\n    select\n        'LinkedIn Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as \n    string\n) as campaign_id,\n        campaign_group_name as ad_group_name,\n        cast(campaign_group_id as \n    string\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin_ads`"}, "model.ad_reporting.stg_pinterest_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__pinterest_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        cast(campaign_date as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_group_name,\n        platform,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting", "stg_pinterest_ads"], "unique_id": "model.ad_reporting.stg_pinterest_ads", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "stg_pinterest_ads.sql", "original_file_path": "models/stg_pinterest_ads.sql", "name": "stg_pinterest_ads", "resource_type": "model", "alias": "stg_pinterest_ads", "checksum": {"name": "sha256", "checksum": "4f283ff383cf2ecc1fec1a3afb08160111530942b021b229b3661ffe05ab340d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/ad_reporting/models/stg_pinterest_ads.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`pinterest_ads__ad_adapter`\n\n), fields as (\n\n    select\n        cast(campaign_date as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as \n    string\n) as campaign_id,\n        campaign_name,\n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        ad_group_name,\n        platform,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads`"}, "model.ad_reporting.stg_google_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__google_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('google_ads__url_ad_adapter')}}\n\n), fields as (\n\n    select\n        'Google Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        external_customer_id as account_id,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting", "stg_google_ads"], "unique_id": "model.ad_reporting.stg_google_ads", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "stg_google_ads.sql", "original_file_path": "models/stg_google_ads.sql", "name": "stg_google_ads", "resource_type": "model", "alias": "stg_google_ads", "checksum": {"name": "sha256", "checksum": "34d0865ae5bfc20309037b531547ec48378cbc754d4739b6cfcafa05c28e3a86"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["google_ads__url_ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.google_ads.google_ads__url_ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/ad_reporting/models/stg_google_ads.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`google_ads__url_ad_adapter`\n\n), fields as (\n\n    select\n        'Google Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        external_customer_id as account_id,\n        campaign_name,\n        cast(campaign_id as \n    string\n) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as \n    string\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_google_ads`"}, "model.ad_reporting.stg_twitter_ads": {"raw_sql": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('twitter__ad_adapter')}}\n\n), fields as (\n\n    select\n        'Twitter Ads' as platform,\n        cast(date_day as date) as date_day,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        line_item_name as ad_group_name,\n        cast(line_item_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["ad_reporting", "stg_twitter_ads"], "unique_id": "model.ad_reporting.stg_twitter_ads", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "stg_twitter_ads.sql", "original_file_path": "models/stg_twitter_ads.sql", "name": "stg_twitter_ads", "resource_type": "model", "alias": "stg_twitter_ads", "checksum": {"name": "sha256", "checksum": "8169e8a8b86800e3a9cc4b4eea0cc6cd991c070cb4be375472a600415b8857e8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/ad_reporting/models/stg_twitter_ads.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`twitter__ad_adapter`\n\n), fields as (\n\n    select\n        'Twitter Ads' as platform,\n        cast(date_day as date) as date_day,\n        campaign_name,\n        cast(campaign_id as \n    string\n) as campaign_id,\n        line_item_name as ad_group_name,\n        cast(line_item_id as \n    string\n) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_history_tmp') }}\n\n), macro as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_history_tmp')),\n                staging_columns=get_pin_promotion_history_columns()\n            )\n        }}\n\n    from base\n\n), fields as (\n\n    select\n        id as pin_promotion_id,\n        ad_group_id,\n        created_time as created_timestamp,\n        destination_url,\n        {{ dbt_utils.split_part('destination_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('destination_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('destination_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_term') }} as utm_term,\n        name,\n        pin_id,\n        status,\n        creative_type,\n        _fivetran_synced\n    from macro\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['pin_promotion_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_history.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_history.sql", "name": "stg_pinterest_ads__pin_promotion_history", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_history", "checksum": {"name": "sha256", "checksum": "f8ec0f2068f6f46e9de886d61835b934a12362e55ab69f6dc9cb346674944d4c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history_tmp"], ["stg_pinterest_ads__pin_promotion_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"]}, "description": "Each record represents a version of a Pinterest Pin promotion.", "columns": {"pin_promotion_id": {"name": "pin_promotion_id", "description": "Pin promotion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Pin promotion ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Pin creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_id": {"name": "pin_id", "description": "Original pin ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of a Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__pin_promotion_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history_tmp`\n\n), macro as (\n\n    select\n\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    android_deep_link\n    \n , \n    cast(null as \n    string\n) as \n    \n    click_tracking_url\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    created_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    creative_type\n    \n , \n    cast(null as \n    string\n) as \n    \n    destination_url\n    \n , \n    cast(null as \n    string\n) as \n    \n    id\n    \n , \n    cast(null as \n    string\n) as \n    \n    ios_deep_link\n    \n , \n    cast(null as boolean) as \n    \n    is_pin_deleted\n    \n , \n    cast(null as boolean) as \n    \n    is_removable\n    \n , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    pin_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    review_status\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    updated_time\n    \n , \n    cast(null as \n    string\n) as \n    \n    view_tracking_url\n    \n \n\n\n\n    from base\n\n), fields as (\n\n    select\n        id as pin_promotion_id,\n        ad_group_id,\n        created_time as created_timestamp,\n        destination_url,\n        \n\n    split(\n        destination_url,\n        '?'\n        )[safe_offset(0)]\n\n as base_url,\n        \n    safe_cast(\n\n    split(\n        \n\n    split(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n\n,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        destination_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_path,\n        nullif(\n\n    split(\n        \n\n    split(\n        destination_url,\n        'utm_source='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_source,\n        nullif(\n\n    split(\n        \n\n    split(\n        destination_url,\n        'utm_medium='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_medium,\n        nullif(\n\n    split(\n        \n\n    split(\n        destination_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_campaign,\n        nullif(\n\n    split(\n        \n\n    split(\n        destination_url,\n        'utm_content='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_content,\n        nullif(\n\n    split(\n        \n\n    split(\n        destination_url,\n        'utm_term='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_term,\n        name,\n        pin_id,\n        status,\n        creative_type,\n        _fivetran_synced\n    from macro\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(pin_promotion_id as \n    string\n), ''), '-', coalesce(cast(_fivetran_synced as \n    string\n), '')) as \n    string\n))) as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`"}, "model.pinterest_source.stg_pinterest_ads__campaign_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__campaign_history_tmp') }}\n\n), fields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "stg_pinterest_ads__campaign_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__campaign_history.sql", "original_file_path": "models/stg_pinterest_ads__campaign_history.sql", "name": "stg_pinterest_ads__campaign_history", "resource_type": "model", "alias": "stg_pinterest_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "ef4b3a80dc6e9826455ce0c9597553afbc1d0d4b6721f546b392579403020da2"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history_tmp"], ["stg_pinterest_ads__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"]}, "description": "Each record represents a version of a Pinterest Campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Campaign creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Campaign. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of a Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__campaign_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history_tmp`\n\n), fields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    string\n) as campaign_id , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(campaign_id as \n    string\n), ''), '-', coalesce(cast(_fivetran_synced as \n    string\n), '')) as \n    string\n))) as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_report_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_report_tmp')),\n                staging_columns=get_pin_promotion_report_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        date as date_day,\n        pin_promotion_id,\n        ad_group_id,\n        campaign_id,\n        advertiser_id,\n        _fivetran_synced,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n    from base\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','pin_promotion_id']) }} as report_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_report.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_report.sql", "name": "stg_pinterest_ads__pin_promotion_report", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_report", "checksum": {"name": "sha256", "checksum": "1475fadccbc409a9312c2565c194bb1dabc278560c094099102ed27f492adf6d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report_tmp"], ["stg_pinterest_ads__pin_promotion_report_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"]}, "description": "Each record represents the daily performance of a Pinterest Pin promotion.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "report_id": {"name": "report_id", "description": "The unique ID of each report record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__pin_promotion_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_report_tmp`\n\n), macro as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    ad_group_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    advertiser_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clickthrough_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clickthrough_1_gross\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    clickthrough_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    closeup_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    closeup_2\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpcv_in_micro_dollar\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpcv_p_95_in_micro_dollar\n    \n , \n    cast(null as \n    float64\n) as \n    \n    cpv_in_micro_dollar\n    \n , \n    cast(null as \n    timestamp\n) as \n    \n    date\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    engagement_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    engagement_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impression_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impression_1_gross\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    impression_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    pin_id\n    \n , \n    cast(null as \n    string\n) as \n    \n    pin_promotion_id\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    repin_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    repin_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    spend_in_micro_dollar\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    total_click_unknown\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    total_conversions\n    \n , \n    cast(null as \n    float64\n) as \n    \n    total_impression_frequency\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    total_impression_user\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    total_unknown_tablet_action_to_mobile_conversion\n    \n , \n    cast(null as \n    float64\n) as \n    \n    video_avg_watchtime_in_second_1\n    \n , \n    cast(null as \n    float64\n) as \n    \n    video_avg_watchtime_in_second_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_mrc_views_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_mrc_views_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_0_combined_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_0_combined_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_100_complete_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_100_complete_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_25_combined_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_25_combined_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_50_combined_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_50_combined_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_75_combined_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_75_combined_2\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_95_combined_1\n    \n , \n    cast(null as \n    numeric\n) as \n    \n    video_p_95_combined_2\n    \n \n\n\n    from base\n\n), fields as (\n\n    select \n        date as date_day,\n        pin_promotion_id,\n        ad_group_id,\n        campaign_id,\n        advertiser_id,\n        _fivetran_synced,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n    from base\n\n), surrogate_key as (\n\n    select\n        *,\n        to_hex(md5(cast(concat(coalesce(cast(date_day as \n    string\n), ''), '-', coalesce(cast(pin_promotion_id as \n    string\n), '')) as \n    string\n))) as report_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_report`"}, "model.pinterest_source.stg_pinterest_ads__ad_group_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__ad_group_history_tmp') }}\n\n), fields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_group_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "stg_pinterest_ads__ad_group_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__ad_group_history.sql", "original_file_path": "models/stg_pinterest_ads__ad_group_history.sql", "name": "stg_pinterest_ads__ad_group_history", "resource_type": "model", "alias": "stg_pinterest_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "d305d0a0db070a7392c8d0aded88ab650d97b26fd7a7139e27940c942200637e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history_tmp"], ["stg_pinterest_ads__ad_group_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"]}, "description": "Each record represents a version of a Pinterest Ad Group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Parent Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Ad group. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of an Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads__ad_group_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history_tmp`\n\n), fields as (\n\n    select\n        \n    cast(null as \n    timestamp\n) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as \n    string\n) as \n    \n    campaign_id\n    \n , \n    cast(null as \n    timestamp\n) as created_timestamp , \n    cast(null as \n    timestamp\n) as end_timestamp , \n    cast(null as \n    string\n) as ad_group_id , \n    cast(null as \n    string\n) as \n    \n    name\n    \n , \n    cast(null as \n    timestamp\n) as start_timestamp , \n    cast(null as \n    string\n) as \n    \n    status\n    \n \n\n\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        to_hex(md5(cast(concat(coalesce(cast(ad_group_id as \n    string\n), ''), '-', coalesce(cast(_fivetran_synced as \n    string\n), '')) as \n    string\n))) as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": {"raw_sql": "select *\nfrom {{ var('pin_promotion_report') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_report_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_report_tmp", "checksum": {"name": "sha256", "checksum": "18cfa5bd72f823f350eb4fd5f5400957cc628d66510236ca582e0186f4ed24f4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pin_promotion_report_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.pin_promotion_report_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`pin_promotion_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_report_tmp`"}, "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__campaign_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "name": "stg_pinterest_ads__campaign_history_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["campaign_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.campaign_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history_tmp`"}, "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": {"raw_sql": "select *\nfrom {{ var('ad_group_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__ad_group_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "name": "stg_pinterest_ads__ad_group_history_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "23726e9b019c8268e9aaae828c6c1430685538bef615e52f2c17436dd3615dfa"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ad_group_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.ad_group_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`ad_group_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history_tmp`"}, "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": {"raw_sql": "select *\nfrom {{ var('pin_promotion_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_history_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_history_tmp", "checksum": {"name": "sha256", "checksum": "065bd24ab667bb3742cf11e3d96295c4c78ecdc04bb4d86a8bfa521482c55e71"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pin_promotion_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.pin_promotion_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`pin_promotion_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history_tmp`"}, "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ ref('stg_pinterest_ads__ad_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "unique_stg_pinterest_ads__ad_group_history_version_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/unique_stg_pinterest_ads__ad_group_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__ad_group_history_version_id", "resource_type": "test", "alias": "unique_stg_pinterest_ads__ad_group_history_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/unique_stg_pinterest_ads__ad_group_history_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\n    where version_id is not null\n    group by version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id"}, "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ ref('stg_pinterest_ads__ad_group_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "not_null_stg_pinterest_ads__ad_group_history_version_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/not_null_stg_pinterest_ads__ad_group_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__ad_group_history_version_id", "resource_type": "test", "alias": "not_null_stg_pinterest_ads__ad_group_history_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__ad_group_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/not_null_stg_pinterest_ads__ad_group_history_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__ad_group_history`\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id"}, "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ ref('stg_pinterest_ads__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "unique_stg_pinterest_ads__campaign_history_version_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/unique_stg_pinterest_ads__campaign_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__campaign_history_version_id", "resource_type": "test", "alias": "unique_stg_pinterest_ads__campaign_history_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/unique_stg_pinterest_ads__campaign_history_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\n    where version_id is not null\n    group by version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id"}, "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ ref('stg_pinterest_ads__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "not_null_stg_pinterest_ads__campaign_history_version_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/not_null_stg_pinterest_ads__campaign_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__campaign_history_version_id", "resource_type": "test", "alias": "not_null_stg_pinterest_ads__campaign_history_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/not_null_stg_pinterest_ads__campaign_history_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__campaign_history`\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id"}, "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ ref('stg_pinterest_ads__pin_promotion_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "unique_stg_pinterest_ads__pin_promotion_history_version_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/unique_stg_pinterest_ads__pin_promotion_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__pin_promotion_history_version_id", "resource_type": "test", "alias": "unique_stg_pinterest_ads__pin_promotion_history_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/unique_stg_pinterest_ads__pin_promotion_history_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        version_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\n    where version_id is not null\n    group by version_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id"}, "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ ref('stg_pinterest_ads__pin_promotion_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "not_null_stg_pinterest_ads__pin_promotion_history_version_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/not_null_stg_pinterest_ads__pin_promotion_history_version_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__pin_promotion_history_version_id", "resource_type": "test", "alias": "not_null_stg_pinterest_ads__pin_promotion_history_version_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__pin_promotion_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/not_null_stg_pinterest_ads__pin_promotion_history_version_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_history`\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id"}, "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "report_id", "model": "{{ ref('stg_pinterest_ads__pin_promotion_report') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "unique_stg_pinterest_ads__pin_promotion_report_report_id"], "unique_id": "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/unique_stg_pinterest_ads__pin_promotion_report_report_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "unique_stg_pinterest_ads__pin_promotion_report_report_id", "resource_type": "test", "alias": "unique_stg_pinterest_ads__pin_promotion_report_report_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__pin_promotion_report"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/unique_stg_pinterest_ads__pin_promotion_report_report_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        report_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_report`\n    where report_id is not null\n    group by report_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "report_id"}, "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "report_id", "model": "{{ ref('stg_pinterest_ads__pin_promotion_report') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["pinterest_source", "schema_test", "not_null_stg_pinterest_ads__pin_promotion_report_report_id"], "unique_id": "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "schema_test/not_null_stg_pinterest_ads__pin_promotion_report_report_id.sql", "original_file_path": "models/stg_pinterest_ads.yml", "name": "not_null_stg_pinterest_ads__pin_promotion_report_report_id", "resource_type": "test", "alias": "not_null_stg_pinterest_ads__pin_promotion_report_report_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_pinterest_ads__pin_promotion_report"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/pinterest_source/models/stg_pinterest_ads.yml/schema_test/not_null_stg_pinterest_ads__pin_promotion_report_report_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_pinterest_ads__pin_promotion_report`\nwhere report_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "report_id"}, "model.facebook_ads_source.stg_facebook_ads__basic_ad": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__basic_ad_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__basic_ad_tmp')),\n                staging_columns=get_basic_ad_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_day,\n        account_id,\n        impressions,\n        inline_link_clicks as clicks,\n        spend\n    from fields\n)\n\nselect * from final", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__basic_ad"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__basic_ad.sql", "original_file_path": "models/stg_facebook_ads__basic_ad.sql", "name": "stg_facebook_ads__basic_ad", "resource_type": "model", "alias": "stg_facebook_ads__basic_ad", "checksum": {"name": "sha256", "checksum": "027a6dcd9090806d456a02a7637e4d39fc83d8edb5f33f8f8c85e498c992e86a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__basic_ad_tmp"], ["stg_facebook_ads__basic_ad_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_basic_ad_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"]}, "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__basic_ad.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__basic_ad_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    ad_id\n    \n as \n    \n    ad_id\n    \n, \n    \n    \n    ad_name\n    \n as \n    \n    ad_name\n    \n, \n    \n    \n    adset_name\n    \n as \n    \n    adset_name\n    \n, \n    \n    \n    cpc\n    \n as \n    \n    cpc\n    \n, \n    \n    \n    cpm\n    \n as \n    \n    cpm\n    \n, \n    \n    \n    ctr\n    \n as \n    \n    ctr\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    frequency\n    \n as \n    \n    frequency\n    \n, \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    inline_link_clicks\n    \n as \n    \n    inline_link_clicks\n    \n, \n    \n    \n    reach\n    \n as \n    \n    reach\n    \n, \n    \n    \n    spend\n    \n as \n    \n    spend\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_day,\n        account_id,\n        impressions,\n        inline_link_clicks as clicks,\n        spend\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__basic_ad`"}, "model.facebook_ads_source.stg_facebook_ads__creative_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__creative_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n    \n)\n\nselect * from fields_xf", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__creative_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__creative_history.sql", "original_file_path": "models/stg_facebook_ads__creative_history.sql", "name": "stg_facebook_ads__creative_history", "resource_type": "model", "alias": "stg_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "c74654b447b4ca1e0d10f1e5fb025312f0458f8b7683433cebd25a9d95f67bdc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history_tmp"], ["stg_facebook_ads__creative_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"]}, "description": "Each record in this table reflects a Facebook creative.", "columns": {"creative_id": {"name": "creative_id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The full URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__creative_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    applink_treatment\n    \n as \n    \n    applink_treatment\n    \n, \n    \n    \n    asset_feed_spec_link_urls\n    \n as \n    \n    asset_feed_spec_link_urls\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    branded_content_sponsor_page_id\n    \n as \n    \n    branded_content_sponsor_page_id\n    \n, \n    \n    \n    call_to_action_type\n    \n as \n    \n    call_to_action_type\n    \n, \n    \n    \n    carousel_ad_link\n    \n as \n    \n    carousel_ad_link\n    \n, \n    \n    \n    effective_instagram_story_id\n    \n as \n    \n    effective_instagram_story_id\n    \n, \n    \n    \n    effective_object_story_id\n    \n as \n    \n    effective_object_story_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    image_file\n    \n as \n    \n    image_file\n    \n, \n    \n    \n    image_hash\n    \n as \n    \n    image_hash\n    \n, \n    \n    \n    image_url\n    \n as \n    \n    image_url\n    \n, \n    \n    \n    instagram_actor_id\n    \n as \n    \n    instagram_actor_id\n    \n, \n    \n    \n    instagram_permalink_url\n    \n as \n    \n    instagram_permalink_url\n    \n, \n    \n    \n    instagram_story_id\n    \n as \n    \n    instagram_story_id\n    \n, \n    \n    \n    link_og_id\n    \n as \n    \n    link_og_id\n    \n, \n    \n    \n    link_url\n    \n as \n    \n    link_url\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    object_id\n    \n as \n    \n    object_id\n    \n, \n    \n    \n    object_story_id\n    \n as \n    \n    object_story_id\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_android\n    \n as \n    \n    object_story_link_data_app_link_spec_android\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_ios\n    \n as \n    \n    object_story_link_data_app_link_spec_ios\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_ipad\n    \n as \n    \n    object_story_link_data_app_link_spec_ipad\n    \n, \n    \n    \n    object_story_link_data_app_link_spec_iphone\n    \n as \n    \n    object_story_link_data_app_link_spec_iphone\n    \n, \n    \n    \n    object_story_link_data_caption\n    \n as \n    \n    object_story_link_data_caption\n    \n, \n    \n    \n    object_story_link_data_child_attachments\n    \n as \n    \n    object_story_link_data_child_attachments\n    \n, \n    \n    \n    object_story_link_data_description\n    \n as \n    \n    object_story_link_data_description\n    \n, \n    \n    \n    object_story_link_data_link\n    \n as \n    \n    object_story_link_data_link\n    \n, \n    \n    \n    object_story_link_data_message\n    \n as \n    \n    object_story_link_data_message\n    \n, \n    \n    \n    object_type\n    \n as \n    \n    object_type\n    \n, \n    \n    \n    object_url\n    \n as \n    \n    object_url\n    \n, \n    \n    \n    page_link\n    \n as \n    \n    page_link\n    \n, \n    \n    \n    page_message\n    \n as \n    \n    page_message\n    \n, \n    \n    \n    product_set_id\n    \n as \n    \n    product_set_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    template_app_link_spec_android\n    \n as \n    \n    template_app_link_spec_android\n    \n, \n    \n    \n    template_app_link_spec_ios\n    \n as \n    \n    template_app_link_spec_ios\n    \n, \n    \n    \n    template_app_link_spec_ipad\n    \n as \n    \n    template_app_link_spec_ipad\n    \n, \n    \n    \n    template_app_link_spec_iphone\n    \n as \n    \n    template_app_link_spec_iphone\n    \n, \n    \n    \n    template_caption\n    \n as \n    \n    template_caption\n    \n, \n    \n    \n    template_child_attachments\n    \n as \n    \n    template_child_attachments\n    \n, \n    \n    \n    template_description\n    \n as \n    \n    template_description\n    \n, \n    \n    \n    template_link\n    \n as \n    \n    template_link\n    \n, \n    \n    \n    template_message\n    \n as \n    \n    template_message\n    \n, \n    \n    \n    template_page_link\n    \n as \n    \n    template_page_link\n    \n, \n    \n    \n    template_url\n    \n as \n    \n    template_url\n    \n, \n    \n    \n    thumbnail_url\n    \n as \n    \n    thumbnail_url\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    url_tags\n    \n as \n    \n    url_tags\n    \n, \n    \n    \n    use_page_actor_override\n    \n as \n    \n    use_page_actor_override\n    \n, \n    \n    \n    video_call_to_action_value_link\n    \n as \n    \n    video_call_to_action_value_link\n    \n, \n    \n    \n    video_id\n    \n as \n    \n    video_id\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n    \n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history`"}, "model.facebook_ads_source.stg_facebook_ads__campaign_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__campaign_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__campaign_history.sql", "original_file_path": "models/stg_facebook_ads__campaign_history.sql", "name": "stg_facebook_ads__campaign_history", "resource_type": "model", "alias": "stg_facebook_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "a6d89567bc6b46074191adc36db46e6a84280697789ba33ddc5faeb56707284f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__campaign_history_tmp"], ["stg_facebook_ads__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"]}, "description": "Each record in this table reflects a Facebook campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__campaign_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    boosted_object_id\n    \n as \n    \n    boosted_object_id\n    \n, \n    \n    \n    budget_rebalance_flag\n    \n as \n    \n    budget_rebalance_flag\n    \n, \n    \n    \n    buying_type\n    \n as \n    \n    buying_type\n    \n, \n    \n    \n    can_create_brand_lift_study\n    \n as \n    \n    can_create_brand_lift_study\n    \n, \n    \n    \n    can_use_spend_cap\n    \n as \n    \n    can_use_spend_cap\n    \n, \n    \n    \n    configured_status\n    \n as \n    \n    configured_status\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    daily_budget\n    \n as \n    \n    daily_budget\n    \n, \n    \n    \n    effective_status\n    \n as \n    \n    effective_status\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    objective\n    \n as \n    \n    objective\n    \n, \n    \n    \n    source_campaign_id\n    \n as \n    \n    source_campaign_id\n    \n, \n    \n    \n    spend_cap\n    \n as \n    \n    spend_cap\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    stop_time\n    \n as \n    \n    stop_time\n    \n, \n    \n    \n    updated_time\n    \n as \n    \n    updated_time\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__campaign_history`"}, "model.facebook_ads_source.stg_facebook_ads__account_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__account_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__account_history.sql", "original_file_path": "models/stg_facebook_ads__account_history.sql", "name": "stg_facebook_ads__account_history", "resource_type": "model", "alias": "stg_facebook_ads__account_history", "checksum": {"name": "sha256", "checksum": "245b808f02f27b223acce2c393df93b9089346a2dfec021eeaaf9ab438d11157"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__account_history_tmp"], ["stg_facebook_ads__account_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"]}, "description": "Each record in this table reflects a Facebook ad account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__account_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__account_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_status\n    \n as \n    \n    account_status\n    \n, \n    \n    \n    age\n    \n as \n    \n    age\n    \n, \n    \n    \n    agency_client_declaration_agency_representing_client\n    \n as \n    \n    agency_client_declaration_agency_representing_client\n    \n, \n    \n    \n    agency_client_declaration_client_based_in_france\n    \n as \n    \n    agency_client_declaration_client_based_in_france\n    \n, \n    \n    \n    agency_client_declaration_client_city\n    \n as \n    \n    agency_client_declaration_client_city\n    \n, \n    \n    \n    agency_client_declaration_client_country_code\n    \n as \n    \n    agency_client_declaration_client_country_code\n    \n, \n    \n    \n    agency_client_declaration_client_email_address\n    \n as \n    \n    agency_client_declaration_client_email_address\n    \n, \n    \n    \n    agency_client_declaration_client_name\n    \n as \n    \n    agency_client_declaration_client_name\n    \n, \n    \n    \n    agency_client_declaration_client_postal_code\n    \n as \n    \n    agency_client_declaration_client_postal_code\n    \n, \n    \n    \n    agency_client_declaration_client_province\n    \n as \n    \n    agency_client_declaration_client_province\n    \n, \n    \n    \n    agency_client_declaration_client_street\n    \n as \n    \n    agency_client_declaration_client_street\n    \n, \n    \n    \n    agency_client_declaration_client_street_2\n    \n as \n    \n    agency_client_declaration_client_street_2\n    \n, \n    \n    \n    agency_client_declaration_has_written_mandate_from_advertiser\n    \n as \n    \n    agency_client_declaration_has_written_mandate_from_advertiser\n    \n, \n    \n    \n    agency_client_declaration_is_client_paying_invoices\n    \n as \n    \n    agency_client_declaration_is_client_paying_invoices\n    \n, \n    \n    \n    amount_spent\n    \n as \n    \n    amount_spent\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    business_city\n    \n as \n    \n    business_city\n    \n, \n    \n    \n    business_country_code\n    \n as \n    \n    business_country_code\n    \n, \n    \n    \n    business_manager_created_by\n    \n as \n    \n    business_manager_created_by\n    \n, \n    \n    \n    business_manager_created_time\n    \n as \n    \n    business_manager_created_time\n    \n, \n    \n    \n    business_manager_manager_id\n    \n as \n    \n    business_manager_manager_id\n    \n, \n    \n    \n    business_manager_name\n    \n as \n    \n    business_manager_name\n    \n, \n    \n    \n    business_manager_primary_page\n    \n as \n    \n    business_manager_primary_page\n    \n, \n    \n    \n    business_manager_timezone_id\n    \n as \n    \n    business_manager_timezone_id\n    \n, \n    \n    \n    business_manager_update_time\n    \n as \n    \n    business_manager_update_time\n    \n, \n    \n    \n    business_manager_updated_by\n    \n as \n    \n    business_manager_updated_by\n    \n, \n    \n    \n    business_name\n    \n as \n    \n    business_name\n    \n, \n    \n    \n    business_state\n    \n as \n    \n    business_state\n    \n, \n    \n    \n    business_street\n    \n as \n    \n    business_street\n    \n, \n    \n    \n    business_street_2\n    \n as \n    \n    business_street_2\n    \n, \n    \n    \n    business_zip\n    \n as \n    \n    business_zip\n    \n, \n    \n    \n    can_create_brand_lift_study\n    \n as \n    \n    can_create_brand_lift_study\n    \n, \n    \n    \n    capabilities\n    \n as \n    \n    capabilities\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    disable_reason\n    \n as \n    \n    disable_reason\n    \n, \n    \n    \n    end_advertiser\n    \n as \n    \n    end_advertiser\n    \n, \n    \n    \n    end_advertiser_name\n    \n as \n    \n    end_advertiser_name\n    \n, \n    \n    \n    has_migrated_permissions\n    \n as \n    \n    has_migrated_permissions\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    io_number\n    \n as \n    \n    io_number\n    \n, \n    \n    \n    is_attribution_spec_system_default\n    \n as \n    \n    is_attribution_spec_system_default\n    \n, \n    \n    \n    is_direct_deals_enabled\n    \n as \n    \n    is_direct_deals_enabled\n    \n, \n    \n    \n    is_notifications_enabled\n    \n as \n    \n    is_notifications_enabled\n    \n, \n    \n    \n    is_personal\n    \n as \n    \n    is_personal\n    \n, \n    \n    \n    is_prepay_account\n    \n as \n    \n    is_prepay_account\n    \n, \n    \n    \n    is_tax_id_required\n    \n as \n    \n    is_tax_id_required\n    \n, \n    \n    \n    media_agency\n    \n as \n    \n    media_agency\n    \n, \n    \n    \n    min_campaign_group_spend_cap\n    \n as \n    \n    min_campaign_group_spend_cap\n    \n, \n    \n    \n    min_daily_budget\n    \n as \n    \n    min_daily_budget\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    next_bill_date\n    \n as \n    \n    next_bill_date\n    \n, \n    \n    \n    offsite_pixels_tos_accepted\n    \n as \n    \n    offsite_pixels_tos_accepted\n    \n, \n    \n    \n    owner\n    \n as \n    \n    owner\n    \n, \n    \n    \n    partner\n    \n as \n    \n    partner\n    \n, \n    \n    \n    salesforce_invoice_group_id\n    \n as \n    \n    salesforce_invoice_group_id\n    \n, \n    \n    \n    spend_cap\n    \n as \n    \n    spend_cap\n    \n, \n    \n    \n    tax_id\n    \n as \n    \n    tax_id\n    \n, \n    \n    \n    tax_id_status\n    \n as \n    \n    tax_id_status\n    \n, \n    \n    \n    tax_id_type\n    \n as \n    \n    tax_id_type\n    \n, \n    \n    \n    timezone_id\n    \n as \n    \n    timezone_id\n    \n, \n    \n    \n    timezone_name\n    \n as \n    \n    timezone_name\n    \n, \n    \n    \n    timezone_offset_hours_utc\n    \n as \n    \n    timezone_offset_hours_utc\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__account_history`"}, "model.facebook_ads_source.stg_facebook_ads__ad_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__ad_history.sql", "original_file_path": "models/stg_facebook_ads__ad_history.sql", "name": "stg_facebook_ads__ad_history", "resource_type": "model", "alias": "stg_facebook_ads__ad_history", "checksum": {"name": "sha256", "checksum": "33bcef2482cf9b7b791d788af5cfbcd29caae94b03cc4bda011342bacaa6c914"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__ad_history_tmp"], ["stg_facebook_ads__ad_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"]}, "description": "Each record in this table reflects a Facebook ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__ad_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    ad_set_id\n    \n as \n    \n    ad_set_id\n    \n, \n    \n    \n    ad_source_id\n    \n as \n    \n    ad_source_id\n    \n, \n    \n    \n    bid_amount\n    \n as \n    \n    bid_amount\n    \n, \n    \n    \n    bid_info_actions\n    \n as \n    \n    bid_info_actions\n    \n, \n    \n    \n    bid_type\n    \n as \n    \n    bid_type\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    configured_status\n    \n as \n    \n    configured_status\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    creative_id\n    \n as \n    \n    creative_id\n    \n, \n    \n    \n    effective_status\n    \n as \n    \n    effective_status\n    \n, \n    \n    \n    global_discriminatory_practices\n    \n as \n    \n    global_discriminatory_practices\n    \n, \n    \n    \n    global_non_functional_landing_page\n    \n as \n    \n    global_non_functional_landing_page\n    \n, \n    \n    \n    global_use_of_our_brand_assets\n    \n as \n    \n    global_use_of_our_brand_assets\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_updated_by_app_id\n    \n as \n    \n    last_updated_by_app_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    placement_specific_facebook_discriminatory_practices\n    \n as \n    \n    placement_specific_facebook_discriminatory_practices\n    \n, \n    \n    \n    placement_specific_facebook_non_functional_landing_page\n    \n as \n    \n    placement_specific_facebook_non_functional_landing_page\n    \n, \n    \n    \n    placement_specific_facebook_use_of_our_brand_assets\n    \n as \n    \n    placement_specific_facebook_use_of_our_brand_assets\n    \n, \n    \n    \n    placement_specific_instagram_discriminatory_practices\n    \n as \n    \n    placement_specific_instagram_discriminatory_practices\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_time\n    \n as \n    \n    updated_time\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_history`"}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_set_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_set_history_tmp')),\n                staging_columns=get_ad_set_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_set_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__ad_set_history.sql", "original_file_path": "models/stg_facebook_ads__ad_set_history.sql", "name": "stg_facebook_ads__ad_set_history", "resource_type": "model", "alias": "stg_facebook_ads__ad_set_history", "checksum": {"name": "sha256", "checksum": "c2280a510952f0a75838ea19362c3b5ed1488df69d668ec60bd700200d26146a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history_tmp"], ["stg_facebook_ads__ad_set_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_set_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"]}, "description": "Each record in this table reflects a Facebook ad set.", "columns": {"ad_set_id": {"name": "ad_set_id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads__ad_set_history.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_set_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    adset_source_id\n    \n as \n    \n    adset_source_id\n    \n, \n    \n    \n    bid_amount\n    \n as \n    \n    bid_amount\n    \n, \n    \n    \n    bid_info_actions\n    \n as \n    \n    bid_info_actions\n    \n, \n    \n    \n    bid_strategy\n    \n as \n    \n    bid_strategy\n    \n, \n    \n    \n    billing_event\n    \n as \n    \n    billing_event\n    \n, \n    \n    \n    budget_remaining\n    \n as \n    \n    budget_remaining\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    configured_status\n    \n as \n    \n    configured_status\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    daily_budget\n    \n as \n    \n    daily_budget\n    \n, \n    \n    \n    destination_type\n    \n as \n    \n    destination_type\n    \n, \n    \n    \n    effective_status\n    \n as \n    \n    effective_status\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    instagram_actor_id\n    \n as \n    \n    instagram_actor_id\n    \n, \n    \n    \n    lifetime_budget\n    \n as \n    \n    lifetime_budget\n    \n, \n    \n    \n    lifetime_imps\n    \n as \n    \n    lifetime_imps\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    optimization_goal\n    \n as \n    \n    optimization_goal\n    \n, \n    \n    \n    promoted_object_application_id\n    \n as \n    \n    promoted_object_application_id\n    \n, \n    \n    \n    promoted_object_custom_event_type\n    \n as \n    \n    promoted_object_custom_event_type\n    \n, \n    \n    \n    promoted_object_event_id\n    \n as \n    \n    promoted_object_event_id\n    \n, \n    \n    \n    promoted_object_object_store_url\n    \n as \n    \n    promoted_object_object_store_url\n    \n, \n    \n    \n    promoted_object_offer_id\n    \n as \n    \n    promoted_object_offer_id\n    \n, \n    \n    \n    promoted_object_page_id\n    \n as \n    \n    promoted_object_page_id\n    \n, \n    \n    \n    promoted_object_pixel_id\n    \n as \n    \n    promoted_object_pixel_id\n    \n, \n    \n    \n    promoted_object_place_page_set_id\n    \n as \n    \n    promoted_object_place_page_set_id\n    \n, \n    \n    \n    promoted_object_product_catalog_id\n    \n as \n    \n    promoted_object_product_catalog_id\n    \n, \n    \n    \n    promoted_object_product_set_id\n    \n as \n    \n    promoted_object_product_set_id\n    \n, \n    \n    \n    recurring_budget_semantics\n    \n as \n    \n    recurring_budget_semantics\n    \n, \n    \n    \n    rf_prediction_id\n    \n as \n    \n    rf_prediction_id\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    targeting_age_max\n    \n as \n    \n    targeting_age_max\n    \n, \n    \n    \n    targeting_age_min\n    \n as \n    \n    targeting_age_min\n    \n, \n    \n    \n    targeting_app_install_state\n    \n as \n    \n    targeting_app_install_state\n    \n, \n    \n    \n    targeting_audience_network_positions\n    \n as \n    \n    targeting_audience_network_positions\n    \n, \n    \n    \n    targeting_college_years\n    \n as \n    \n    targeting_college_years\n    \n, \n    \n    \n    targeting_connections\n    \n as \n    \n    targeting_connections\n    \n, \n    \n    \n    targeting_device_platforms\n    \n as \n    \n    targeting_device_platforms\n    \n, \n    \n    \n    targeting_education_majors\n    \n as \n    \n    targeting_education_majors\n    \n, \n    \n    \n    targeting_education_schools\n    \n as \n    \n    targeting_education_schools\n    \n, \n    \n    \n    targeting_education_statuses\n    \n as \n    \n    targeting_education_statuses\n    \n, \n    \n    \n    targeting_effective_audience_network_positions\n    \n as \n    \n    targeting_effective_audience_network_positions\n    \n, \n    \n    \n    targeting_excluded_connections\n    \n as \n    \n    targeting_excluded_connections\n    \n, \n    \n    \n    targeting_excluded_publisher_categories\n    \n as \n    \n    targeting_excluded_publisher_categories\n    \n, \n    \n    \n    targeting_excluded_publisher_list_ids\n    \n as \n    \n    targeting_excluded_publisher_list_ids\n    \n, \n    \n    \n    targeting_excluded_user_device\n    \n as \n    \n    targeting_excluded_user_device\n    \n, \n    \n    \n    targeting_exclusions\n    \n as \n    \n    targeting_exclusions\n    \n, \n    \n    \n    targeting_facebook_positions\n    \n as \n    \n    targeting_facebook_positions\n    \n, \n    \n    \n    targeting_flexible_spec\n    \n as \n    \n    targeting_flexible_spec\n    \n, \n    \n    \n    targeting_friends_of_connections\n    \n as \n    \n    targeting_friends_of_connections\n    \n, \n    \n    \n    targeting_geo_locations_countries\n    \n as \n    \n    targeting_geo_locations_countries\n    \n, \n    \n    \n    targeting_geo_locations_location_types\n    \n as \n    \n    targeting_geo_locations_location_types\n    \n, \n    \n    \n    targeting_instagram_positions\n    \n as \n    \n    targeting_instagram_positions\n    \n, \n    \n    \n    targeting_locales\n    \n as \n    \n    targeting_locales\n    \n, \n    \n    \n    targeting_publisher_platforms\n    \n as \n    \n    targeting_publisher_platforms\n    \n, \n    \n    \n    targeting_user_adclusters\n    \n as \n    \n    targeting_user_adclusters\n    \n, \n    \n    \n    targeting_user_device\n    \n as \n    \n    targeting_user_device\n    \n, \n    \n    \n    targeting_user_os\n    \n as \n    \n    targeting_user_os\n    \n, \n    \n    \n    targeting_wireless_carrier\n    \n as \n    \n    targeting_wireless_carrier\n    \n, \n    \n    \n    targeting_work_employers\n    \n as \n    \n    targeting_work_employers\n    \n, \n    \n    \n    targeting_work_positions\n    \n as \n    \n    targeting_work_positions\n    \n, \n    \n    \n    updated_time\n    \n as \n    \n    updated_time\n    \n, \n    \n    \n    use_new_app_click\n    \n as \n    \n    use_new_app_click\n    \n\n\n\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_set_history`"}, "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": {"raw_sql": "select * from {{ var('ad_set_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_set_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_set_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "name": "stg_facebook_ads__ad_set_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__ad_set_history_tmp", "checksum": {"name": "sha256", "checksum": "bf29e75751968ebb5e1d9847450d391fb0d3aa4801f83750addf2d44803f338f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads_ad_set_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select * from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_ad_set_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_set_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": {"raw_sql": "select * from {{ var('basic_ad') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__basic_ad_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__basic_ad_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "name": "stg_facebook_ads__basic_ad_tmp", "resource_type": "model", "alias": "stg_facebook_ads__basic_ad_tmp", "checksum": {"name": "sha256", "checksum": "5a633882c5a43613ac72ce170100d435aa265b69fbc861654170386ae3f453b7"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads_basic_ad_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select * from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_basic_ad_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__basic_ad_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": {"raw_sql": "select * from {{ var('ad_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_history_tmp.sql", "name": "stg_facebook_ads__ad_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "66cb949cc32efc487c35c6ac049d29c76f364430c092c270a81ce248776e8435"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads_ad_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_ad_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__ad_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select * from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_ad_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": {"raw_sql": "select * from {{ var('campaign_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__campaign_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "name": "stg_facebook_ads__campaign_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "f713d6482194a258d74381dc5fee6600c579709da850acb3f90d6c4fd5e98ebc"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads_campaign_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select * from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__campaign_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": {"raw_sql": "select * from {{ var('creative_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__creative_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__creative_history_tmp.sql", "name": "stg_facebook_ads__creative_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "9739630c2ad58df6c8af45b975184033f33d253995965dbbeec7cdfb859356b9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads_creative_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_creative_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__creative_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select * from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_creative_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history_tmp`"}, "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": {"raw_sql": "select * from {{ var('account_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__account_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__account_history_tmp.sql", "name": "stg_facebook_ads__account_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "32a3a39947f962fa98285ef5da42266cc9597e61549d28313917111c3d05c4b8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads_account_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.facebook_ads_account_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/tmp/stg_facebook_ads__account_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select * from `dbt-package-testing`.`dbt_kristin_test`.`facebook_ads_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__account_history_tmp`"}, "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ ref('stg_facebook_ads__account_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "schema_test", "not_null_stg_facebook_ads__account_history_account_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "schema_test/not_null_stg_facebook_ads__account_history_account_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__account_history_account_id", "resource_type": "test", "alias": "not_null_stg_facebook_ads__account_history_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/schema_test/not_null_stg_facebook_ads__account_history_account_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__account_history`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ad_id", "model": "{{ ref('stg_facebook_ads__ad_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "schema_test", "not_null_stg_facebook_ads__ad_history_ad_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "schema_test/not_null_stg_facebook_ads__ad_history_ad_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_history_ad_id", "resource_type": "test", "alias": "not_null_stg_facebook_ads__ad_history_ad_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__ad_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/schema_test/not_null_stg_facebook_ads__ad_history_ad_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_history`\nwhere ad_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_id"}, "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ad_set_id", "model": "{{ ref('stg_facebook_ads__ad_set_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "schema_test", "not_null_stg_facebook_ads__ad_set_history_ad_set_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "schema_test/not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "resource_type": "test", "alias": "not_null_stg_facebook_ads__ad_set_history_ad_set_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__ad_set_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/schema_test/not_null_stg_facebook_ads__ad_set_history_ad_set_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__ad_set_history`\nwhere ad_set_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_set_id"}, "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('stg_facebook_ads__campaign_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "schema_test", "not_null_stg_facebook_ads__campaign_history_campaign_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "schema_test/not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__campaign_history_campaign_id", "resource_type": "test", "alias": "not_null_stg_facebook_ads__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/schema_test/not_null_stg_facebook_ads__campaign_history_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id"}, "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ ref('stg_facebook_ads__creative_history') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_source", "schema_test", "not_null_stg_facebook_ads__creative_history_creative_id"], "unique_id": "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "schema_test/not_null_stg_facebook_ads__creative_history_creative_id.sql", "original_file_path": "models/stg_facebook_ads.yml", "name": "not_null_stg_facebook_ads__creative_history_creative_id", "resource_type": "test", "alias": "not_null_stg_facebook_ads__creative_history_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/facebook_ads_source/models/stg_facebook_ads.yml/schema_test/not_null_stg_facebook_ads__creative_history_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`stg_facebook_ads__creative_history`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id"}, "model.microsoft_ads.microsoft_ads__ad_adapter": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('microsoft_ads_ad_performance_daily_report') }}\n\n), ads as (\n\n    select *\n    from {{ var('microsoft_ads_ad_history') }}\n    where is_most_recent_version = True\n\n), ad_groups as (\n\n    select *\n    from {{ var('microsoft_ads_ad_group_history') }}\n    where is_most_recent_version = True\n\n), campaigns as (\n\n    select *\n    from {{ var('microsoft_ads_campaign_history') }}\n    where is_most_recent_version = True\n\n), accounts as (\n\n    select *\n    from {{ var('microsoft_ads_account_history') }}\n    where is_most_recent_version = True\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        ads.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    {{ dbt_utils.group_by(15) }}\n\n)\n\nselect *\nfrom joined", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads", "microsoft_ads__ad_adapter"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_adapter", "package_name": "microsoft_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads", "path": "microsoft_ads__ad_adapter.sql", "original_file_path": "models/microsoft_ads__ad_adapter.sql", "name": "microsoft_ads__ad_adapter", "resource_type": "model", "alias": "microsoft_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "60fe48771ded6b0f53447054ef1921ab4ca9ddb602a9c03a747625a0549ee25a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_microsoft_ads__ad_performance_daily_report"], ["stg_microsoft_ads__ad_history"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "description": "Each record in this table represents the daily performance of ads at the ad and url level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads/models/microsoft_ads__ad_adapter.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with report as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_performance_daily_report`\n\n), ads as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_history`\n    where is_most_recent_version = True\n\n), ad_groups as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__ad_group_history`\n    where is_most_recent_version = True\n\n), campaigns as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__campaign_history`\n    where is_most_recent_version = True\n\n), accounts as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_microsoft_ads__account_history`\n    where is_most_recent_version = True\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        ads.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__ad_adapter`"}, "model.microsoft_ads.microsoft_ads__ad_group_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads", "microsoft_ads__ad_group_report"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_group_report", "package_name": "microsoft_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads", "path": "microsoft_ads__ad_group_report.sql", "original_file_path": "models/microsoft_ads__ad_group_report.sql", "name": "microsoft_ads__ad_group_report", "resource_type": "model", "alias": "microsoft_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "089a8787c8381d8eb6bed194a491d594dab7f25677f11f887574ae12b22df22b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the ad group level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads/models/microsoft_ads__ad_group_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__ad_group_report`"}, "model.microsoft_ads.microsoft_ads__account_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads", "microsoft_ads__account_report"], "unique_id": "model.microsoft_ads.microsoft_ads__account_report", "package_name": "microsoft_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads", "path": "microsoft_ads__account_report.sql", "original_file_path": "models/microsoft_ads__account_report.sql", "name": "microsoft_ads__account_report", "resource_type": "model", "alias": "microsoft_ads__account_report", "checksum": {"name": "sha256", "checksum": "d0e51d24304c862c15a16157de8972a3f21d97a06c47ee62d1bd7dca5d75096d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads/models/microsoft_ads__account_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__account_report`"}, "model.microsoft_ads.microsoft_ads__campaign_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom aggregated", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["microsoft_ads", "microsoft_ads__campaign_report"], "unique_id": "model.microsoft_ads.microsoft_ads__campaign_report", "package_name": "microsoft_ads", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads", "path": "microsoft_ads__campaign_report.sql", "original_file_path": "models/microsoft_ads__campaign_report.sql", "name": "microsoft_ads__campaign_report", "resource_type": "model", "alias": "microsoft_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "f0d1fe2c5aaafd12ae2683b826651bf29dc297421d55d5956824eda828657ba4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": "target/compiled/microsoft_ads/models/microsoft_ads__campaign_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__ad_adapter`\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`microsoft_ads__campaign_report`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_history_tmp')),\n                staging_columns=get_line_item_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by line_item_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__line_item_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__line_item_history.sql", "original_file_path": "models/stg_twitter_ads__line_item_history.sql", "name": "stg_twitter_ads__line_item_history", "resource_type": "model", "alias": "stg_twitter_ads__line_item_history", "checksum": {"name": "sha256", "checksum": "f1ac40767d76fd9083add8db3cba3698ec596f1e8e10d8d44e43f33c6af44644"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__line_item_history_tmp"], ["stg_twitter_ads__line_item_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_line_item_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"]}, "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__line_item_history.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__line_item_history_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    advertiser_domain\n    \n as \n    \n    advertiser_domain\n    \n, \n    \n    \n    advertiser_user_id\n    \n as \n    \n    advertiser_user_id\n    \n, \n    \n    \n    automatically_select_bid\n    \n as \n    \n    automatically_select_bid\n    \n, \n    \n    \n    bid_amount_local_micro\n    \n as \n    \n    bid_amount_local_micro\n    \n, \n    \n    \n    bid_type\n    \n as \n    \n    bid_type\n    \n, \n    \n    \n    bid_unit\n    \n as \n    \n    bid_unit\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    charge_by\n    \n as \n    \n    charge_by\n    \n, \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    creative_source\n    \n as \n    \n    creative_source\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    deleted\n    \n as is_deleted , \n    \n    \n    end_time\n    \n as end_timestamp , \n    \n    \n    entity_status\n    \n as \n    \n    entity_status\n    \n, \n    \n    \n    id\n    \n as line_item_id , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    objective\n    \n as \n    \n    objective\n    \n, \n    \n    \n    optimization\n    \n as \n    \n    optimization\n    \n, \n    \n    \n    primary_web_event_tag\n    \n as \n    \n    primary_web_event_tag\n    \n, \n    \n    \n    product_type\n    \n as \n    \n    product_type\n    \n, \n    \n    \n    start_time\n    \n as start_timestamp , \n    \n    \n    target_cpa_local_micro\n    \n as \n    \n    target_cpa_local_micro\n    \n, \n    \n    \n    total_budget_amount_local_micro\n    \n as \n    \n    total_budget_amount_local_micro\n    \n, \n    \n    \n    updated_at\n    \n as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by line_item_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__line_item_history`"}, "model.twitter_ads_source.stg_twitter_ads__campaign_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__campaign_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__campaign_history.sql", "original_file_path": "models/stg_twitter_ads__campaign_history.sql", "name": "stg_twitter_ads__campaign_history", "resource_type": "model", "alias": "stg_twitter_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "8ca02f8ef1f5cc8cf28b0afb6343df112654b02eeecd724209196b6dbd2e1514"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__campaign_history_tmp"], ["stg_twitter_ads__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"]}, "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currently all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "standard_delivery": {"name": "standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__campaign_history.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__campaign_history_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    daily_budget_amount_local_micro\n    \n as \n    \n    daily_budget_amount_local_micro\n    \n, \n    \n    \n    deleted\n    \n as is_deleted , \n    \n    \n    duration_in_days\n    \n as \n    \n    duration_in_days\n    \n, \n    \n    \n    end_time\n    \n as end_timestamp , \n    \n    \n    entity_status\n    \n as \n    \n    entity_status\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    funding_instrument_id\n    \n as \n    \n    funding_instrument_id\n    \n, \n    \n    \n    id\n    \n as campaign_id , \n    \n    \n    name\n    \n as campaign_name , \n    \n    \n    servable\n    \n as is_servable , \n    \n    \n    standard_delivery\n    \n as \n    \n    standard_delivery\n    \n, \n    \n    \n    start_time\n    \n as start_timestamp , \n    \n    \n    total_budget_amount_local_micro\n    \n as \n    \n    total_budget_amount_local_micro\n    \n, \n    \n    \n    updated_at\n    \n as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__campaign_history`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_report_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_report_tmp')),\n                staging_columns=get_promoted_tweet_report_columns()\n            )\n        }}\n\n    from source\n\n), spend_calc as (\n\n    select\n        *,\n        round(spend_micro / 1000000.0,2) as spend\n    from renamed\n\n)\n\nselect * from spend_calc", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_report"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_report.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_report.sql", "name": "stg_twitter_ads__promoted_tweet_report", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_report", "checksum": {"name": "sha256", "checksum": "5fb2632f5efb7d76f9560f4d5dd51f9dbdf196e6cd6d6dcd19f5f1cb64607dae"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report_tmp"], ["stg_twitter_ads__promoted_tweet_report_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"]}, "description": "Each record represents the performance of a promoted tweet on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend (in micros) for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.BD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__promoted_tweet_report.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_report_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    billed_charge_local_micro\n    \n as spend_micro , \n    \n    \n    clicks\n    \n as \n    \n    clicks\n    \n, \n    \n    \n    date\n    \n as date_day , \n    \n    \n    impressions\n    \n as \n    \n    impressions\n    \n, \n    \n    \n    promoted_tweet_id\n    \n as \n    \n    promoted_tweet_id\n    \n, \n    \n    \n    url_clicks\n    \n as \n    \n    url_clicks\n    \n\n\n\n\n    from source\n\n), spend_calc as (\n\n    select\n        *,\n        round(spend_micro / 1000000.0,2) as spend\n    from renamed\n\n)\n\nselect * from spend_calc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_report`"}, "model.twitter_ads_source.stg_twitter_ads__account_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__account_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__account_history.sql", "original_file_path": "models/stg_twitter_ads__account_history.sql", "name": "stg_twitter_ads__account_history", "resource_type": "model", "alias": "stg_twitter_ads__account_history", "checksum": {"name": "sha256", "checksum": "c8a3ddcfbffbf006eab6c6a5623631db378ec6ffb3c154555b91afad266cf137"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__account_history_tmp"], ["stg_twitter_ads__account_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "model.twitter_ads_source.stg_twitter_ads__account_history_tmp"]}, "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accoutns.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switch_at": {"name": "timezone_switch_at", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__account_history.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__account_history_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    approval_status\n    \n as \n    \n    approval_status\n    \n, \n    \n    \n    business_id\n    \n as \n    \n    business_id\n    \n, \n    \n    \n    business_name\n    \n as \n    \n    business_name\n    \n, \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    deleted\n    \n as is_deleted , \n    \n    \n    id\n    \n as account_id , \n    \n    \n    industry_type\n    \n as \n    \n    industry_type\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    salt\n    \n as \n    \n    salt\n    \n, \n    \n    \n    timezone\n    \n as \n    \n    timezone\n    \n, \n    \n    \n    timezone_switch_at\n    \n as \n    \n    timezone_switch_at\n    \n, \n    \n    \n    updated_at\n    \n as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__account_history`"}, "model.twitter_ads_source.stg_twitter_ads__tweet_url": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet_url_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__tweet_url_tmp')),\n                staging_columns=get_tweet_url_columns()\n            )\n        }}\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        {{ dbt_utils.split_part('expanded_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('expanded_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('expanded_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_term') }} as utm_term\n    from renamed\n\n)\n\nselect * from url_fields", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__tweet_url"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__tweet_url.sql", "original_file_path": "models/stg_twitter_ads__tweet_url.sql", "name": "stg_twitter_ads__tweet_url", "resource_type": "model", "alias": "stg_twitter_ads__tweet_url", "checksum": {"name": "sha256", "checksum": "63209d65decd1dbba6b5e8a679297014e165084a010e835feb3dc1711a4917c5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__tweet_url_tmp"], ["stg_twitter_ads__tweet_url_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_tweet_url_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"]}, "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the URL within the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__tweet_url.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__tweet_url_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    display_url\n    \n as \n    \n    display_url\n    \n, \n    \n    \n    expanded_url\n    \n as \n    \n    expanded_url\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    indices\n    \n as \n    \n    indices\n    \n, \n    \n    \n    tweet_id\n    \n as \n    \n    tweet_id\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        \n\n    split(\n        expanded_url,\n        '?'\n        )[safe_offset(0)]\n\n as base_url,\n        \n    safe_cast(\n\n    split(\n        \n\n    split(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        )[safe_offset(0)]\n\n,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_host,\n        '/' || \n    safe_cast(\n\n    split(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ) = 0 \n        then ''\n    else \n        substr(\n            \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n            -1 * (\n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n\n    )-coalesce(\n            nullif(\n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '/'\n        \n    ), 0),\n            \n\n    strpos(\n        \n\n    replace(\n        \n\n    replace(\n        expanded_url,\n        'http://',\n        ''\n    )\n    \n\n,\n        'https://',\n        ''\n    )\n    \n\n,\n        '?'\n        \n    ) - 1\n            ))\n        )\n    end,\n        '?'\n        )[safe_offset(0)]\n\n as \n    string\n)\n as url_path,\n        nullif(\n\n    split(\n        \n\n    split(\n        expanded_url,\n        'utm_source='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_source,\n        nullif(\n\n    split(\n        \n\n    split(\n        expanded_url,\n        'utm_medium='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_medium,\n        nullif(\n\n    split(\n        \n\n    split(\n        expanded_url,\n        'utm_campaign='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_campaign,\n        nullif(\n\n    split(\n        \n\n    split(\n        expanded_url,\n        'utm_content='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_content,\n        nullif(\n\n    split(\n        \n\n    split(\n        expanded_url,\n        'utm_term='\n        )[safe_offset(1)]\n\n,\n        '&'\n        )[safe_offset(0)]\n\n,'') as utm_term\n    from renamed\n\n)\n\nselect * from url_fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__tweet_url`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_history_tmp')),\n                staging_columns=get_promoted_tweet_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by promoted_tweet_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_history.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_history.sql", "name": "stg_twitter_ads__promoted_tweet_history", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_history", "checksum": {"name": "sha256", "checksum": "3736846d80ebd96251cc90dbe5133f3bd439990dc6d8024d268c137cec121f30"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_history_tmp"], ["stg_twitter_ads__promoted_tweet_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"]}, "description": "TEach record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.BD", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": "target/compiled/twitter_ads_source/models/stg_twitter_ads__promoted_tweet_history.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "with source as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_history_tmp`\n\n),\n\nrenamed as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    approval_status\n    \n as \n    \n    approval_status\n    \n, \n    \n    \n    created_at\n    \n as created_timestamp , \n    \n    \n    deleted\n    \n as is_deleted , \n    \n    \n    entity_status\n    \n as \n    \n    entity_status\n    \n, \n    \n    \n    id\n    \n as promoted_tweet_id , \n    \n    \n    line_item_id\n    \n as \n    \n    line_item_id\n    \n, \n    \n    \n    tweet_id\n    \n as \n    \n    tweet_id\n    \n, \n    \n    \n    updated_at\n    \n as updated_timestamp \n\n\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by promoted_tweet_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_history`"}, "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": {"raw_sql": "select *\nfrom {{ var('tweet_url') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__tweet_url_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__tweet_url_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "name": "stg_twitter_ads__tweet_url_tmp", "resource_type": "model", "alias": "stg_twitter_ads__tweet_url_tmp", "checksum": {"name": "sha256", "checksum": "a3a5504a33848aa67f78a84a61c25b21c0afd6de09849963d1031c8f003b3e2d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter_tweet_url_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_tweet_url_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter_tweet_url_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__tweet_url_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_report') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_report_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_report_tmp", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_report_tmp", "checksum": {"name": "sha256", "checksum": "bee4be3006388dac42d90797172a8b1060fd93c4afacff61aa61c0f48881d922"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter_promoted_tweet_report_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter_promoted_tweet_report_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_report_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": {"raw_sql": "select *\nfrom {{ var('line_item_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__line_item_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__line_item_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "name": "stg_twitter_ads__line_item_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__line_item_history_tmp", "checksum": {"name": "sha256", "checksum": "50568a1b16de7a4a21448a595d2dac8a5ef6cc53134150ba5ccca4a9ce8ac3f7"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter_line_item_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_line_item_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter_line_item_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__line_item_history_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__campaign_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "name": "stg_twitter_ads__campaign_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "d695c134485444137d663f41732085a5cfa81de49f3ec2676e9f8e58f1c62c02"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter_campaign_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_campaign_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter_campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__campaign_history_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__account_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__account_history_tmp.sql", "name": "stg_twitter_ads__account_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "6151f500892f8291a211d3042fa8a914d37cc5bd4934ec2821bf61b6391f9b3a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter_account_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_account_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__account_history_tmp.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter_account_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__account_history_tmp`"}, "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_history') }}", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_history_tmp", "checksum": {"name": "sha256", "checksum": "318c404eef398ff876b5c1aeed0868355f7adc9f8a87e8e253a21d9a111d67e9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter_promoted_tweet_history_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "deferred": false, "unrendered_config": {}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`dbt_kristin_test`.`twitter_promoted_tweet_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`stg_twitter_ads__promoted_tweet_history_tmp`"}, "model.linkedin.linkedin__campaign_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_id,\n        campaign_name,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin", "linkedin__campaign_ad_report"], "unique_id": "model.linkedin.linkedin__campaign_ad_report", "package_name": "linkedin", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin", "path": "linkedin__campaign_ad_report.sql", "original_file_path": "models/linkedin__campaign_ad_report.sql", "name": "linkedin__campaign_ad_report", "resource_type": "model", "alias": "linkedin__campaign_ad_report", "checksum": {"name": "sha256", "checksum": "987d650d267a6f163aaa4bc1dd15618debfda818ceace21c57488a13d7271709"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": "target/compiled/linkedin/models/linkedin__campaign_ad_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_id,\n        campaign_name,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin__campaign_ad_report`"}, "model.linkedin.linkedin__account_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin", "linkedin__account_ad_report"], "unique_id": "model.linkedin.linkedin__account_ad_report", "package_name": "linkedin", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin", "path": "linkedin__account_ad_report.sql", "original_file_path": "models/linkedin__account_ad_report.sql", "name": "linkedin__account_ad_report", "resource_type": "model", "alias": "linkedin__account_ad_report", "checksum": {"name": "sha256", "checksum": "65c5ba15940b30007db39de301719d32878a76f4d856c51481b5b0569eef4480"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the account level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": "target/compiled/linkedin/models/linkedin__account_ad_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`\n\n), grouped as (\n\n    select \n        date_day,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin__account_ad_report`"}, "model.linkedin.linkedin__campaign_group_ad_report": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom grouped", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin", "linkedin__campaign_group_ad_report"], "unique_id": "model.linkedin.linkedin__campaign_group_ad_report", "package_name": "linkedin", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin", "path": "linkedin__campaign_group_ad_report.sql", "original_file_path": "models/linkedin__campaign_group_ad_report.sql", "name": "linkedin__campaign_group_ad_report", "resource_type": "model", "alias": "linkedin__campaign_group_ad_report", "checksum": {"name": "sha256", "checksum": "e89ed71c20435b9d189feeb861bf042d60fdbfe2dfa70e255d7e745e7dc44758"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign group level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": "target/compiled/linkedin/models/linkedin__campaign_group_ad_report.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with adapter as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    group by 1,2,3,4,5\n\n)\n\nselect *\nfrom grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin__campaign_group_ad_report`"}, "model.linkedin.linkedin__ad_adapter": {"raw_sql": "with metrics as (\n\n    select *\n    from {{ var('ad_analytics_by_creative') }}\n\n), creatives as (\n\n    select *\n    from {{ var('creative_history') }}\n\n), campaigns as (\n    \n    select *\n    from {{ var('campaign_history') }}\n\n), campaign_groups as (\n    \n    select *\n    from {{ var('campaign_group_history') }}\n\n), accounts as (\n    \n    select *\n    from {{ var('account_history') }}\n\n), joined as (\n\n    select\n        metrics.creative_id,\n        metrics.date_day,\n        metrics.clicks,\n        metrics.impressions,\n        metrics.cost,\n        metrics.daily_creative_id,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaign_groups.campaign_group_name,\n        campaign_groups.campaign_group_id,\n        accounts.account_name,\n        accounts.account_id\n    from metrics\n    left join creatives\n        on metrics.creative_id = creatives.creative_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= creatives.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(creatives.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join campaigns\n        on creatives.campaign_id = campaigns.campaign_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= campaigns.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(campaigns.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join campaign_groups\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= campaign_groups.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(campaign_groups.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join accounts\n        on campaign_groups.account_id = accounts.account_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= accounts.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(accounts.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n\n)\n\nselect *\nfrom joined", "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin", "linkedin__ad_adapter"], "unique_id": "model.linkedin.linkedin__ad_adapter", "package_name": "linkedin", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin", "path": "linkedin__ad_adapter.sql", "original_file_path": "models/linkedin__ad_adapter.sql", "name": "linkedin__ad_adapter", "resource_type": "model", "alias": "linkedin__ad_adapter", "checksum": {"name": "sha256", "checksum": "49ffcb527df4594436c04523f54eb331b5e12682ff203428de8b0b534e82ecfb"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative"], ["stg_linkedin__creative_history"], ["stg_linkedin__campaign_history"], ["stg_linkedin__campaign_group_history"], ["stg_linkedin__account_history"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.timestamp_add", "macro.dbt_utils.current_timestamp"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin__creative_history", "model.linkedin_source.stg_linkedin__campaign_history", "model.linkedin_source.stg_linkedin__campaign_group_history", "model.linkedin_source.stg_linkedin__account_history"]}, "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"daily_creative_id": {"name": "daily_creative_id", "description": "A unique key, a combination of creative_id and date_day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": "target/compiled/linkedin/models/linkedin__ad_adapter.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with metrics as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__ad_analytics_by_creative`\n\n), creatives as (\n\n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__creative_history`\n\n), campaigns as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_history`\n\n), campaign_groups as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__campaign_group_history`\n\n), accounts as (\n    \n    select *\n    from `dbt-package-testing`.`dbt_kristin_test`.`stg_linkedin__account_history`\n\n), joined as (\n\n    select\n        metrics.creative_id,\n        metrics.date_day,\n        metrics.clicks,\n        metrics.impressions,\n        metrics.cost,\n        metrics.daily_creative_id,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaign_groups.campaign_group_name,\n        campaign_groups.campaign_group_id,\n        accounts.account_name,\n        accounts.account_id\n    from metrics\n    left join creatives\n        on metrics.creative_id = creatives.creative_id\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n >= creatives.valid_from\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n <= coalesce(creatives.valid_to, \n\n        timestamp_add(\n    current_timestamp\n, interval  1 day)\n\n)\n    left join campaigns\n        on creatives.campaign_id = campaigns.campaign_id\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n >= campaigns.valid_from\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n <= coalesce(campaigns.valid_to, \n\n        timestamp_add(\n    current_timestamp\n, interval  1 day)\n\n)\n    left join campaign_groups\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n >= campaign_groups.valid_from\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n <= coalesce(campaign_groups.valid_to, \n\n        timestamp_add(\n    current_timestamp\n, interval  1 day)\n\n)\n    left join accounts\n        on campaign_groups.account_id = accounts.account_id\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n >= accounts.valid_from\n        and \n\n        timestamp_add(metrics.date_day, interval  1 day)\n\n <= coalesce(accounts.valid_to, \n\n        timestamp_add(\n    current_timestamp\n, interval  1 day)\n\n)\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`"}, "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "daily_creative_id", "model": "{{ ref('linkedin__ad_adapter') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin", "schema_test", "unique_linkedin__ad_adapter_daily_creative_id"], "unique_id": "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id", "package_name": "linkedin", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin", "path": "schema_test/unique_linkedin__ad_adapter_daily_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "unique_linkedin__ad_adapter_daily_creative_id", "resource_type": "test", "alias": "unique_linkedin__ad_adapter_daily_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin/models/linkedin.yml/schema_test/unique_linkedin__ad_adapter_daily_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        daily_creative_id\n\n    from `dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`\n    where daily_creative_id is not null\n    group by daily_creative_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id"}, "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "daily_creative_id", "model": "{{ ref('linkedin__ad_adapter') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin", "schema_test", "not_null_linkedin__ad_adapter_daily_creative_id"], "unique_id": "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id", "package_name": "linkedin", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin", "path": "schema_test/not_null_linkedin__ad_adapter_daily_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin__ad_adapter_daily_creative_id", "resource_type": "test", "alias": "not_null_linkedin__ad_adapter_daily_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin/models/linkedin.yml/schema_test/not_null_linkedin__ad_adapter_daily_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`\nwhere daily_creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "daily_creative_id"}, "test.linkedin.not_null_linkedin__ad_adapter_creative_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "creative_id", "model": "{{ ref('linkedin__ad_adapter') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["linkedin", "schema_test", "not_null_linkedin__ad_adapter_creative_id"], "unique_id": "test.linkedin.not_null_linkedin__ad_adapter_creative_id", "package_name": "linkedin", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin", "path": "schema_test/not_null_linkedin__ad_adapter_creative_id.sql", "original_file_path": "models/linkedin.yml", "name": "not_null_linkedin__ad_adapter_creative_id", "resource_type": "test", "alias": "not_null_linkedin__ad_adapter_creative_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/linkedin/models/linkedin.yml/schema_test/not_null_linkedin__ad_adapter_creative_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`dbt_kristin_test`.`linkedin__ad_adapter`\nwhere creative_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "creative_id"}}, "sources": {"source.microsoft_ads_source.microsoft_ads.ad_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft ad.", "columns": {"id": {"name": "id", "description": "The ID of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The full URL that the ad links to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`bingads`.`ad_history`"}, "source.microsoft_ads_source.microsoft_ads.campaign_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.campaign_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "campaign_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft campaign.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`bingads`.`campaign_history`"}, "source.microsoft_ads_source.microsoft_ads.ad_group_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_group_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_group_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_group_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft ad group.", "columns": {"id": {"name": "id", "description": "The ID of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_time": {"name": "modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`bingads`.`ad_group_history`"}, "source.microsoft_ads_source.microsoft_ads.account_history": {"fqn": ["microsoft_ads_source", "microsoft_ads", "account_history"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.account_history", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "account_history", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table represents a version of a Microsoft account.", "columns": {"id": {"name": "id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`bingads`.`account_history`"}, "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": {"fqn": ["microsoft_ads_source", "microsoft_ads", "ad_performance_daily_report"], "database": "dbt-package-testing", "schema": "bingads", "unique_id": "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/microsoft_ads_source", "path": "models/src_microsoft_ads.yml", "original_file_path": "models/src_microsoft_ads.yml", "name": "ad_performance_daily_report", "source_name": "microsoft_ads", "source_description": "", "loader": "", "identifier": "ad_performance_daily_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance of a Microsoft ad.", "columns": {"date": {"name": "date", "description": "The date of the ad performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency that spend and other metrics are reported in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of advertising spend that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`bingads`.`ad_performance_daily_report`"}, "source.linkedin_source.linkedin.ad_analytics_by_creative": {"fqn": ["linkedin_source", "linkedin", "ad_analytics_by_creative"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.ad_analytics_by_creative", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "ad_analytics_by_creative", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "ad_analytics_by_creative", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_local_currency": {"name": "cost_in_local_currency", "description": "The cost of the ads in the local currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_in_usd": {"name": "cost_in_usd", "description": "The cost of the ads in the USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`ad_analytics_by_creative`"}, "source.linkedin_source.linkedin.creative_history": {"fqn": ["linkedin_source", "linkedin", "creative_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.creative_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "creative_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a 'version' of a creative.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign the creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`creative_history`"}, "source.linkedin_source.linkedin.campaign_history": {"fqn": ["linkedin_source", "linkedin", "campaign_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.campaign_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "campaign_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a 'version' of a campaign.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "The ID of the campaign group the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`campaign_history`"}, "source.linkedin_source.linkedin.campaign_group_history": {"fqn": ["linkedin_source", "linkedin", "campaign_group_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.campaign_group_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "campaign_group_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "campaign_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a 'version' of a campaign group.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign group belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`campaign_group_history`"}, "source.linkedin_source.linkedin.account_history": {"fqn": ["linkedin_source", "linkedin", "account_history"], "database": "dbt-package-testing", "schema": "linkedin_ads", "unique_id": "source.linkedin_source.linkedin.account_history", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "models/src_linkedin.yml", "original_file_path": "models/src_linkedin.yml", "name": "account_history", "source_name": "linkedin", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a 'version' of an account.", "columns": {"id": {"name": "id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`linkedin_ads`.`account_history`"}, "source.google_ads_source.adwords.final_url_performance": {"fqn": ["google_ads_source", "adwords", "final_url_performance"], "database": "dbt-package-testing", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.final_url_performance", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "final_url_performance", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "final_url_performance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents the performance of a final url at the ad group level.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_descriptive_name": {"name": "account_descriptive_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_final_url": {"name": "effective_final_url", "description": "Effective final URL of the impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`adwords`.`final_url_performance`"}, "source.google_ads_source.adwords.click_performance": {"fqn": ["google_ads_source", "adwords", "click_performance"], "database": "dbt-package-testing", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.click_performance", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "click_performance", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "click_performance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "The Click Performance report includes stats aggregated at each click level.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_descriptive_name": {"name": "account_descriptive_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gcl_id": {"name": "gcl_id", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`adwords`.`click_performance`"}, "source.google_ads_source.adwords.criteria_performance": {"fqn": ["google_ads_source", "adwords", "criteria_performance"], "database": "dbt-package-testing", "schema": "adwords", "unique_id": "source.google_ads_source.adwords.criteria_performance", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "models/src_google_ads.yml", "original_file_path": "models/src_google_ads.yml", "name": "criteria_performance", "source_name": "adwords", "source_description": "", "loader": "Fivetran", "identifier": "criteria_performance", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "The Criteria Performance report includes statistics aggregated at the ad group criteria level, one row per ad group and criteria combination.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_descriptive_name": {"name": "account_descriptive_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria": {"name": "criteria", "description": "Descriptive string for the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_destination_url": {"name": "criteria_destination_url", "description": "Destination URL of the criterion that triggered ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_type": {"name": "criteria_type", "description": "The type of the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the main object of this row.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`adwords`.`criteria_performance`"}, "source.pinterest_source.pinterest_ads.pin_promotion_report": {"fqn": ["pinterest_source", "pinterest_ads", "pin_promotion_report"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.pin_promotion_report", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "pin_promotion_report", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "pin_promotion_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents the daily performance of a Pinterest Pin promotion.", "columns": {"date": {"name": "date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_1": {"name": "impression_1", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_2": {"name": "impression_2", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_1": {"name": "clickthrough_1", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clickthrough_2": {"name": "clickthrough_2", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_in_micro_dollar": {"name": "spend_in_micro_dollar", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`pin_promotion_report`"}, "source.pinterest_source.pinterest_ads.pin_promotion_history": {"fqn": ["pinterest_source", "pinterest_ads", "pin_promotion_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.pin_promotion_history", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "pin_promotion_history", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "pin_promotion_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Pin promotion.", "columns": {"id": {"name": "id", "description": "Pin promotion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Pin promotion ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Pin creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_id": {"name": "pin_id", "description": "Original pin ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`pin_promotion_history`"}, "source.pinterest_source.pinterest_ads.campaign_history": {"fqn": ["pinterest_source", "pinterest_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.campaign_history", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "campaign_history", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Campaign.", "columns": {"id": {"name": "id", "description": "Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Campaign creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Campaign. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`campaign_history`"}, "source.pinterest_source.pinterest_ads.ad_group_history": {"fqn": ["pinterest_source", "pinterest_ads", "ad_group_history"], "database": "dbt-package-testing", "schema": "pinterest_ads", "unique_id": "source.pinterest_source.pinterest_ads.ad_group_history", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "models/src_pinterest_ads.yml", "original_file_path": "models/src_pinterest_ads.yml", "name": "ad_group_history", "source_name": "pinterest_ads", "source_description": "", "loader": "", "identifier": "ad_group_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a version of a Pinterest Ad Group.", "columns": {"id": {"name": "id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Parent Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Ad group. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`pinterest_ads`.`ad_group_history`"}, "source.facebook_ads_source.facebook_ads.account_history": {"fqn": ["facebook_ads_source", "facebook_ads", "account_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.account_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "account_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad account.", "columns": {"id": {"name": "id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`account_history`"}, "source.facebook_ads_source.facebook_ads.ad_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.ad_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "ad_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad.", "columns": {"id": {"name": "id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`ad_history`"}, "source.facebook_ads_source.facebook_ads.ad_set_history": {"fqn": ["facebook_ads_source", "facebook_ads", "ad_set_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.ad_set_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "ad_set_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "ad_set_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook ad set.", "columns": {"id": {"name": "id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`ad_set_history`"}, "source.facebook_ads_source.facebook_ads.basic_ad": {"fqn": ["facebook_ads_source", "facebook_ads", "basic_ad"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.basic_ad", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "basic_ad", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "basic_ad", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inline_link_clicks": {"name": "inline_link_clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`basic_ad`"}, "source.facebook_ads_source.facebook_ads.campaign_history": {"fqn": ["facebook_ads_source", "facebook_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.campaign_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "campaign_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook campaign.", "columns": {"id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`campaign_history`"}, "source.facebook_ads_source.facebook_ads.creative_history": {"fqn": ["facebook_ads_source", "facebook_ads", "creative_history"], "database": "dbt-package-testing", "schema": "facebook_ads", "unique_id": "source.facebook_ads_source.facebook_ads.creative_history", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "models/src_facebook_ads.yml", "original_file_path": "models/src_facebook_ads.yml", "name": "creative_history", "source_name": "facebook_ads", "source_description": "", "loader": "Fivetran", "identifier": "creative_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record in this table reflects a version of a Facebook creative.", "columns": {"page_link": {"name": "page_link", "description": "URL destination of Facebook ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_page_link": {"name": "template_page_link", "description": "URL destination of Facebook dynamic ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`facebook_ads`.`creative_history`"}, "source.twitter_ads_source.twitter_ads.account_history": {"fqn": ["twitter_ads_source", "twitter_ads", "account_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.account_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "account_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "account_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accoutns.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switch_at": {"name": "timezone_switch_at", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`account_history`"}, "source.twitter_ads_source.twitter_ads.campaign_history": {"fqn": ["twitter_ads_source", "twitter_ads", "campaign_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.campaign_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "campaign_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currently all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "servable": {"name": "servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "standard_delivery": {"name": "standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`campaign_history`"}, "source.twitter_ads_source.twitter_ads.line_item_history": {"fqn": ["twitter_ads_source", "twitter_ads", "line_item_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.line_item_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "line_item_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "line_item_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`line_item_history`"}, "source.twitter_ads_source.twitter_ads.promoted_tweet_history": {"fqn": ["twitter_ads_source", "twitter_ads", "promoted_tweet_history"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.promoted_tweet_history", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "promoted_tweet_history", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "promoted_tweet_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`promoted_tweet_history`"}, "source.twitter_ads_source.twitter_ads.tweet_url": {"fqn": ["twitter_ads_source", "twitter_ads", "tweet_url"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.tweet_url", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "tweet_url", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "tweet_url", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the URL within the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`tweet_url`"}, "source.twitter_ads_source.twitter_ads.promoted_tweet_report": {"fqn": ["twitter_ads_source", "twitter_ads", "promoted_tweet_report"], "database": "dbt-package-testing", "schema": "twitter_ads", "unique_id": "source.twitter_ads_source.twitter_ads.promoted_tweet_report", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "models/src_twitter_ads.yml", "original_file_path": "models/src_twitter_ads.yml", "name": "promoted_tweet_report", "source_name": "twitter_ads", "source_description": "", "loader": "", "identifier": "promoted_tweet_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Each record represents the performance of a promoted tweet on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billed_charge_local_micro": {"name": "billed_charge_local_micro", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.BD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`twitter_ads`.`promoted_tweet_report`"}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {# there should be exactly one ref or exactly one source #}\n  {% set destination = this.incorporate(type='table') %}\n\n  {% set dependency_type = none %}\n  {% if (model.refs | length) == 1 and (model.sources | length) == 0 %}\n    {% set dependency_type = 'ref' %}\n  {% elif (model.refs | length) == 0 and (model.sources | length) == 1 %}\n    {% set dependency_type = 'source' %}\n  {% else %}\n    {% set msg %}\n        Expected exactly one ref or exactly one source, instead got {{ model.refs | length }} models and {{ model.sources | length }} sources.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% if dependency_type == 'ref' %}\n    {% set src =  ref(*model.refs[0]) %}\n  {% else %}\n    {% set src =  source(*model.sources[0]) %}\n  {% endif %}\n\n  {%- set result_str = adapter.copy_table(\n      src,\n      destination,\n      config.get('copy_materialization', 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n  {%- set partition_type =\n      'date' if partition_by.data_type in ('timestamp, datetime')\n      else partition_by.data_type -%}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }};\n\n      set _dbt_max_partition = (\n          select max({{ partition_by.field }}) from {{ this }}\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n\n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n\n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', packages = dbt_utils._get_utils_namespaces()) (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', packages = dbt_utils._get_utils_namespaces())(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', packages = dbt_utils._get_utils_namespaces()) (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', packages = dbt_utils._get_utils_namespaces())(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', packages = dbt_utils._get_utils_namespaces()) (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', packages = dbt_utils._get_utils_namespaces())(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', packages = dbt_utils._get_utils_namespaces()) (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', packages = dbt_utils._get_utils_namespaces()) (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', packages = dbt_utils._get_utils_namespaces()) (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', packages = dbt_utils._get_utils_namespaces()) (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._get_utils_namespaces": {"unique_id": "macro.dbt_utils._get_utils_namespaces", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_get_utils_namespaces.sql", "original_file_path": "macros/cross_db_utils/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', packages = dbt_utils._get_utils_namespaces()) (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    {{ exceptions.raise_compiler_error(\n        \"dbt_utils.last_day is not supported for datepart 'quarter' on this adapter\") }}\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', packages = dbt_utils._get_utils_namespaces()) (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', packages = dbt_utils._get_utils_namespaces()) (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', packages = dbt_utils._get_utils_namespaces())(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', packages = dbt_utils._get_utils_namespaces())(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', packages = dbt_utils._get_utils_namespaces())(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', packages = dbt_utils._get_utils_namespaces())(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', packages = dbt_utils._get_utils_namespaces())(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', packages = dbt_utils._get_utils_namespaces())(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1,lon1,lat2,lon2) -%}\n    {{ return(adapter.dispatch('haversine_distance', packages = dbt_utils._get_utils_namespaces())(lat1,lon1,lat2,lon2)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1,lon1,lat2,lon2) -%}\n\n    2 * 3961 * asin(sqrt((sin(radians(({{lat2}} - {{lat1}}) / 2))) ^ 2 +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    (sin(radians(({{lon2}} - {{lon1}}) / 2))) ^ 2))\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n  {{ return(adapter.dispatch('test_relationships_where', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', packages = dbt_utils._get_utils_namespaces())(model, datepart, interval, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n  {{ return(adapter.dispatch('test_not_constant', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          {# In TSQL, subquery aggregate columns need aliases #}\n          {# thus: a filler col name, 'filler_column' #}\n          count(distinct {{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% macro test_unique_where(model) %}\r\n  {{ return(adapter.dispatch('test_unique_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom (\r\n\r\n    select\r\n        {{ column_name }}\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n      {% if where %} and {{ where }} {% endif %}\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n  {{ return(adapter.dispatch('test_at_least_one', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model, quote_columns = false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', packages = dbt_utils._get_utils_namespaces())(model, quote_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, quote_columns = false) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{% if not quote_columns %}\n    {%- set column_list=columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n    {{ return(adapter.dispatch('test_cardinality_equality', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, to, field) %}\n\n{# T-SQL doesn't let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ column_name }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', packages = dbt_utils._get_utils_namespaces())(model, condition, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    where not({{expression}})\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% macro test_not_null_where(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n{% if where %} and {{ where }} {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n  {{ return(adapter.dispatch('test_equality', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- set compare_columns = kwargs.get('compare_columns', None) -%}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', packages = dbt_utils._get_utils_namespaces())(model, lower_bound_column, upper_bound_column, partition_by, gaps)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound < upper_bound,\n            false\n        ) as lower_bound_less_than_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_less_than_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', packages = dbt_utils._get_utils_namespaces())(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', packages = dbt_utils._get_utils_namespaces())(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', packages = dbt_utils._get_utils_namespaces())(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', packages = dbt_utils._get_utils_namespaces())(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast({{ col.column }} as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', packages = dbt_utils._get_utils_namespaces())(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', packages = dbt_utils._get_utils_namespaces())(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', packages = dbt_utils._get_utils_namespaces())(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', packages = dbt_utils._get_utils_namespaces())(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', packages = dbt_utils._get_utils_namespaces())(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', packages = dbt_utils._get_utils_namespaces())\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', packages = dbt_utils._get_utils_namespaces())(table, column, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', packages = dbt_utils._get_utils_namespaces())(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', packages = dbt_utils._get_utils_namespaces())(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.linkedin_source.get_creative_history_columns": {"unique_id": "macro.linkedin_source.get_creative_history_columns", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"call_to_action_label_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"call_to_action_target\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"click_uri\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"follow_company_call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"follow_company_organization_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"follow_company_organization_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"jobs_company_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobs_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"jobs_organization\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"reference\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_in_mail_content\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_activity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_activity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_direct_sponsored_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"sponsored_update_carousel_share\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_share_media_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_content_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_carousel_share_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_direct_sponsored_content\", \"datatype\": \"boolean\"},\n    {\"name\": \"sponsored_update_share\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_share_media_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_content_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_update_share_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_video_media_asset\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sponsored_video_user_generated_content_post\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_call_to_action\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_custom_background\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_forum_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_headline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_logo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spotlight_show_member_profile_photo\", \"datatype\": \"boolean\"},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text_ad_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text_ad_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.linkedin_source.get_campaign_group_history_columns": {"unique_id": "macro.linkedin_source.get_campaign_group_history_columns", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "macros/get_campaign_group_history_columns.sql", "original_file_path": "macros/get_campaign_group_history_columns.sql", "name": "get_campaign_group_history_columns", "macro_sql": "{% macro get_campaign_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"backfilled\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"run_schedule_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"run_schedule_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.linkedin_source.get_campaign_history_columns": {"unique_id": "macro.linkedin_source.get_campaign_history_columns", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"associated_entity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"audience_expansion_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"campaign_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_selection\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"daily_budget_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"format\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"locale_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locale_language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"offsite_delivery_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"optimization_target_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"run_schedule_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"run_schedule_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unit_cost_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"unit_cost_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.linkedin_source.get_ad_analytics_by_creative_columns": {"unique_id": "macro.linkedin_source.get_ad_analytics_by_creative_columns", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "macros/get_ad_analytics_by_creative_columns.sql", "original_file_path": "macros/get_ad_analytics_by_creative_columns.sql", "name": "get_ad_analytics_by_creative_columns", "macro_sql": "{% macro get_ad_analytics_by_creative_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"action_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_unit_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"approximate_unique_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"card_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"card_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comment_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comments\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comments_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"company_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"conversion_value_in_local_currency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cost_in_local_currency\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cost_in_usd\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"day\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"external_website_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"external_website_post_click_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"external_website_post_view_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"follows\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"full_screen_plays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"landing_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lead_generation_mail_contact_info_shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lead_generation_mail_interested_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"one_click_lead_form_opens\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"one_click_leads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"opens\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"other_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"text_url_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_first_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_midpoint_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_starts\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_third_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"video_views\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_card_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_card_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_comment_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_comments\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_company_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_external_website_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_external_website_post_click_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_external_website_post_view_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_extrernal_website_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_extrernal_website_post_click_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_extrernal_website_post_view_conversions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_follows\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_full_screen_plays\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_landing_page_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_likes\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_one_click_lead_form_opens\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_one_click_leads\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_other_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_shares\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_total_engagements\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_first_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_midpoint_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_starts\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_third_quartile_completions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"viral_video_views\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.linkedin_source.get_account_history_columns": {"unique_id": "macro.linkedin_source.get_account_history_columns", "package_name": "linkedin_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/linkedin_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"notified_on_campaign_optimization\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_creative_approval\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_creative_rejection\", \"datatype\": \"boolean\"},\n    {\"name\": \"notified_on_end_of_campaign\", \"datatype\": \"boolean\"},\n    {\"name\": \"reference\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_budget_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_budget_currency_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_budget_ends_at\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.google_ads_source.get_final_url_performance_columns": {"unique_id": "macro.google_ads_source.get_final_url_performance_columns", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_final_url_performance_columns", "macro_sql": "{% macro get_final_url_performance_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_descriptive_name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_name\"},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost\", \"datatype\": dbt_utils.type_float(), \"alias\": \"spend\"},\n    {\"name\": \"date\", \"datatype\": \"date\", \"alias\": \"date_day\"},\n    {\"name\": \"effective_final_url\", \"datatype\": dbt_utils.type_string(), \"alias\": \"final_url\"},\n    {\"name\": \"external_customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.google_ads_source.get_click_performance_columns": {"unique_id": "macro.google_ads_source.get_click_performance_columns", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_click_performance_columns", "macro_sql": "{% macro get_click_performance_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_descriptive_name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_name\"},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"criteria_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": \"date\", \"alias\": \"date_day\"},\n    {\"name\": \"external_customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"gcl_id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"gclid\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.google_ads_source.get_criteria_performance_columns": {"unique_id": "macro.google_ads_source.get_criteria_performance_columns", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_criteria_performance_columns", "macro_sql": "{% macro get_criteria_performance_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_descriptive_name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_name\"},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_group_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_group_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cost\", \"datatype\": dbt_utils.type_float(), \"alias\": \"spend\"},\n    {\"name\": \"criteria\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"criteria_destination_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"criteria_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": \"date\", \"alias\": \"date_day\"},\n    {\"name\": \"external_customer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', packages = fivetran_utils._get_utils_namespaces()) (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('datediff', packages = fivetran_utils._get_utils_namespaces())(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__datediff": {"unique_id": "macro.fivetran_utils.postgres__datediff", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.generate_columns_macro": {"unique_id": "macro.fivetran_utils.generate_columns_macro", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/generate_columns_macro.sql", "original_file_path": "macros/generate_columns_macro.sql", "name": "generate_columns_macro", "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', packages = fivetran_utils._get_utils_namespaces()) (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.snowflake__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "snowflake__get_columns_for_macro", "macro_sql": "{% macro snowflake__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) = 'number' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "bigquery__get_columns_for_macro", "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) = 'numeric' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_int()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.get_columns_for_macro": {"unique_id": "macro.fivetran_utils.get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "get_columns_for_macro", "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type == 'bigquery' %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', packages = fivetran_utils._get_utils_namespaces()) (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', packages = fivetran_utils._get_utils_namespaces()) (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', packages = fivetran_utils._get_utils_namespaces()) (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils._get_utils_namespaces": {"unique_id": "macro.fivetran_utils._get_utils_namespaces", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/_get_utils_namespaces.sql", "original_file_path": "macros/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils', 'fivetran_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__array_agg": {"unique_id": "macro.fivetran_utils.snowflake__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "snowflake__array_agg", "macro_sql": "{% macro snowflake__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__array_agg": {"unique_id": "macro.fivetran_utils.bigquery__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "bigquery__array_agg", "macro_sql": "{% macro bigquery__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.ad_reporting.get_staging_files": {"unique_id": "macro.ad_reporting.get_staging_files", "package_name": "ad_reporting", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/ad_reporting", "path": "macros/get_staging_files.sql", "original_file_path": "macros/get_staging_files.sql", "name": "get_staging_files", "macro_sql": "{% macro get_staging_files() %}\n\n    {% set staging_file = [] %}\n\n    {% if var('ad_reporting__pinterest_enabled') %} \n    {% set _ = staging_file.append(ref('stg_pinterest_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__microsoft_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_microsoft_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__linkedin_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_linkedin_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__twitter_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_twitter_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__google_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_google_ads')) %}\n    {% endif %}\n\n    {% if var('ad_reporting__facebook_ads_enabled') %} \n    {% set _ = staging_file.append(ref('stg_facebook_ads')) %}\n    {% endif %}\n\n\n    {{ return(staging_file) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.pinterest_source.get_ad_group_history_columns": {"unique_id": "macro.pinterest_source.get_ad_group_history_columns", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "macros/get_ad_group_history_columns.sql", "original_file_path": "macros/get_ad_group_history_columns.sql", "name": "get_ad_group_history_columns", "macro_sql": "{% macro get_ad_group_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"end_timestamp\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"ad_group_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"start_timestamp\"},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.pinterest_source.get_pin_promotion_history_columns": {"unique_id": "macro.pinterest_source.get_pin_promotion_history_columns", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "macros/get_pin_promotion_history_columns.sql", "original_file_path": "macros/get_pin_promotion_history_columns.sql", "name": "get_pin_promotion_history_columns", "macro_sql": "{% macro get_pin_promotion_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"android_deep_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"click_tracking_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ios_deep_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_pin_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_removable\", \"datatype\": \"boolean\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pin_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"review_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"view_tracking_url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.pinterest_source.get_pin_promotion_report_columns": {"unique_id": "macro.pinterest_source.get_pin_promotion_report_columns", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "macros/get_pin_promotion_report_columns.sql", "original_file_path": "macros/get_pin_promotion_report_columns.sql", "name": "get_pin_promotion_report_columns", "macro_sql": "{% macro get_pin_promotion_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ad_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"clickthrough_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"clickthrough_1_gross\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"clickthrough_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"closeup_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"closeup_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"cpcv_in_micro_dollar\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpcv_p_95_in_micro_dollar\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpv_in_micro_dollar\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"engagement_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"engagement_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impression_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impression_1_gross\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"impression_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pin_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"pin_promotion_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"repin_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"repin_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"spend_in_micro_dollar\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_click_unknown\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_conversions\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_impression_frequency\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_impression_user\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"total_unknown_tablet_action_to_mobile_conversion\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_avg_watchtime_in_second_1\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"video_avg_watchtime_in_second_2\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"video_mrc_views_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_mrc_views_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_0_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_0_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_100_complete_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_100_complete_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_25_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_25_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_50_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_50_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_75_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_75_combined_2\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_95_combined_1\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"video_p_95_combined_2\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.pinterest_source.get_campaign_history_columns": {"unique_id": "macro.pinterest_source.get_campaign_history_columns", "package_name": "pinterest_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/pinterest_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"campaign_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.facebook_ads_source.get_ad_set_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_set_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "macros/get_ad_set_history_columns.sql", "original_file_path": "macros/get_ad_set_history_columns.sql", "name": "get_ad_set_history_columns", "macro_sql": "{% macro get_ad_set_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"adset_source_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_info_actions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_strategy\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_event\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"budget_remaining\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"destination_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"instagram_actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lifetime_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"lifetime_imps\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"optimization_goal\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_application_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_custom_event_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_event_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_object_store_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"promoted_object_offer_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_page_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_pixel_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_place_page_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_product_catalog_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_object_product_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"recurring_budget_semantics\", \"datatype\": \"boolean\"},\n    {\"name\": \"rf_prediction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_age_max\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"targeting_age_min\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"targeting_app_install_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_audience_network_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_college_years\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_device_platforms\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_majors\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_schools\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_education_statuses\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_effective_audience_network_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_publisher_categories\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_publisher_list_ids\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_excluded_user_device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_exclusions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_facebook_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_flexible_spec\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_friends_of_connections\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_geo_locations_countries\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_geo_locations_location_types\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_instagram_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_locales\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_publisher_platforms\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_adclusters\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_user_os\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_wireless_carrier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_work_employers\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"targeting_work_positions\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"use_new_app_click\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.facebook_ads_source.get_creative_history_columns": {"unique_id": "macro.facebook_ads_source.get_creative_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "macros/get_creative_history_columns.sql", "original_file_path": "macros/get_creative_history_columns.sql", "name": "get_creative_history_columns", "macro_sql": "{% macro get_creative_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"applink_treatment\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"asset_feed_spec_link_urls\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"branded_content_sponsor_page_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"call_to_action_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"carousel_ad_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"effective_instagram_story_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_object_story_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"image_file\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"image_hash\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"image_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"instagram_actor_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"instagram_permalink_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"instagram_story_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"link_og_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"link_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"object_story_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_ipad\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_app_link_spec_iphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_caption\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_child_attachments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_story_link_data_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"page_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_ipad\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_app_link_spec_iphone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_caption\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_child_attachments\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_page_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"thumbnail_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_tags\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"use_page_actor_override\", \"datatype\": \"boolean\"},\n    {\"name\": \"video_call_to_action_value_link\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"video_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.facebook_ads_source.get_campaign_history_columns": {"unique_id": "macro.facebook_ads_source.get_campaign_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"boosted_object_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"budget_rebalance_flag\", \"datatype\": \"boolean\"},\n    {\"name\": \"buying_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"can_create_brand_lift_study\", \"datatype\": \"boolean\"},\n    {\"name\": \"can_use_spend_cap\", \"datatype\": \"boolean\"},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"stop_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.facebook_ads_source.get_basic_ad_columns": {"unique_id": "macro.facebook_ads_source.get_basic_ad_columns", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "macros/get_basic_ad_columns.sql", "original_file_path": "macros/get_basic_ad_columns.sql", "name": "get_basic_ad_columns", "macro_sql": "{% macro get_basic_ad_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ad_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"adset_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cpc\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cpm\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"ctr\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"date\", \"datatype\": \"date\"},\n    {\"name\": \"frequency\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"inline_link_clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"reach\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"spend\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.facebook_ads_source.get_account_history_columns": {"unique_id": "macro.facebook_ads_source.get_account_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "macros/get_account_history_columns.sql", "original_file_path": "macros/get_account_history_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"age\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"agency_client_declaration_agency_representing_client\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_client_based_in_france\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_client_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_email_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_province\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_client_street_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"agency_client_declaration_has_written_mandate_from_advertiser\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"agency_client_declaration_is_client_paying_invoices\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_spent\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_country_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_created_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"business_manager_manager_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_manager_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_primary_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_manager_timezone_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"business_manager_update_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"business_manager_updated_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_street_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"can_create_brand_lift_study\", \"datatype\": \"boolean\"},\n    {\"name\": \"capabilities\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"disable_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"end_advertiser\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_advertiser_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"has_migrated_permissions\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"io_number\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_attribution_spec_system_default\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_direct_deals_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_notifications_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_personal\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_prepay_account\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_tax_id_required\", \"datatype\": \"boolean\"},\n    {\"name\": \"media_agency\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"min_campaign_group_spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"min_daily_budget\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"next_bill_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"offsite_pixels_tos_accepted\", \"datatype\": \"boolean\"},\n    {\"name\": \"owner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"partner\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"salesforce_invoice_group_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"spend_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tax_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_id_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_id_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"timezone_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_offset_hours_utc\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.facebook_ads_source.get_ad_history_columns": {"unique_id": "macro.facebook_ads_source.get_ad_history_columns", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "macros/get_ad_history_columns.sql", "original_file_path": "macros/get_ad_history_columns.sql", "name": "get_ad_history_columns", "macro_sql": "{% macro get_ad_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_set_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ad_source_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_info_actions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"configured_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creative_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"effective_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_non_functional_landing_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_use_of_our_brand_assets\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_updated_by_app_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_non_functional_landing_page\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_facebook_use_of_our_brand_assets\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"placement_specific_instagram_discriminatory_practices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_time\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.twitter_ads_source.get_account_history_columns": {"unique_id": "macro.twitter_ads_source.get_account_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_account_history_columns", "macro_sql": "{% macro get_account_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"approval_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"business_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"account_id\"},\n    {\"name\": \"industry_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"salt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timezone_switch_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.twitter_ads_source.get_campaign_history_columns": {"unique_id": "macro.twitter_ads_source.get_campaign_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"daily_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"duration_in_days\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"end_timestamp\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"frequency_cap\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"funding_instrument_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"campaign_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string(), \"alias\": \"campaign_name\"},\n    {\"name\": \"servable\", \"datatype\": \"boolean\", \"alias\": \"is_servable\"},\n    {\"name\": \"standard_delivery\", \"datatype\": \"boolean\"},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"start_timestamp\"},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.twitter_ads_source.get_line_item_history_columns": {"unique_id": "macro.twitter_ads_source.get_line_item_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_line_item_history_columns", "macro_sql": "{% macro get_line_item_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"advertiser_domain\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"advertiser_user_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"automatically_select_bid\", \"datatype\": \"boolean\"},\n    {\"name\": \"bid_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bid_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bid_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"creative_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"end_timestamp\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"line_item_id\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"objective\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"optimization\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"primary_web_event_tag\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"start_timestamp\"},\n    {\"name\": \"target_cpa_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total_budget_amount_local_micro\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.twitter_ads_source.get_promoted_tweet_history_columns": {"unique_id": "macro.twitter_ads_source.get_promoted_tweet_history_columns", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_promoted_tweet_history_columns", "macro_sql": "{% macro get_promoted_tweet_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"approval_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"created_timestamp\"},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\", \"alias\": \"is_deleted\"},\n    {\"name\": \"entity_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string(), \"alias\": \"promoted_tweet_id\"},\n    {\"name\": \"line_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"updated_timestamp\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.twitter_ads_source.get_tweet_url_columns": {"unique_id": "macro.twitter_ads_source.get_tweet_url_columns", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_tweet_url_columns", "macro_sql": "{% macro get_tweet_url_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"display_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expanded_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"indices\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.twitter_ads_source.get_promoted_tweet_report_columns": {"unique_id": "macro.twitter_ads_source.get_promoted_tweet_report_columns", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "macros/staging_columns.sql", "original_file_path": "macros/staging_columns.sql", "name": "get_promoted_tweet_report_columns", "macro_sql": "{% macro get_promoted_tweet_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billed_charge_local_micro\", \"datatype\": dbt_utils.type_int(), \"alias\": \"spend_micro\"},\n    {\"name\": \"clicks\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"date_day\"},\n    {\"name\": \"impressions\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"promoted_tweet_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url_clicks\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/kristin/.pyenv/versions/3.7.3/lib/python3.7/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}, "google_ads_source._fivetran_id": {"unique_id": "google_ads_source._fivetran_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_id", "block_contents": "Unique ID used by Fivetran to sync and dedupe data."}, "google_ads_source._fivetran_synced": {"unique_id": "google_ads_source._fivetran_synced", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "google_ads_source.account_descriptive_name": {"unique_id": "google_ads_source.account_descriptive_name", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "account_descriptive_name", "block_contents": "The descriptive name of the Customer account."}, "google_ads_source.ad_group_id": {"unique_id": "google_ads_source.ad_group_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_id", "block_contents": "The ID of the AdGroup."}, "google_ads_source.ad_group_name": {"unique_id": "google_ads_source.ad_group_name", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_name", "block_contents": "The name of the AdGroup."}, "google_ads_source.ad_group_status": {"unique_id": "google_ads_source.ad_group_status", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "ad_group_status", "block_contents": "Status of the ad group."}, "google_ads_source.campaign_id": {"unique_id": "google_ads_source.campaign_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_id", "block_contents": "The ID of the Campaign."}, "google_ads_source.campaign_name": {"unique_id": "google_ads_source.campaign_name", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_name", "block_contents": "The name of the Campaign."}, "google_ads_source.campaign_status": {"unique_id": "google_ads_source.campaign_status", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "campaign_status", "block_contents": "Status of the Campaign."}, "google_ads_source.clicks": {"unique_id": "google_ads_source.clicks", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clicks", "block_contents": "The number of clicks."}, "google_ads_source.cost": {"unique_id": "google_ads_source.cost", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "cost", "block_contents": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period."}, "google_ads_source.date": {"unique_id": "google_ads_source.date", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "date", "block_contents": "The date being reported on."}, "google_ads_source.effective_final_url": {"unique_id": "google_ads_source.effective_final_url", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "effective_final_url", "block_contents": "Effective final URL of the impressions."}, "google_ads_source.external_customer_id": {"unique_id": "google_ads_source.external_customer_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "external_customer_id", "block_contents": "The Customer ID."}, "google_ads_source.impressions": {"unique_id": "google_ads_source.impressions", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "impressions", "block_contents": "Count of how often your ad has appeared on a search results page or website on the Google Network."}, "google_ads_source.criteria_id": {"unique_id": "google_ads_source.criteria_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_id", "block_contents": "The Criterion ID."}, "google_ads_source.gcl_id": {"unique_id": "google_ads_source.gcl_id", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "gcl_id", "block_contents": "The Google Click ID."}, "google_ads_source.criteria": {"unique_id": "google_ads_source.criteria", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria", "block_contents": "Descriptive string for the Criterion."}, "google_ads_source.criteria_destination_url": {"unique_id": "google_ads_source.criteria_destination_url", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_destination_url", "block_contents": "Destination URL of the criterion that triggered ads."}, "google_ads_source.criteria_type": {"unique_id": "google_ads_source.criteria_type", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "criteria_type", "block_contents": "The type of the Criterion."}, "google_ads_source.base_url": {"unique_id": "google_ads_source.base_url", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "base_url", "block_contents": "The base URL of the ad, extracted from the `effective_final_url`."}, "google_ads_source.url_host": {"unique_id": "google_ads_source.url_host", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_host", "block_contents": "The URL host of the ad, extracted from the `effective_final_url`."}, "google_ads_source.url_path": {"unique_id": "google_ads_source.url_path", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url_path", "block_contents": "The URL path of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_source": {"unique_id": "google_ads_source.utm_source", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_source", "block_contents": "The utm_source parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_medium": {"unique_id": "google_ads_source.utm_medium", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_medium", "block_contents": "The utm_medium parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_campaign": {"unique_id": "google_ads_source.utm_campaign", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_campaign", "block_contents": "The utm_campaign parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_content": {"unique_id": "google_ads_source.utm_content", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_content", "block_contents": "The utm_content parameter of the ad, extracted from the `effective_final_url`."}, "google_ads_source.utm_term": {"unique_id": "google_ads_source.utm_term", "package_name": "google_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/google_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "utm_term", "block_contents": "The utm_term parameter of the ad, extracted from the `effective_final_url`."}, "facebook_ads_source._fivetran_synced": {"unique_id": "facebook_ads_source._fivetran_synced", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "facebook_ads_source.is_most_recent_record": {"unique_id": "facebook_ads_source.is_most_recent_record", "package_name": "facebook_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_most_recent_record", "block_contents": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it."}, "twitter_ads_source._fivetran_synced": {"unique_id": "twitter_ads_source._fivetran_synced", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "When the record was last synced by Fivetran."}, "twitter_ads_source.created_at": {"unique_id": "twitter_ads_source.created_at", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "created_at", "block_contents": "The timestamp the account was created."}, "twitter_ads_source.updated_at": {"unique_id": "twitter_ads_source.updated_at", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "updated_at", "block_contents": "The timestamp the account was last updated."}, "twitter_ads_source.deleted": {"unique_id": "twitter_ads_source.deleted", "package_name": "twitter_ads_source", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/twitter_ads_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "deleted", "block_contents": "Whether the record has been deleted or not."}}, "exposures": {}, "selectors": {}, "disabled": [{"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n  \n), fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        caption, \n        description, \n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/snowflake/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "e25839877e3e134a154419c24289507728e3366316b9b59b56c4e6a24610ef1f"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='redshift') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n  \n), fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        caption, \n        description, \n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/redshift/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "8d6e177ad0275204f1e7c081fcb67f35c8f38d0a9dd209dc737a8f14e242d1a5"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n  select \n    _fivetran_id, \n    creative_id, \n    parse_json(template_app_link_spec_ios) as template_app_link_spec_ios,\n    parse_json(template_app_link_spec_ipad) as template_app_link_spec_ipad,\n    parse_json(template_app_link_spec_android) as template_app_link_spec_android,\n    parse_json(template_app_link_spec_iphone) as template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n  \n), flattened_{{ app }} as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    '{{ app }}' as app_type,\n    element.value:index::string as index,\n    element.value:app_name::string as app_name,\n    element.value:app_store_id::string as app_store_id,\n    element.value:class_name::string as class_name,\n    element.value:package_name::string as package_name,\n    element.value:template_page::string as template_page\n  from required_fields,\n  lateral flatten( input => template_app_link_spec_{{ app }} ) as element\n\n{% endfor %}\n\n), unioned as (\n\n    select * from flattened_ios\n    union all\n    select * from flattened_iphone\n    union all\n    select * from flattened_ipad\n    union all\n    select * from flattened_android\n\n)\n\nselect *\nfrom unioned", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__app_link.sql", "original_file_path": "models/snowflake/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "resource_type": "model", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "250cbd47a248220b82ff9b41c0d0fcdbed3927ea87182db988a74a21dedc6498"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='redshift') }}\n\nwith base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n  select *\n  from {{ ref('utils__facebook_ads__numbers')}}\n\n), required_fields as (\n\n  select \n    _fivetran_id, \n    creative_id, \n    template_app_link_spec_ios,\n    template_app_link_spec_ipad,\n    template_app_link_spec_android,\n    template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n  \n), flattened_{{ app }} as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    '{{ app }}'::varchar as app_type,\n    json_extract_array_element_text(required_fields.template_app_link_spec_{{ app }}, numbers.generated_number::int - 1, true) as element\n  from required_fields\n  inner join numbers\n      on json_array_length(required_fields.template_app_link_spec_{{ app }}) >= numbers.generated_number\n\n), extracted_{{ app }} as (\n\n  select\n    _fivetran_id,\n    creative_id,\n    app_type,\n    json_extract_path_text(element,'index') as index,\n    json_extract_path_text(element,'app_name') as app_name,\n    json_extract_path_text(element,'app_store_id') as app_store_id,\n    json_extract_path_text(element,'class') as class_name,\n    json_extract_path_text(element,'package') as package_name,\n    json_extract_path_text(element,'template_page') as template_page\n  from flattened_{{ app }}\n\n{% endfor %}\n\n), unioned as (\n\n    select * from extracted_ios\n    union all\n    select * from extracted_iphone\n    union all\n    select * from extracted_ipad\n    union all\n    select * from extracted_android\n\n)\n\nselect *\nfrom unioned", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__app_link.sql", "original_file_path": "models/redshift/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "resource_type": "model", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "f35273a7dca692545cfe5d53d6ec29ea338e4859203f6f63a5f689d2e77a164c"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        parse_json(url_tags) as url_tags\n    from base\n    where url_tags is not null\n\n\n), flattened_url_tags as (\n    \n    select\n        _fivetran_id,\n        creative_id,\n        url_tags.value:key::string as key,\n        url_tags.value:value::string as value,\n        url_tags.value:type::string as type\n    from required_fields,\n    lateral flatten( input => url_tags ) as url_tags\n\n  \n)\n\nselect *\nfrom flattened_url_tags", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__url_tag.sql", "original_file_path": "models/snowflake/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "resource_type": "model", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "2b46b0bf1efd42f8f9df7dfa0858f85715db675469093fdb10084190295ae5f7"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='redshift') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        url_tags\n    from base\n    where url_tags is not null\n\n\n), flattened_url_tags as (\n    \n    select\n        _fivetran_id,\n        creative_id,\n        json_extract_array_element_text(required_fields.url_tags, numbers.generated_number::int - 1, true) as element\n    from required_fields\n    inner join numbers\n        on json_array_length(required_fields.url_tags) >= numbers.generated_number\n\n  \n), extracted_fields as (\n    \n    select\n        _fivetran_id,\n        creative_id,\n        json_extract_path_text(element,'key') as key,\n        json_extract_path_text(element,'value') as value,\n        json_extract_path_text(element,'type') as type\n    from flattened_url_tags\n\n)\n\nselect *\nfrom extracted_fields", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__url_tag.sql", "original_file_path": "models/redshift/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "resource_type": "model", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "98b4ea1b07ede0c5ac47317cd5e1dad50cde629b7c1c2ed0623589641e267e19"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n  \n), unnested as (\n\n    select \n    \n        base._fivetran_id,\n        base.creative_id,\n        base.index,\n        url_tags.value:key::string as key,\n        url_tags.value:value::string as value\n\n    from base, \n    lateral flatten( input => url_tags ) as url_tags\n\n)\n\nselect *\nfrom unnested", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/snowflake/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "58c4d94521dc6217ee381c90ad510d2bac9c6ac82afd4ec06522e2b70e3c42a9"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='redshift') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n  \n), unnested as (\n\n    select \n    \n        base._fivetran_id,\n        base.creative_id,\n        base.index,\n        json_extract_array_element_text(base.url_tags, numbers.generated_number::int - 1, true) as element\n    from base\n    inner join numbers\n        on json_array_length(base.url_tags) >= numbers.generated_number\n\n), extracted_fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        index,\n        json_extract_path_text(element,'key') as key,\n        json_extract_path_text(element,'value') as value\n    from unnested\n\n)\n\nselect *\nfrom extracted_fields", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/redshift/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "b5746b8df8c71327516b88171d19d38fe3956055ee1f6470902d60d578ccb647"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"], ["utils__facebook_ads__numbers"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id, \n        creative_id, \n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        parse_json(object_story_link_data_child_attachments) as child_attachments\n    from base\n    where object_story_link_data_child_attachments is not null\n  \n), flattened_child_attachments as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption, \n        object_story_link_data_description as description, \n        object_story_link_data_message as message,\n        child_attachments as element,\n        attachments.index as index,\n        attachments.value:link  as link,\n        attachments.value:url_tags as url_tags\n  \n    from required_fields, \n    lateral flatten( input => child_attachments ) as attachments\n\n)\n\nselect *\nfrom flattened_child_attachments", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "snowflake", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "snowflake/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/snowflake/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "resource_type": "model", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "4547473a459db10c3987d19d0889f640c95d479b049f9af854773468c640cbcc"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='redshift') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id, \n        creative_id, \n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        object_story_link_data_child_attachments as child_attachments\n    from base\n    where object_story_link_data_child_attachments is not null\n  \n), flattened_child_attachments as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption, \n        object_story_link_data_description as description, \n        object_story_link_data_message as message,\n        numbers.generated_number - 1 as index,\n        json_extract_array_element_text(required_fields.child_attachments, numbers.generated_number::int - 1, true) as element\n    from required_fields\n    inner join numbers\n        on json_array_length(required_fields.child_attachments) >= numbers.generated_number\n\n), extracted_fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        caption,\n        description,\n        message,\n        index,\n        json_extract_path_text(element,'link') as link,\n        json_extract_path_text(element,'url_tags') as url_tags\n    from flattened_child_attachments\n\n)\n\nselect *\nfrom extracted_fields", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "redshift", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "redshift/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/redshift/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "resource_type": "model", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "915d1f68b616f66c73cb0355c65e5279beb5cbf6bc545b310159b41e8be5fdc2"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (  \n  \n    select \n        _fivetran_id, \n        parse_json(asset_feed_spec_link_urls) as asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n  \n), flattened as (\n\n    select \n        _fivetran_id,\n        nullif(asset_feed_spec_link_urls.value:display_url::string, '') as display_url,\n        nullif(asset_feed_spec_link_urls.value:website_url::string, '') as website_url,\n        asset_feed_spec_link_urls.index as index\n    from required_fields,\n    lateral flatten( input => asset_feed_spec_link_urls ) as asset_feed_spec_link_urls\n\n)\n\nselect *\nfrom flattened", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/snowflake/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "resource_type": "model", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "9b26940e00b69c9c5c83a92896cae7a242c3f476d20f133a585f847c82b40367"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=target.type=='redshift') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), numbers as (\n\n    select *\n    from {{ ref('utils__facebook_ads__numbers') }}\n\n), required_fields as (  \n  \n    select \n        _fivetran_id, \n        asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n  \n), flattened as (\n\n    select \n        _fivetran_id,\n        json_extract_array_element_text(required_fields.asset_feed_spec_link_urls, numbers.generated_number::int - 1, true) as element,\n        numbers.generated_number - 1 as index\n    from required_fields\n    inner join numbers\n        on json_array_length(required_fields.asset_feed_spec_link_urls) >= numbers.generated_number\n\n), extracted_fields as (\n\n    select\n        _fivetran_id,\n        index,\n        json_extract_path_text(element,'display_url') as display_url,\n        json_extract_path_text(element,'website_url') as website_url\n    from flattened\n\n)\n\nselect *\nfrom extracted_fields", "database": "dbt-package-testing", "schema": "dbt_kristin_test", "fqn": ["facebook_ads_creative_history", "redshift", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/Users/kristin/Documents/Github/dbt_ad_reporting/integration_tests/dbt_modules/facebook_ads_creative_history", "path": "redshift/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/redshift/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "resource_type": "model", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "e94fd91a1299fea4f7101755bfa2c49d2a9c4c1f68e13d35b1d6ed739a0d3653"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["utils__facebook_ads__numbers"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}], "parent_map": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.linkedin_account_history_data": [], "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": [], "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": [], "seed.ad_reporting_integration_tests.twitter_campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_creative_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": [], "seed.ad_reporting_integration_tests.pin_promotion_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": [], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": [], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": [], "seed.ad_reporting_integration_tests.ad_group_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.twitter_tweet_url_data": [], "seed.ad_reporting_integration_tests.campaign_history_data": [], "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": [], "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": [], "seed.ad_reporting_integration_tests.google_ads_click_performance_data": [], "seed.ad_reporting_integration_tests.twitter_account_history_data": [], "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": [], "seed.ad_reporting_integration_tests.pin_promotion_report_data": [], "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": [], "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": [], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history": ["seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__account_history": ["seed.ad_reporting_integration_tests.microsoft_ads_account_history_data"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": ["seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data"], "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"], "model.facebook_ads_creative_history.stg_facebook_ads__app_link": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_creative_history.stg_facebook_ads__url_tag": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"], "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_creative_history.utils__facebook_ads__numbers": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page": ["model.facebook_ads_creative_history.stg_facebook_ads__app_link"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index": ["model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type": ["model.facebook_ads_creative_history.stg_facebook_ads__url_tag"], "model.twitter_ads.twitter__line_item_report": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads.twitter__ad_adapter": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__tweet_url"], "model.twitter_ads.twitter__campaign_report": ["model.twitter_ads.twitter__ad_adapter"], "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id": ["model.twitter_ads.twitter__ad_adapter"], "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id": ["model.twitter_ads.twitter__ad_adapter"], "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id": ["model.twitter_ads.twitter__campaign_report"], "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id": ["model.twitter_ads.twitter__campaign_report"], "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id": ["model.twitter_ads.twitter__line_item_report"], "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id": ["model.twitter_ads.twitter__line_item_report"], "model.pinterest.pinterest_ads__ad_adapter": ["model.pinterest.int_pinterest_ads__most_recent_ad_group", "model.pinterest.int_pinterest_ads__most_recent_campaign", "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.pinterest.pinterest_ads__campaign_ad_report": ["model.pinterest.pinterest_ads__ad_adapter"], "model.pinterest.pinterest_ads__ad_group_ad_report": ["model.pinterest.pinterest_ads__ad_adapter"], "model.pinterest.int_pinterest_ads__most_recent_campaign": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "model.pinterest.int_pinterest_ads__most_recent_pin_promotion": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "model.pinterest.int_pinterest_ads__most_recent_ad_group": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id": ["model.pinterest.pinterest_ads__ad_adapter"], "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id": ["model.pinterest.pinterest_ads__ad_adapter"], "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"], "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id": ["model.pinterest.int_pinterest_ads__most_recent_ad_group"], "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id": ["model.pinterest.int_pinterest_ads__most_recent_campaign"], "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id": ["model.pinterest.int_pinterest_ads__most_recent_campaign"], "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"], "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion"], "model.google_ads.google_ads__click_performance": ["model.google_ads_source.stg_google_ads__click_performance"], "model.google_ads.google_ads__url_ad_adapter": ["model.google_ads_source.stg_google_ads__final_url_performance"], "model.google_ads.google_ads__criteria_ad_adapter": ["model.google_ads_source.stg_google_ads__criteria_performance"], "model.linkedin_source.stg_linkedin__campaign_group_history": ["model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "model.linkedin_source.stg_linkedin__campaign_group_history_tmp"], "model.linkedin_source.stg_linkedin__account_history": ["model.linkedin_source.stg_linkedin__account_history_tmp", "model.linkedin_source.stg_linkedin__account_history_tmp"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp"], "model.linkedin_source.stg_linkedin__campaign_history": ["model.linkedin_source.stg_linkedin__campaign_history_tmp", "model.linkedin_source.stg_linkedin__campaign_history_tmp"], "model.linkedin_source.stg_linkedin__creative_history": ["model.linkedin_source.stg_linkedin__creative_history_tmp", "model.linkedin_source.stg_linkedin__creative_history_tmp"], "model.linkedin_source.stg_linkedin__campaign_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_campaign_history_data"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp": ["seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data"], "model.linkedin_source.stg_linkedin__account_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_account_history_data"], "model.linkedin_source.stg_linkedin__campaign_group_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data"], "model.linkedin_source.stg_linkedin__creative_history_tmp": ["seed.ad_reporting_integration_tests.linkedin_creative_history_data"], "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from": ["model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from": ["model.linkedin_source.stg_linkedin__campaign_history"], "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from": ["model.linkedin_source.stg_linkedin__campaign_group_history"], "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id": ["model.linkedin_source.stg_linkedin__account_history"], "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id": ["model.linkedin_source.stg_linkedin__account_history"], "test.linkedin_source.not_null_stg_linkedin__account_history_account_id": ["model.linkedin_source.stg_linkedin__account_history"], "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from": ["model.linkedin_source.stg_linkedin__account_history"], "model.facebook_ads.facebook_ads__ad_adapter": ["model.facebook_ads.facebook_ads__creative_history_prep", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads.facebook_ads__campaign_report": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads.facebook_ads__account_report": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads.facebook_ads__ad_set_report": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads.facebook_ads__creative_history_prep": ["model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.google_ads_source.stg_google_ads__final_url_performance": ["model.google_ads_source.stg_google_ads__final_url_performance_tmp", "model.google_ads_source.stg_google_ads__final_url_performance_tmp"], "model.google_ads_source.stg_google_ads__criteria_performance": ["model.google_ads_source.stg_google_ads__criteria_performance_tmp", "model.google_ads_source.stg_google_ads__criteria_performance_tmp"], "model.google_ads_source.stg_google_ads__click_performance": ["model.google_ads_source.stg_google_ads__click_performance_tmp", "model.google_ads_source.stg_google_ads__click_performance_tmp"], "model.google_ads_source.stg_google_ads__criteria_performance_tmp": ["seed.ad_reporting_integration_tests.google_ads_criteria_performance_data"], "model.google_ads_source.stg_google_ads__final_url_performance_tmp": ["seed.ad_reporting_integration_tests.google_ads_final_url_performance_data"], "model.google_ads_source.stg_google_ads__click_performance_tmp": ["seed.ad_reporting_integration_tests.google_ads_click_performance_data"], "test.google_ads_source.unique_stg_google_ads__click_performance_gclid": ["model.google_ads_source.stg_google_ads__click_performance"], "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid": ["model.google_ads_source.stg_google_ads__click_performance"], "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id": ["model.google_ads_source.stg_google_ads__final_url_performance"], "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id": ["model.google_ads_source.stg_google_ads__final_url_performance"], "model.ad_reporting.ad_reporting": ["model.ad_reporting.stg_facebook_ads", "model.ad_reporting.stg_google_ads", "model.ad_reporting.stg_linkedin_ads", "model.ad_reporting.stg_microsoft_ads", "model.ad_reporting.stg_pinterest_ads", "model.ad_reporting.stg_twitter_ads"], "model.ad_reporting.stg_microsoft_ads": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.ad_reporting.stg_facebook_ads": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.ad_reporting.stg_linkedin_ads": ["model.linkedin.linkedin__ad_adapter"], "model.ad_reporting.stg_pinterest_ads": ["model.pinterest.pinterest_ads__ad_adapter"], "model.ad_reporting.stg_google_ads": ["model.google_ads.google_ads__url_ad_adapter"], "model.ad_reporting.stg_twitter_ads": ["model.twitter_ads.twitter__ad_adapter"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"], "model.pinterest_source.stg_pinterest_ads__campaign_history": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"], "model.pinterest_source.stg_pinterest_ads__ad_group_history": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": ["seed.ad_reporting_integration_tests.pin_promotion_report_data"], "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.campaign_history_data"], "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": ["seed.ad_reporting_integration_tests.ad_group_history_data"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": ["seed.ad_reporting_integration_tests.pin_promotion_history_data"], "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id": ["model.pinterest_source.stg_pinterest_ads__ad_group_history"], "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id": ["model.pinterest_source.stg_pinterest_ads__campaign_history"], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_ad_history_data"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_creative_history_data"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.facebook_ads_account_history_data"], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id": ["model.facebook_ads_source.stg_facebook_ads__account_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id": ["model.facebook_ads_source.stg_facebook_ads__ad_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id": ["model.facebook_ads_source.stg_facebook_ads__campaign_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id": ["model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.microsoft_ads.microsoft_ads__ad_adapter": ["model.microsoft_ads_source.stg_microsoft_ads__account_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "model.microsoft_ads.microsoft_ads__ad_group_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.microsoft_ads.microsoft_ads__account_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.microsoft_ads.microsoft_ads__campaign_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__line_item_history": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__campaign_history": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"], "model.twitter_ads_source.stg_twitter_ads__account_history": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "model.twitter_ads_source.stg_twitter_ads__account_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__tweet_url": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"], "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": ["seed.ad_reporting_integration_tests.twitter_tweet_url_data"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data"], "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": ["seed.ad_reporting_integration_tests.twitter_line_item_history_data"], "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": ["seed.ad_reporting_integration_tests.twitter_campaign_history_data"], "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": ["seed.ad_reporting_integration_tests.twitter_account_history_data"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": ["seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data"], "model.linkedin.linkedin__campaign_ad_report": ["model.linkedin.linkedin__ad_adapter"], "model.linkedin.linkedin__account_ad_report": ["model.linkedin.linkedin__ad_adapter"], "model.linkedin.linkedin__campaign_group_ad_report": ["model.linkedin.linkedin__ad_adapter"], "model.linkedin.linkedin__ad_adapter": ["model.linkedin_source.stg_linkedin__account_history", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin__campaign_group_history", "model.linkedin_source.stg_linkedin__campaign_history", "model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id": ["model.linkedin.linkedin__ad_adapter"], "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id": ["model.linkedin.linkedin__ad_adapter"], "test.linkedin.not_null_linkedin__ad_adapter_creative_id": ["model.linkedin.linkedin__ad_adapter"], "source.microsoft_ads_source.microsoft_ads.ad_history": [], "source.microsoft_ads_source.microsoft_ads.campaign_history": [], "source.microsoft_ads_source.microsoft_ads.ad_group_history": [], "source.microsoft_ads_source.microsoft_ads.account_history": [], "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": [], "source.linkedin_source.linkedin.ad_analytics_by_creative": [], "source.linkedin_source.linkedin.creative_history": [], "source.linkedin_source.linkedin.campaign_history": [], "source.linkedin_source.linkedin.campaign_group_history": [], "source.linkedin_source.linkedin.account_history": [], "source.google_ads_source.adwords.final_url_performance": [], "source.google_ads_source.adwords.click_performance": [], "source.google_ads_source.adwords.criteria_performance": [], "source.pinterest_source.pinterest_ads.pin_promotion_report": [], "source.pinterest_source.pinterest_ads.pin_promotion_history": [], "source.pinterest_source.pinterest_ads.campaign_history": [], "source.pinterest_source.pinterest_ads.ad_group_history": [], "source.facebook_ads_source.facebook_ads.account_history": [], "source.facebook_ads_source.facebook_ads.ad_history": [], "source.facebook_ads_source.facebook_ads.ad_set_history": [], "source.facebook_ads_source.facebook_ads.basic_ad": [], "source.facebook_ads_source.facebook_ads.campaign_history": [], "source.facebook_ads_source.facebook_ads.creative_history": [], "source.twitter_ads_source.twitter_ads.account_history": [], "source.twitter_ads_source.twitter_ads.campaign_history": [], "source.twitter_ads_source.twitter_ads.line_item_history": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_history": [], "source.twitter_ads_source.twitter_ads.tweet_url": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_report": []}, "child_map": {"seed.ad_reporting_integration_tests.twitter_line_item_history_data": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_campaign_group_history_data": ["model.linkedin_source.stg_linkedin__campaign_group_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_ad_history_data": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_account_history_data": ["model.linkedin_source.stg_linkedin__account_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_campaign_history_data": ["model.linkedin_source.stg_linkedin__campaign_history_tmp"], "seed.ad_reporting_integration_tests.google_ads_final_url_performance_data": ["model.google_ads_source.stg_google_ads__final_url_performance_tmp"], "seed.ad_reporting_integration_tests.twitter_campaign_history_data": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_creative_history_data": ["model.linkedin_source.stg_linkedin__creative_history_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_account_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__account_history"], "seed.ad_reporting_integration_tests.pin_promotion_history_data": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_creative_history_data": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_history_data": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"], "seed.ad_reporting_integration_tests.twitter_promoted_tweet_report_data": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"], "seed.ad_reporting_integration_tests.ad_group_history_data": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_campaign_history_data": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.twitter_tweet_url_data": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"], "seed.ad_reporting_integration_tests.campaign_history_data": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"], "seed.ad_reporting_integration_tests.linkedin_ad_analytics_by_creative_data": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_account_history_data": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_basic_ad_data": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"], "seed.ad_reporting_integration_tests.google_ads_click_performance_data": ["model.google_ads_source.stg_google_ads__click_performance_tmp"], "seed.ad_reporting_integration_tests.twitter_account_history_data": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp"], "seed.ad_reporting_integration_tests.facebook_ads_ad_set_history_data": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_performance_daily_report_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_history"], "seed.ad_reporting_integration_tests.pin_promotion_report_data": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"], "seed.ad_reporting_integration_tests.google_ads_criteria_performance_data": ["model.google_ads_source.stg_google_ads__criteria_performance_tmp"], "seed.ad_reporting_integration_tests.microsoft_ads_campaign_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__campaign_history"], "seed.ad_reporting_integration_tests.microsoft_ads_ad_group_history_data": ["model.microsoft_ads_source.stg_microsoft_ads__ad_group_history"], "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id", "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id"], "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report": ["model.microsoft_ads.microsoft_ads__ad_adapter"], "model.microsoft_ads_source.stg_microsoft_ads__ad_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id", "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id"], "model.microsoft_ads_source.stg_microsoft_ads__account_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id", "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id"], "model.microsoft_ads_source.stg_microsoft_ads__campaign_history": ["model.microsoft_ads.microsoft_ads__ad_adapter", "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id", "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id"], "test.microsoft_ads_source.unique_stg_microsoft_ads__account_history_account_version_id": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__account_history_account_version_id": [], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_group_history_ad_group_version_id": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_group_history_ad_group_version_id": [], "test.microsoft_ads_source.unique_stg_microsoft_ads__ad_history_ad_version_id": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__ad_history_ad_version_id": [], "test.microsoft_ads_source.unique_stg_microsoft_ads__campaign_history_campaign_version_id": [], "test.microsoft_ads_source.not_null_stg_microsoft_ads__campaign_history_campaign_version_id": [], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media": ["test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index"], "model.facebook_ads_creative_history.stg_facebook_ads__app_link": ["test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page"], "model.facebook_ads_creative_history.stg_facebook_ads__url_tag": ["model.facebook_ads.facebook_ads__creative_history_prep", "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type"], "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags": ["test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key"], "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep": ["model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags"], "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url": ["test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index"], "model.facebook_ads_creative_history.utils__facebook_ads__numbers": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__app_link__fivetran_id__app_type__index__template_page": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media__fivetran_id__index": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__carousel_media_url_tags__fivetran_id__index__key": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__creative_history_asset_feed_spec_link_url__fivetran_id__index": [], "test.facebook_ads_creative_history.dbt_utils_unique_combination_of_columns_stg_facebook_ads__url_tag__fivetran_id__key__type": [], "model.twitter_ads.twitter__line_item_report": ["test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id", "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id"], "model.twitter_ads.twitter__ad_adapter": ["model.ad_reporting.stg_twitter_ads", "model.twitter_ads.twitter__campaign_report", "model.twitter_ads.twitter__line_item_report", "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id", "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id"], "model.twitter_ads.twitter__campaign_report": ["test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id", "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id"], "test.twitter_ads.unique_twitter__ad_adapter_daily_ad_id": [], "test.twitter_ads.not_null_twitter__ad_adapter_daily_ad_id": [], "test.twitter_ads.unique_twitter__campaign_report_daily_campaign_id": [], "test.twitter_ads.not_null_twitter__campaign_report_daily_campaign_id": [], "test.twitter_ads.unique_twitter__line_item_report_daily_line_item_id": [], "test.twitter_ads.not_null_twitter__line_item_report_daily_line_item_id": [], "model.pinterest.pinterest_ads__ad_adapter": ["model.ad_reporting.stg_pinterest_ads", "model.pinterest.pinterest_ads__ad_group_ad_report", "model.pinterest.pinterest_ads__campaign_ad_report", "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id", "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id"], "model.pinterest.pinterest_ads__campaign_ad_report": [], "model.pinterest.pinterest_ads__ad_group_ad_report": [], "model.pinterest.int_pinterest_ads__most_recent_campaign": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id", "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id"], "model.pinterest.int_pinterest_ads__most_recent_pin_promotion": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id", "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id"], "model.pinterest.int_pinterest_ads__most_recent_ad_group": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id", "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id"], "test.pinterest.unique_pinterest_ads__ad_adapter_daily_id": [], "test.pinterest.not_null_pinterest_ads__ad_adapter_daily_id": [], "test.pinterest.unique_int_pinterest_ads__most_recent_ad_group_ad_group_id": [], "test.pinterest.not_null_int_pinterest_ads__most_recent_ad_group_ad_group_id": [], "test.pinterest.unique_int_pinterest_ads__most_recent_campaign_campaign_id": [], "test.pinterest.not_null_int_pinterest_ads__most_recent_campaign_campaign_id": [], "test.pinterest.unique_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id": [], "test.pinterest.not_null_int_pinterest_ads__most_recent_pin_promotion_pin_promotion_id": [], "model.google_ads.google_ads__click_performance": [], "model.google_ads.google_ads__url_ad_adapter": ["model.ad_reporting.stg_google_ads"], "model.google_ads.google_ads__criteria_ad_adapter": [], "model.linkedin_source.stg_linkedin__campaign_group_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id", "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id", "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from", "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id"], "model.linkedin_source.stg_linkedin__account_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__account_history_account_id", "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id", "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from", "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id", "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id", "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id"], "model.linkedin_source.stg_linkedin__campaign_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id", "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id", "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from", "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id"], "model.linkedin_source.stg_linkedin__creative_history": ["model.linkedin.linkedin__ad_adapter", "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id", "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id", "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from", "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id"], "model.linkedin_source.stg_linkedin__campaign_history_tmp": ["model.linkedin_source.stg_linkedin__campaign_history", "model.linkedin_source.stg_linkedin__campaign_history"], "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative"], "model.linkedin_source.stg_linkedin__account_history_tmp": ["model.linkedin_source.stg_linkedin__account_history", "model.linkedin_source.stg_linkedin__account_history"], "model.linkedin_source.stg_linkedin__campaign_group_history_tmp": ["model.linkedin_source.stg_linkedin__campaign_group_history", "model.linkedin_source.stg_linkedin__campaign_group_history"], "model.linkedin_source.stg_linkedin__creative_history_tmp": ["model.linkedin_source.stg_linkedin__creative_history", "model.linkedin_source.stg_linkedin__creative_history"], "test.linkedin_source.unique_stg_linkedin__ad_analytics_by_creative_daily_creative_id": [], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_daily_creative_id": [], "test.linkedin_source.not_null_stg_linkedin__ad_analytics_by_creative_creative_id": [], "test.linkedin_source.unique_stg_linkedin__creative_history_creative_version_id": [], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_version_id": [], "test.linkedin_source.not_null_stg_linkedin__creative_history_creative_id": [], "test.linkedin_source.not_null_stg_linkedin__creative_history_valid_from": [], "test.linkedin_source.unique_stg_linkedin__campaign_history_campaign_version_id": [], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_version_id": [], "test.linkedin_source.not_null_stg_linkedin__campaign_history_campaign_id": [], "test.linkedin_source.not_null_stg_linkedin__campaign_history_valid_from": [], "test.linkedin_source.unique_stg_linkedin__campaign_group_history_campaign_group_version_id": [], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_version_id": [], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_campaign_group_id": [], "test.linkedin_source.not_null_stg_linkedin__campaign_group_history_valid_from": [], "test.linkedin_source.unique_stg_linkedin__account_history_account_version_id": [], "test.linkedin_source.not_null_stg_linkedin__account_history_account_version_id": [], "test.linkedin_source.not_null_stg_linkedin__account_history_account_id": [], "test.linkedin_source.not_null_stg_linkedin__account_history_valid_from": [], "model.facebook_ads.facebook_ads__ad_adapter": ["model.ad_reporting.stg_facebook_ads", "model.facebook_ads.facebook_ads__account_report", "model.facebook_ads.facebook_ads__ad_set_report", "model.facebook_ads.facebook_ads__campaign_report"], "model.facebook_ads.facebook_ads__campaign_report": [], "model.facebook_ads.facebook_ads__account_report": [], "model.facebook_ads.facebook_ads__ad_set_report": [], "model.facebook_ads.facebook_ads__creative_history_prep": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.google_ads_source.stg_google_ads__final_url_performance": ["model.google_ads.google_ads__url_ad_adapter", "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id", "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id"], "model.google_ads_source.stg_google_ads__criteria_performance": ["model.google_ads.google_ads__criteria_ad_adapter"], "model.google_ads_source.stg_google_ads__click_performance": ["model.google_ads.google_ads__click_performance", "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid", "test.google_ads_source.unique_stg_google_ads__click_performance_gclid"], "model.google_ads_source.stg_google_ads__criteria_performance_tmp": ["model.google_ads_source.stg_google_ads__criteria_performance", "model.google_ads_source.stg_google_ads__criteria_performance"], "model.google_ads_source.stg_google_ads__final_url_performance_tmp": ["model.google_ads_source.stg_google_ads__final_url_performance", "model.google_ads_source.stg_google_ads__final_url_performance"], "model.google_ads_source.stg_google_ads__click_performance_tmp": ["model.google_ads_source.stg_google_ads__click_performance", "model.google_ads_source.stg_google_ads__click_performance"], "test.google_ads_source.unique_stg_google_ads__click_performance_gclid": [], "test.google_ads_source.not_null_stg_google_ads__click_performance_gclid": [], "test.google_ads_source.unique_stg_google_ads__final_url_performance_final_url_performance_id": [], "test.google_ads_source.not_null_stg_google_ads__final_url_performance_final_url_performance_id": [], "model.ad_reporting.ad_reporting": [], "model.ad_reporting.stg_microsoft_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_facebook_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_linkedin_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_pinterest_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_google_ads": ["model.ad_reporting.ad_reporting"], "model.ad_reporting.stg_twitter_ads": ["model.ad_reporting.ad_reporting"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history": ["model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id", "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id"], "model.pinterest_source.stg_pinterest_ads__campaign_history": ["model.pinterest.int_pinterest_ads__most_recent_campaign", "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id", "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report": ["model.pinterest.pinterest_ads__ad_adapter", "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id", "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id"], "model.pinterest_source.stg_pinterest_ads__ad_group_history": ["model.pinterest.int_pinterest_ads__most_recent_ad_group", "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id", "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report"], "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp": ["model.pinterest_source.stg_pinterest_ads__campaign_history", "model.pinterest_source.stg_pinterest_ads__campaign_history"], "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp": ["model.pinterest_source.stg_pinterest_ads__ad_group_history", "model.pinterest_source.stg_pinterest_ads__ad_group_history"], "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history"], "test.pinterest_source.unique_stg_pinterest_ads__ad_group_history_version_id": [], "test.pinterest_source.not_null_stg_pinterest_ads__ad_group_history_version_id": [], "test.pinterest_source.unique_stg_pinterest_ads__campaign_history_version_id": [], "test.pinterest_source.not_null_stg_pinterest_ads__campaign_history_version_id": [], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_history_version_id": [], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_history_version_id": [], "test.pinterest_source.unique_stg_pinterest_ads__pin_promotion_report_report_id": [], "test.pinterest_source.not_null_stg_pinterest_ads__pin_promotion_report_report_id": [], "model.facebook_ads_source.stg_facebook_ads__basic_ad": ["model.facebook_ads.facebook_ads__ad_adapter"], "model.facebook_ads_source.stg_facebook_ads__creative_history": ["model.facebook_ads.facebook_ads__creative_history_prep", "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id"], "model.facebook_ads_source.stg_facebook_ads__campaign_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id"], "model.facebook_ads_source.stg_facebook_ads__account_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id"], "model.facebook_ads_source.stg_facebook_ads__ad_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history": ["model.facebook_ads.facebook_ads__ad_adapter", "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id"], "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history"], "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads_source.stg_facebook_ads__basic_ad"], "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_history"], "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__campaign_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"], "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads_source.stg_facebook_ads__creative_history"], "model.facebook_ads_source.stg_facebook_ads__account_history_tmp": ["model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__account_history"], "test.facebook_ads_source.not_null_stg_facebook_ads__account_history_account_id": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_history_ad_id": [], "test.facebook_ads_source.not_null_stg_facebook_ads__ad_set_history_ad_set_id": [], "test.facebook_ads_source.not_null_stg_facebook_ads__campaign_history_campaign_id": [], "test.facebook_ads_source.not_null_stg_facebook_ads__creative_history_creative_id": [], "model.microsoft_ads.microsoft_ads__ad_adapter": ["model.ad_reporting.stg_microsoft_ads", "model.microsoft_ads.microsoft_ads__account_report", "model.microsoft_ads.microsoft_ads__ad_group_report", "model.microsoft_ads.microsoft_ads__campaign_report"], "model.microsoft_ads.microsoft_ads__ad_group_report": [], "model.microsoft_ads.microsoft_ads__account_report": [], "model.microsoft_ads.microsoft_ads__campaign_report": [], "model.twitter_ads_source.stg_twitter_ads__line_item_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__campaign_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__account_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__tweet_url": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history": ["model.twitter_ads.twitter__ad_adapter"], "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp": ["model.twitter_ads_source.stg_twitter_ads__tweet_url", "model.twitter_ads_source.stg_twitter_ads__tweet_url"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report"], "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history"], "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history"], "model.twitter_ads_source.stg_twitter_ads__account_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__account_history"], "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history"], "model.linkedin.linkedin__campaign_ad_report": [], "model.linkedin.linkedin__account_ad_report": [], "model.linkedin.linkedin__campaign_group_ad_report": [], "model.linkedin.linkedin__ad_adapter": ["model.ad_reporting.stg_linkedin_ads", "model.linkedin.linkedin__account_ad_report", "model.linkedin.linkedin__campaign_ad_report", "model.linkedin.linkedin__campaign_group_ad_report", "test.linkedin.not_null_linkedin__ad_adapter_creative_id", "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id", "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id"], "test.linkedin.unique_linkedin__ad_adapter_daily_creative_id": [], "test.linkedin.not_null_linkedin__ad_adapter_daily_creative_id": [], "test.linkedin.not_null_linkedin__ad_adapter_creative_id": [], "source.microsoft_ads_source.microsoft_ads.ad_history": [], "source.microsoft_ads_source.microsoft_ads.campaign_history": [], "source.microsoft_ads_source.microsoft_ads.ad_group_history": [], "source.microsoft_ads_source.microsoft_ads.account_history": [], "source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report": [], "source.linkedin_source.linkedin.ad_analytics_by_creative": [], "source.linkedin_source.linkedin.creative_history": [], "source.linkedin_source.linkedin.campaign_history": [], "source.linkedin_source.linkedin.campaign_group_history": [], "source.linkedin_source.linkedin.account_history": [], "source.google_ads_source.adwords.final_url_performance": [], "source.google_ads_source.adwords.click_performance": [], "source.google_ads_source.adwords.criteria_performance": [], "source.pinterest_source.pinterest_ads.pin_promotion_report": [], "source.pinterest_source.pinterest_ads.pin_promotion_history": [], "source.pinterest_source.pinterest_ads.campaign_history": [], "source.pinterest_source.pinterest_ads.ad_group_history": [], "source.facebook_ads_source.facebook_ads.account_history": [], "source.facebook_ads_source.facebook_ads.ad_history": [], "source.facebook_ads_source.facebook_ads.ad_set_history": [], "source.facebook_ads_source.facebook_ads.basic_ad": [], "source.facebook_ads_source.facebook_ads.campaign_history": [], "source.facebook_ads_source.facebook_ads.creative_history": [], "source.twitter_ads_source.twitter_ads.account_history": [], "source.twitter_ads_source.twitter_ads.campaign_history": [], "source.twitter_ads_source.twitter_ads.line_item_history": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_history": [], "source.twitter_ads_source.twitter_ads.tweet_url": [], "source.twitter_ads_source.twitter_ads.promoted_tweet_report": []}}