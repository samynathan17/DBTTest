{"logs": [], "results": [{"node": {"raw_sql": "With calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_ads AS(\n            --LI_ADS\n      select\n           \n            Sum(cost_in_local_currency) as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            Sum(cost_in_local_currency)/ NULLIF(Sum(clicks),0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n\n) \n\nselect * from r_ads where r_metric_id=179", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "ADS_FACT"], "unique_id": "model.DBTTest.ADS_FACT", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/ADS_FACT.sql", "original_file_path": "models/UAT_Testing/ADS_FACT.sql", "name": "ADS_FACT", "resource_type": "model", "alias": "ADS_FACT", "checksum": {"name": "sha256", "checksum": "a49215a83e2be01cfe4f52cd50aad2631b4c8a5b23a742a4d52b8302ddef3bdc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/ADS_FACT.sql", "deferred": false, "compiled_sql": "With calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_ads AS(\n            --LI_ADS\n      select\n           \n            Sum(cost_in_local_currency) as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            Sum(cost_in_local_currency)/ NULLIF(Sum(clicks),0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n\n) \n\nselect * from r_ads where r_metric_id=179", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "With calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_ads AS(\n            --LI_ADS\n      select\n           \n            Sum(cost_in_local_currency) as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            Sum(cost_in_local_currency)/ NULLIF(Sum(clicks),0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n\n) \n\nselect * from r_ads where r_metric_id=179"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.351884365081787, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T13:09:21.111862Z", "completed_at": "2021-05-19T13:09:21.148911Z"}, {"name": "execute", "started_at": "2021-05-19T13:09:21.149350Z", "completed_at": "2021-05-19T13:09:24.045872Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_metric AS (\n    --- SF  oppor_won-1\n       select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD  \n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between PERIOD.start_date and PERIOD.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7\n\n         union   --Oppor loss -10\n        select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            10 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD  \n        where OPPORTUNITY.IS_WON='false'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --converted_leads-3\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            3 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead,PERIOD  \n        where UPPER(IS_CONVERTED) = 'TRUE'\n         and timeframe_type is not null\n         and to_date(CONVERTED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       union --new leads -4\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            4 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead,PERIOD  \n        where UPPER(IS_CONVERTED) = 'FALSE'\n         and upper(status)='NEW'\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --accounts -27\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            27 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account,PERIOD  \n        where 1=1\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --contact -29\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            29 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Contact,PERIOD  \n        where 1=1\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       --HS\n        union   --deal won -1 PROPERTY_HS_CREATEDATE\n        select\n           \n            count(Source_DEAL_ID) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            1 AS r_metric_id,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year \n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on deal.PROPERTY_CLOSEDATE=CLDR_DATE\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n       \n        union   -- Deal Los -10\n        select\n           \n            COALESCE(count(Source_DEAL_ID),0) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            10 AS r_metric_id,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal  inner join calendar on to_date(PROPERTY_CLOSEDATE)=CLDR_DATE\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n      union -- calls -39\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            39 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='CALL'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n    union -- Task completed -89\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            89 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='TASK'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7     \n\n    union -- (Marketing MEETING) -71\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            71 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='MEETING'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7      \n\n    union -- (Notes) -76\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            76 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='NOTE'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7       \n\n    union -- (Emails Logged) -66\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            66 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='EMAIL'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7            \n\n\n\n\n\n\n\n\n),fs AS(\n    select sum(count) as f_count,\n    sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(1000)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n union\n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7  \n   \n\n), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from r_metric ,fs where r_metric.r_metric_id=fs.f_metric_id \n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result  --where 1=1\n--r_timeframe_type='W'\n--  and r_metric_id=66\n--  and r_type='Month'", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "HS_SF_FACT"], "unique_id": "model.DBTTest.HS_SF_FACT", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/HS_SF_FACT.sql", "original_file_path": "models/UAT_Testing/HS_SF_FACT.sql", "name": "HS_SF_FACT", "resource_type": "model", "alias": "HS_SF_FACT", "checksum": {"name": "sha256", "checksum": "aa093ba89e15042b8dbf48cab2fcc152ed8faa4d5fb85691764b3b6c455ff628"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/HS_SF_FACT.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_metric AS (\n    --- SF  oppor_won-1\n       select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD  \n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between PERIOD.start_date and PERIOD.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7\n\n         union   --Oppor loss -10\n        select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            10 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD  \n        where OPPORTUNITY.IS_WON='false'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --converted_leads-3\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            3 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead,PERIOD  \n        where UPPER(IS_CONVERTED) = 'TRUE'\n         and timeframe_type is not null\n         and to_date(CONVERTED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       union --new leads -4\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            4 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead,PERIOD  \n        where UPPER(IS_CONVERTED) = 'FALSE'\n         and upper(status)='NEW'\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --accounts -27\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            27 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account,PERIOD  \n        where 1=1\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --contact -29\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            29 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Contact,PERIOD  \n        where 1=1\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       --HS\n        union   --deal won -1 PROPERTY_HS_CREATEDATE\n        select\n           \n            count(Source_DEAL_ID) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            1 AS r_metric_id,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year \n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on deal.PROPERTY_CLOSEDATE=CLDR_DATE\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n       \n        union   -- Deal Los -10\n        select\n           \n            COALESCE(count(Source_DEAL_ID),0) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            10 AS r_metric_id,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal  inner join calendar on to_date(PROPERTY_CLOSEDATE)=CLDR_DATE\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n      union -- calls -39\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            39 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='CALL'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n    union -- Task completed -89\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            89 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='TASK'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7     \n\n    union -- (Marketing MEETING) -71\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            71 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='MEETING'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7      \n\n    union -- (Notes) -76\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            76 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='NOTE'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7       \n\n    union -- (Emails Logged) -66\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            66 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='EMAIL'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7            \n\n\n\n\n\n\n\n\n),fs AS(\n    select sum(count) as f_count,\n    sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(1000)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n union\n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7  \n   \n\n), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from r_metric ,fs where r_metric.r_metric_id=fs.f_metric_id \n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result  --where 1=1\n--r_timeframe_type='W'\n--  and r_metric_id=66\n--  and r_type='Month'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_metric AS (\n    --- SF  oppor_won-1\n       select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD  \n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between PERIOD.start_date and PERIOD.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7\n\n         union   --Oppor loss -10\n        select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            10 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD  \n        where OPPORTUNITY.IS_WON='false'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --converted_leads-3\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            3 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead,PERIOD  \n        where UPPER(IS_CONVERTED) = 'TRUE'\n         and timeframe_type is not null\n         and to_date(CONVERTED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       union --new leads -4\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            4 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead,PERIOD  \n        where UPPER(IS_CONVERTED) = 'FALSE'\n         and upper(status)='NEW'\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --accounts -27\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            27 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account,PERIOD  \n        where 1=1\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --contact -29\n        select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            29 AS r_metric_id,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Contact,PERIOD  \n        where 1=1\n         and timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       --HS\n        union   --deal won -1 PROPERTY_HS_CREATEDATE\n        select\n           \n            count(Source_DEAL_ID) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            1 AS r_metric_id,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year \n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on deal.PROPERTY_CLOSEDATE=CLDR_DATE\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n       \n        union   -- Deal Los -10\n        select\n           \n            COALESCE(count(Source_DEAL_ID),0) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            10 AS r_metric_id,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal  inner join calendar on to_date(PROPERTY_CLOSEDATE)=CLDR_DATE\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n      union -- calls -39\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            39 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='CALL'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n    union -- Task completed -89\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            89 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='TASK'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7     \n\n    union -- (Marketing MEETING) -71\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            71 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='MEETING'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7      \n\n    union -- (Notes) -76\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            76 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='NOTE'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7       \n\n    union -- (Emails Logged) -66\n        select\n           \n            count(Source_ID) as r_count,\n            0 AS r_amount,\n            66 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(CREATED_AT)=CLDR_DATE\n         where Upper(eng.TYPE) ='EMAIL'\n         and timeframe_type is not null\n         and to_date(CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7            \n\n\n\n\n\n\n\n\n),fs AS(\n    select sum(count) as f_count,\n    sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(1000)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n union\n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7  \n   \n\n), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from r_metric ,fs where r_metric.r_metric_id=fs.f_metric_id \n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result  --where 1=1\n--r_timeframe_type='W'\n--  and r_metric_id=66\n--  and r_type='Month'"}, "error": null, "status": "SUCCESS 1", "execution_time": 11.511745691299438, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T13:09:24.466456Z", "completed_at": "2021-05-19T13:09:24.506175Z"}, {"name": "execute", "started_at": "2021-05-19T13:09:24.506594Z", "completed_at": "2021-05-19T13:09:35.567393Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE,CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE,CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),segr_metric AS (\n    --- SF  New Leads by industry 7\n       select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            7 AS r_metric_id,\n            INDUSTRY as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8\n\n         -- New Leads by Lead Source 18\n     union\n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            18 AS r_metric_id,\n            LEAD_SOURCE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --New Leads by Lead Status 19      \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            19 AS r_metric_id,\n            STATUS as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --Accounts by Type 28      \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            28 AS r_metric_id,\n            acc.TYPE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n       \n      union    --Leads by emp_id= 30     \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            30 AS r_metric_id,\n            owner_id as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8  \n\n      union    --Leads by location= 31   \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            31 AS r_metric_id,\n            concat(led.street,' ',led.city,' ',led.state,' ',led.postal_code,' ',led.country) as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead as led ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n     \n      union    --Opportunities by type = 32  \n     select \n            count(source_id) as r_count,\n            sum(oppo.AMOUNT) AS r_amount,\n            32 AS r_metric_id,\n            oppo.TYPE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as oppo ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n  -- HS\n       union    --Deals by Original Source Data= 52 \n      select \n            count(deal.Source_deal_id) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            52 AS r_metric_id,\n            OPPORTUNITY_STG.Source as r_segment_name,\n            deal.Source_type as r_Source_type, \n            calendar.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal left join DBT_SALESDATAFLO.Stg_Deal_Stage as OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = deal.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = deal.Source_type  inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n        where \n         timeframe_type is not null\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date\n        group by 4,5,6,7,8   \n    \n    union   --Deals Created by Pipeline 62\n\n        select\n           \n            count(Source_DEAL_ID) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            62 AS r_metric_id,\n            DEAL_PIPELINE_STAGE_ID as r_segment_name,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n    \n    union   --Revenue by Company 85\n\n        select\n           \n            count(Source_ID) as r_count,\n            COALESCE(sum(PROPERTY_ANNUALREVENUE),0) AS r_amount,\n            85 AS r_metric_id,\n            PROPERTY_NAME as r_segment_name,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Company inner join calendar on to_date(PROPERTY_CREATEDATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n\n\n\n \n\n),seg_fs AS(\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(10)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7,8\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe  from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n),compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_segment_name,\n    f_segment_name,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES'\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from segr_metric ,seg_fs where segr_metric.r_metric_id=seg_fs.f_metric_id \n    and r_segment_name = f_segment_name\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\n\nselect * from compare_result --where r_type='Year' and r_metric_id= 85", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "SF_HF_segmented"], "unique_id": "model.DBTTest.SF_HF_segmented", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/SF_HF_segmented.sql", "original_file_path": "models/UAT_Testing/SF_HF_segmented.sql", "name": "SF_HF_segmented", "resource_type": "model", "alias": "SF_HF_segmented", "checksum": {"name": "sha256", "checksum": "f54bfcbad651320129dfcbd0c56dc02062e7f2e7c068cd453cf417852abd70ca"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/SF_HF_segmented.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE,CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE,CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),segr_metric AS (\n    --- SF  New Leads by industry 7\n       select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            7 AS r_metric_id,\n            INDUSTRY as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8\n\n         -- New Leads by Lead Source 18\n     union\n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            18 AS r_metric_id,\n            LEAD_SOURCE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --New Leads by Lead Status 19      \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            19 AS r_metric_id,\n            STATUS as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --Accounts by Type 28      \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            28 AS r_metric_id,\n            acc.TYPE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n       \n      union    --Leads by emp_id= 30     \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            30 AS r_metric_id,\n            owner_id as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8  \n\n      union    --Leads by location= 31   \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            31 AS r_metric_id,\n            concat(led.street,' ',led.city,' ',led.state,' ',led.postal_code,' ',led.country) as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead as led ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n     \n      union    --Opportunities by type = 32  \n     select \n            count(source_id) as r_count,\n            sum(oppo.AMOUNT) AS r_amount,\n            32 AS r_metric_id,\n            oppo.TYPE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as oppo ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n  -- HS\n       union    --Deals by Original Source Data= 52 \n      select \n            count(deal.Source_deal_id) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            52 AS r_metric_id,\n            OPPORTUNITY_STG.Source as r_segment_name,\n            deal.Source_type as r_Source_type, \n            calendar.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal left join DBT_SALESDATAFLO.Stg_Deal_Stage as OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = deal.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = deal.Source_type  inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n        where \n         timeframe_type is not null\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date\n        group by 4,5,6,7,8   \n    \n    union   --Deals Created by Pipeline 62\n\n        select\n           \n            count(Source_DEAL_ID) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            62 AS r_metric_id,\n            DEAL_PIPELINE_STAGE_ID as r_segment_name,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n    \n    union   --Revenue by Company 85\n\n        select\n           \n            count(Source_ID) as r_count,\n            COALESCE(sum(PROPERTY_ANNUALREVENUE),0) AS r_amount,\n            85 AS r_metric_id,\n            PROPERTY_NAME as r_segment_name,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Company inner join calendar on to_date(PROPERTY_CREATEDATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n\n\n\n \n\n),seg_fs AS(\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(10)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7,8\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe  from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n),compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_segment_name,\n    f_segment_name,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES'\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from segr_metric ,seg_fs where segr_metric.r_metric_id=seg_fs.f_metric_id \n    and r_segment_name = f_segment_name\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\n\nselect * from compare_result --where r_type='Year' and r_metric_id= 85", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE,CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE,CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),segr_metric AS (\n    --- SF  New Leads by industry 7\n       select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            7 AS r_metric_id,\n            INDUSTRY as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8\n\n         -- New Leads by Lead Source 18\n     union\n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            18 AS r_metric_id,\n            LEAD_SOURCE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --New Leads by Lead Status 19      \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            19 AS r_metric_id,\n            STATUS as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --Accounts by Type 28      \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            28 AS r_metric_id,\n            acc.TYPE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n       \n      union    --Leads by emp_id= 30     \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            30 AS r_metric_id,\n            owner_id as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8  \n\n      union    --Leads by location= 31   \n     select \n            count(source_id) as r_count,\n            0 AS r_amount,\n            31 AS r_metric_id,\n            concat(led.street,' ',led.city,' ',led.state,' ',led.postal_code,' ',led.country) as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead as led ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n     \n      union    --Opportunities by type = 32  \n     select \n            count(source_id) as r_count,\n            sum(oppo.AMOUNT) AS r_amount,\n            32 AS r_metric_id,\n            oppo.TYPE as r_segment_name,\n            Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as oppo ,PERIOD  \n        where \n         timeframe_type is not null\n         and to_date(CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n  -- HS\n       union    --Deals by Original Source Data= 52 \n      select \n            count(deal.Source_deal_id) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            52 AS r_metric_id,\n            OPPORTUNITY_STG.Source as r_segment_name,\n            deal.Source_type as r_Source_type, \n            calendar.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal left join DBT_SALESDATAFLO.Stg_Deal_Stage as OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = deal.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = deal.Source_type  inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n        where \n         timeframe_type is not null\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date\n        group by 4,5,6,7,8   \n    \n    union   --Deals Created by Pipeline 62\n\n        select\n           \n            count(Source_DEAL_ID) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            62 AS r_metric_id,\n            DEAL_PIPELINE_STAGE_ID as r_segment_name,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n    \n    union   --Revenue by Company 85\n\n        select\n           \n            count(Source_ID) as r_count,\n            COALESCE(sum(PROPERTY_ANNUALREVENUE),0) AS r_amount,\n            85 AS r_metric_id,\n            PROPERTY_NAME as r_segment_name,\n            Source_type as r_Source_type,\n            type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Company inner join calendar on to_date(PROPERTY_CREATEDATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n\n\n\n \n\n),seg_fs AS(\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(10)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7,8\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe  from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n),compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_segment_name,\n    f_segment_name,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES'\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from segr_metric ,seg_fs where segr_metric.r_metric_id=seg_fs.f_metric_id \n    and r_segment_name = f_segment_name\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\n\nselect * from compare_result --where r_type='Year' and r_metric_id= 85"}, "error": null, "status": "SUCCESS 1", "execution_time": 10.584251880645752, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T13:09:35.981027Z", "completed_at": "2021-05-19T13:09:36.072644Z"}, {"name": "execute", "started_at": "2021-05-19T13:09:36.073077Z", "completed_at": "2021-05-19T13:09:46.147276Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "With timeframe AS (\n  select TIMEFRAMEID,SOURCE_TYPE,year,week_start as start_date,week_end as end_date,'Week' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,WEEK_NUM as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(weekend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,month_start as start_date,month_end as end_date,'Month' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,MONTH_NAME as timeframe_type from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(monthend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,QUARTER_START as start_date,QUARTER_END as end_date,'Quarter' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,QUTR_NUMBER as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(QUARTEREND_FLAG)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,YEAR_START as start_date,YEAR_END as end_date,'Year' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER, cast(year as varchar(10)) as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(YEAREND_FLAG)='TRUE'\n  \n  ),r_metric AS (\n    select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            timeframe.type as r_type,\n            timeframe_type as r_timeframe_type,\n            WEEK_NUM as r_week_num,MONTH_NAME as r_month_name,QUTR_NUMBER as r_qutr_num,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,timeframe --inner join timeframe on to_date(OPPORTUNITY.CREATED_DATE) = timeframe.TIMEFRAMEID\n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between timeframe.start_date and timeframe.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7,8,9,10\n ),fs AS(\n    select sum(count) as f_count,\n            sum(AMOUNT) AS f_amount,\n            metric_id AS f_metric_id,\n            ENTITY_ID as f_entity_id, \n            TIMEFRAME_TYPE as f_timeframe_type,\n            cast(tmf.year as varchar(1000)) as f_types_timeframe,\n            tmf.year as f_year\n          from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf  \n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n\n ), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from fs inner join r_metric on fs.f_metric_id=r_metric.r_metric_id where fs.f_metric_id=r_metric.r_metric_id\n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result where f_timeframe_type='Y' and f_metric_id=1  and f_entity_id='SF_RKLIVE_06012021'", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "Test_timeframe"], "unique_id": "model.DBTTest.Test_timeframe", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/Test_timeframe.sql", "original_file_path": "models/UAT_Testing/Test_timeframe.sql", "name": "Test_timeframe", "resource_type": "model", "alias": "Test_timeframe", "checksum": {"name": "sha256", "checksum": "20854f2cca89170381f9fa2bcc39bf73adfb2c59befa9bc553a43794f04556ec"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/Test_timeframe.sql", "deferred": false, "compiled_sql": "With timeframe AS (\n  select TIMEFRAMEID,SOURCE_TYPE,year,week_start as start_date,week_end as end_date,'Week' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,WEEK_NUM as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(weekend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,month_start as start_date,month_end as end_date,'Month' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,MONTH_NAME as timeframe_type from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(monthend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,QUARTER_START as start_date,QUARTER_END as end_date,'Quarter' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,QUTR_NUMBER as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(QUARTEREND_FLAG)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,YEAR_START as start_date,YEAR_END as end_date,'Year' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER, cast(year as varchar(10)) as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(YEAREND_FLAG)='TRUE'\n  \n  ),r_metric AS (\n    select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            timeframe.type as r_type,\n            timeframe_type as r_timeframe_type,\n            WEEK_NUM as r_week_num,MONTH_NAME as r_month_name,QUTR_NUMBER as r_qutr_num,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,timeframe --inner join timeframe on to_date(OPPORTUNITY.CREATED_DATE) = timeframe.TIMEFRAMEID\n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between timeframe.start_date and timeframe.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7,8,9,10\n ),fs AS(\n    select sum(count) as f_count,\n            sum(AMOUNT) AS f_amount,\n            metric_id AS f_metric_id,\n            ENTITY_ID as f_entity_id, \n            TIMEFRAME_TYPE as f_timeframe_type,\n            cast(tmf.year as varchar(1000)) as f_types_timeframe,\n            tmf.year as f_year\n          from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf  \n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n\n ), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from fs inner join r_metric on fs.f_metric_id=r_metric.r_metric_id where fs.f_metric_id=r_metric.r_metric_id\n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result where f_timeframe_type='Y' and f_metric_id=1  and f_entity_id='SF_RKLIVE_06012021'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "With timeframe AS (\n  select TIMEFRAMEID,SOURCE_TYPE,year,week_start as start_date,week_end as end_date,'Week' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,WEEK_NUM as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(weekend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,month_start as start_date,month_end as end_date,'Month' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,MONTH_NAME as timeframe_type from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(monthend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,QUARTER_START as start_date,QUARTER_END as end_date,'Quarter' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,QUTR_NUMBER as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(QUARTEREND_FLAG)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,YEAR_START as start_date,YEAR_END as end_date,'Year' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER, cast(year as varchar(10)) as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(YEAREND_FLAG)='TRUE'\n  \n  ),r_metric AS (\n    select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            timeframe.type as r_type,\n            timeframe_type as r_timeframe_type,\n            WEEK_NUM as r_week_num,MONTH_NAME as r_month_name,QUTR_NUMBER as r_qutr_num,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,timeframe --inner join timeframe on to_date(OPPORTUNITY.CREATED_DATE) = timeframe.TIMEFRAMEID\n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between timeframe.start_date and timeframe.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7,8,9,10\n ),fs AS(\n    select sum(count) as f_count,\n            sum(AMOUNT) AS f_amount,\n            metric_id AS f_metric_id,\n            ENTITY_ID as f_entity_id, \n            TIMEFRAME_TYPE as f_timeframe_type,\n            cast(tmf.year as varchar(1000)) as f_types_timeframe,\n            tmf.year as f_year\n          from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf  \n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n\n ), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from fs inner join r_metric on fs.f_metric_id=r_metric.r_metric_id where fs.f_metric_id=r_metric.r_metric_id\n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result where f_timeframe_type='Y' and f_metric_id=1  and f_entity_id='SF_RKLIVE_06012021'"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.280773162841797, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-19T13:09:46.567901Z", "completed_at": "2021-05-19T13:09:46.595292Z"}, {"name": "execute", "started_at": "2021-05-19T13:09:46.595787Z", "completed_at": "2021-05-19T13:09:49.437154Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2021-05-19T13:09:51.752257Z", "elapsed_time": 39.25869584083557}