{"logs": [], "results": [{"node": {"raw_sql": "select * from {{ var('creative_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__creative_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__creative_history_tmp.sql", "name": "stg_facebook_ads__creative_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "9739630c2ad58df6c8af45b975184033f33d253995965dbbeec7cdfb859356b9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["facebook_ads", "creative_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.facebook_ads_source.facebook_ads.creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/facebook_ads_source/models/tmp/stg_facebook_ads__creative_history_tmp.sql", "deferred": false, "compiled_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.creative_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.creative_history"}, "error": "Database Error in model stg_facebook_ads__creative_history_tmp (models/tmp/stg_facebook_ads__creative_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.FACEBOOK_ADS' does not exist or not authorized.\n  compiled SQL at target/run/facebook_ads_source/models/tmp/stg_facebook_ads__creative_history_tmp.sql", "status": "ERROR", "execution_time": 2.267843246459961, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * from {{ var('account_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__account_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__account_history_tmp.sql", "name": "stg_facebook_ads__account_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "32a3a39947f962fa98285ef5da42266cc9597e61549d28313917111c3d05c4b8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["facebook_ads", "account_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.facebook_ads_source.facebook_ads.account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/facebook_ads_source/models/tmp/stg_facebook_ads__account_history_tmp.sql", "deferred": false, "compiled_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.account_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.account_history"}, "error": "Database Error in model stg_facebook_ads__account_history_tmp (models/tmp/stg_facebook_ads__account_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.FACEBOOK_ADS' does not exist or not authorized.\n  compiled SQL at target/run/facebook_ads_source/models/tmp/stg_facebook_ads__account_history_tmp.sql", "status": "ERROR", "execution_time": 2.191915988922119, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * from {{ var('ad_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_history_tmp.sql", "name": "stg_facebook_ads__ad_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__ad_history_tmp", "checksum": {"name": "sha256", "checksum": "66cb949cc32efc487c35c6ac049d29c76f364430c092c270a81ce248776e8435"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["facebook_ads", "ad_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.facebook_ads_source.facebook_ads.ad_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/facebook_ads_source/models/tmp/stg_facebook_ads__ad_history_tmp.sql", "deferred": false, "compiled_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.ad_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.ad_history"}, "error": "Database Error in model stg_facebook_ads__ad_history_tmp (models/tmp/stg_facebook_ads__ad_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.FACEBOOK_ADS' does not exist or not authorized.\n  compiled SQL at target/run/facebook_ads_source/models/tmp/stg_facebook_ads__ad_history_tmp.sql", "status": "ERROR", "execution_time": 2.3597047328948975, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * from {{ var('ad_set_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__ad_set_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__ad_set_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "name": "stg_facebook_ads__ad_set_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__ad_set_history_tmp", "checksum": {"name": "sha256", "checksum": "bf29e75751968ebb5e1d9847450d391fb0d3aa4801f83750addf2d44803f338f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["facebook_ads", "ad_set_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.facebook_ads_source.facebook_ads.ad_set_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/facebook_ads_source/models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "deferred": false, "compiled_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.ad_set_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.ad_set_history"}, "error": "Database Error in model stg_facebook_ads__ad_set_history_tmp (models/tmp/stg_facebook_ads__ad_set_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.FACEBOOK_ADS' does not exist or not authorized.\n  compiled SQL at target/run/facebook_ads_source/models/tmp/stg_facebook_ads__ad_set_history_tmp.sql", "status": "ERROR", "execution_time": 2.2250969409942627, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * from {{ var('basic_ad') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__basic_ad_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__basic_ad_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "name": "stg_facebook_ads__basic_ad_tmp", "resource_type": "model", "alias": "stg_facebook_ads__basic_ad_tmp", "checksum": {"name": "sha256", "checksum": "5a633882c5a43613ac72ce170100d435aa265b69fbc861654170386ae3f453b7"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["facebook_ads", "basic_ad"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.facebook_ads_source.facebook_ads.basic_ad"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/facebook_ads_source/models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "deferred": false, "compiled_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.basic_ad", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.basic_ad"}, "error": "Database Error in model stg_facebook_ads__basic_ad_tmp (models/tmp/stg_facebook_ads__basic_ad_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.FACEBOOK_ADS' does not exist or not authorized.\n  compiled SQL at target/run/facebook_ads_source/models/tmp/stg_facebook_ads__basic_ad_tmp.sql", "status": "ERROR", "execution_time": 2.350581169128418, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * from {{ var('campaign_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "tmp", "stg_facebook_ads__campaign_history_tmp"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "tmp/stg_facebook_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "name": "stg_facebook_ads__campaign_history_tmp", "resource_type": "model", "alias": "stg_facebook_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "f713d6482194a258d74381dc5fee6600c579709da850acb3f90d6c4fd5e98ebc"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["facebook_ads", "campaign_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.facebook_ads_source.facebook_ads.campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/facebook_ads_source/models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "deferred": false, "compiled_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.campaign_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from DATAFLOTEST_DATABASE.facebook_ads.campaign_history"}, "error": "Database Error in model stg_facebook_ads__campaign_history_tmp (models/tmp/stg_facebook_ads__campaign_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.FACEBOOK_ADS' does not exist or not authorized.\n  compiled SQL at target/run/facebook_ads_source/models/tmp/stg_facebook_ads__campaign_history_tmp.sql", "status": "ERROR", "execution_time": 2.1777734756469727, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__account_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__account_history_tmp", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__account_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__account_history_tmp.sql", "name": "stg_linkedin__account_history_tmp", "resource_type": "model", "alias": "stg_linkedin__account_history_tmp", "checksum": {"name": "sha256", "checksum": "507b2d73a5d179ae1e5f4a45315c44a57983481cd15fe8835f7ec23d67407325"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["linkedin", "account_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.linkedin_source.linkedin.account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/linkedin_source/models/tmp/stg_linkedin__account_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.account_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.account_history"}, "error": "Database Error in model stg_linkedin__account_history_tmp (models/tmp/stg_linkedin__account_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.LINKEDIN_ADS' does not exist or not authorized.\n  compiled SQL at target/run/linkedin_source/models/tmp/stg_linkedin__account_history_tmp.sql", "status": "ERROR", "execution_time": 2.2055187225341797, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('ad_analytics_by_creative') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__ad_analytics_by_creative_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "name": "stg_linkedin__ad_analytics_by_creative_tmp", "resource_type": "model", "alias": "stg_linkedin__ad_analytics_by_creative_tmp", "checksum": {"name": "sha256", "checksum": "149662e300437302314d44f3ca4038be5caea5292080f81b8d4f928ad30a8e26"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["linkedin", "ad_analytics_by_creative"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.linkedin_source.linkedin.ad_analytics_by_creative"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/linkedin_source/models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.ad_analytics_by_creative", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.ad_analytics_by_creative"}, "error": "Database Error in model stg_linkedin__ad_analytics_by_creative_tmp (models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.LINKEDIN_ADS' does not exist or not authorized.\n  compiled SQL at target/run/linkedin_source/models/tmp/stg_linkedin__ad_analytics_by_creative_tmp.sql", "status": "ERROR", "execution_time": 2.3351340293884277, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('campaign_group_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__campaign_group_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__campaign_group_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__campaign_group_history_tmp.sql", "name": "stg_linkedin__campaign_group_history_tmp", "resource_type": "model", "alias": "stg_linkedin__campaign_group_history_tmp", "checksum": {"name": "sha256", "checksum": "5c8d7b73b2d6858e838ae8c60f86ad34518ec7a09197352cf36ae8dc3702cef4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["linkedin", "campaign_group_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.linkedin_source.linkedin.campaign_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/linkedin_source/models/tmp/stg_linkedin__campaign_group_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.campaign_group_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.campaign_group_history"}, "error": "Database Error in model stg_linkedin__campaign_group_history_tmp (models/tmp/stg_linkedin__campaign_group_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.LINKEDIN_ADS' does not exist or not authorized.\n  compiled SQL at target/run/linkedin_source/models/tmp/stg_linkedin__campaign_group_history_tmp.sql", "status": "ERROR", "execution_time": 2.2008519172668457, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__campaign_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_history_tmp", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__campaign_history_tmp.sql", "name": "stg_linkedin__campaign_history_tmp", "resource_type": "model", "alias": "stg_linkedin__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["linkedin", "campaign_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.linkedin_source.linkedin.campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/linkedin_source/models/tmp/stg_linkedin__campaign_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.campaign_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.campaign_history"}, "error": "Database Error in model stg_linkedin__campaign_history_tmp (models/tmp/stg_linkedin__campaign_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.LINKEDIN_ADS' does not exist or not authorized.\n  compiled SQL at target/run/linkedin_source/models/tmp/stg_linkedin__campaign_history_tmp.sql", "status": "ERROR", "execution_time": 2.1710317134857178, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('creative_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "tmp", "stg_linkedin__creative_history_tmp"], "unique_id": "model.linkedin_source.stg_linkedin__creative_history_tmp", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "tmp/stg_linkedin__creative_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin__creative_history_tmp.sql", "name": "stg_linkedin__creative_history_tmp", "resource_type": "model", "alias": "stg_linkedin__creative_history_tmp", "checksum": {"name": "sha256", "checksum": "0a9c48b8a93c4db4b87927959573fea6c2cb654b2c30967379d4e3682479c3b8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["linkedin", "creative_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.linkedin_source.linkedin.creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/linkedin_source/models/tmp/stg_linkedin__creative_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.creative_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.linkedin_ads.creative_history"}, "error": "Database Error in model stg_linkedin__creative_history_tmp (models/tmp/stg_linkedin__creative_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.LINKEDIN_ADS' does not exist or not authorized.\n  compiled SQL at target/run/linkedin_source/models/tmp/stg_linkedin__creative_history_tmp.sql", "status": "ERROR", "execution_time": 2.393117904663086, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('account_history') }}\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['account_id','modified_timestamp']) }} as account_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__account_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__account_history", "package_name": "microsoft_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__account_history.sql", "original_file_path": "models/stg_microsoft_ads__account_history.sql", "name": "stg_microsoft_ads__account_history", "resource_type": "model", "alias": "stg_microsoft_ads__account_history", "checksum": {"name": "sha256", "checksum": "19867b7e9b8fc35feaff5ed55f0f759fc4ed2817d6852bdd611fbbed8906a579"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["microsoft_ads", "account_history"]], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.microsoft_ads_source.microsoft_ads.account_history"]}, "description": "Each record in this table represents a version of a Microsoft account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_version_id": {"name": "account_version_id", "description": "A unique ID for the version of an account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/run/microsoft_ads_source/models/stg_microsoft_ads__account_history.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.account_history\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(account_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as account_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.account_history\n\n), fields as (\n\n    select \n        id as account_id,\n        name as account_name,\n        last_modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(account_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as account_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record"}, "error": "Database Error in model stg_microsoft_ads__account_history (models/stg_microsoft_ads__account_history.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.BINGADS' does not exist or not authorized.\n  compiled SQL at target/run/microsoft_ads_source/models/stg_microsoft_ads__account_history.sql", "status": "ERROR", "execution_time": 2.2430593967437744, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_group_history') }}\n\n), fields as (\n\n    select \n        id as ad_group_id,\n        campaign_id,\n        name as ad_group_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_group_id','modified_timestamp']) }} as ad_group_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_group_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_group_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "package_name": "microsoft_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__ad_group_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_group_history.sql", "name": "stg_microsoft_ads__ad_group_history", "resource_type": "model", "alias": "stg_microsoft_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "81a7e9df750513ce63a8e599b4ff78de1871a81287524b327945ac5a3f1bbe86"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["microsoft_ads", "ad_group_history"]], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.microsoft_ads_source.microsoft_ads.ad_group_history"]}, "description": "Each record in this table represents a version of a Microsoft ad group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "The ID of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_version_id": {"name": "ad_group_version_id", "description": "A unique ID for the version of an ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/run/microsoft_ads_source/models/stg_microsoft_ads__ad_group_history.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.ad_group_history\n\n), fields as (\n\n    select \n        id as ad_group_id,\n        campaign_id,\n        name as ad_group_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(ad_group_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as ad_group_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_group_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.ad_group_history\n\n), fields as (\n\n    select \n        id as ad_group_id,\n        campaign_id,\n        name as ad_group_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(ad_group_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as ad_group_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_group_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record"}, "error": "Database Error in model stg_microsoft_ads__ad_group_history (models/stg_microsoft_ads__ad_group_history.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.BINGADS' does not exist or not authorized.\n  compiled SQL at target/run/microsoft_ads_source/models/stg_microsoft_ads__ad_group_history.sql", "status": "ERROR", "execution_time": 2.317244529724121, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_history') }}\n\n), fields as (\n\n    select \n        id as ad_id,\n        final_url,\n        ad_group_id,\n        modified_time as modified_timestamp\n    from base\n\n), url_fields as (\n\n    select \n        *,\n        {{ dbt_utils.split_part('final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('final_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_term') }} as utm_term\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_id','modified_timestamp']) }} as ad_version_id\n    from url_fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "package_name": "microsoft_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__ad_history.sql", "original_file_path": "models/stg_microsoft_ads__ad_history.sql", "name": "stg_microsoft_ads__ad_history", "resource_type": "model", "alias": "stg_microsoft_ads__ad_history", "checksum": {"name": "sha256", "checksum": "5206ec8f8977dd7cbd75cf3a7bc0717dde6ce75d8c52ac3050f8ec527a5d9f87"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["microsoft_ads", "ad_history"]], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.microsoft_ads_source.microsoft_ads.ad_history"]}, "description": "Each record in this table represents a version of a Microsoft ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "The full URL that the ad links to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_version_id": {"name": "ad_version_id", "description": "A unique ID for the version of an ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/run/microsoft_ads_source/models/stg_microsoft_ads__ad_history.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.ad_history\n\n), fields as (\n\n    select \n        id as ad_id,\n        final_url,\n        ad_group_id,\n        modified_time as modified_timestamp\n    from base\n\n), url_fields as (\n\n    select \n        *,\n        \n  \n\n    split_part(\n        final_url,\n        '?',\n        1\n        )\n\n\n as base_url,\n        \n  \n    try_cast(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n        '/',\n        1\n        )\n\n\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_host,\n        '/' || \n  \n    try_cast(\n  \n\n    split_part(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            ) = 0 \n        then ''\n    else \n        right(\n            \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n            \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            )\n        )\n    end\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_path,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_source=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_source,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_medium=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_medium,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_campaign=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_campaign,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_content=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_content,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_term=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_term\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(ad_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as ad_version_id\n    from url_fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.ad_history\n\n), fields as (\n\n    select \n        id as ad_id,\n        final_url,\n        ad_group_id,\n        modified_time as modified_timestamp\n    from base\n\n), url_fields as (\n\n    select \n        *,\n        \n  \n\n    split_part(\n        final_url,\n        '?',\n        1\n        )\n\n\n as base_url,\n        \n  \n    try_cast(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n        '/',\n        1\n        )\n\n\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_host,\n        '/' || \n  \n    try_cast(\n  \n\n    split_part(\n        \n\n    case when \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            ) = 0 \n        then ''\n    else \n        right(\n            \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n,\n            \n    \n    length(\n        \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n-coalesce(\n            nullif(\n\n    position(\n        '/' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n, 0),\n            \n\n    position(\n        '?' in \n\n    replace(\n        \n\n    replace(\n        final_url,\n        'http://',\n        ''\n    )\n    \n\n\n,\n        'https://',\n        ''\n    )\n    \n\n\n\n    )\n - 1\n            )\n        )\n    end\n,\n        '?',\n        1\n        )\n\n\n as \n    varchar\n)\n\n as url_path,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_source=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_source,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_medium=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_medium,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_campaign=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_campaign,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_content=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_content,\n        nullif(\n  \n\n    split_part(\n        \n  \n\n    split_part(\n        final_url,\n        'utm_term=',\n        2\n        )\n\n\n,\n        '&',\n        1\n        )\n\n\n,'') as utm_term\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(ad_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as ad_version_id\n    from url_fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by ad_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record"}, "error": "Database Error in model stg_microsoft_ads__ad_history (models/stg_microsoft_ads__ad_history.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.BINGADS' does not exist or not authorized.\n  compiled SQL at target/run/microsoft_ads_source/models/stg_microsoft_ads__ad_history.sql", "status": "ERROR", "execution_time": 2.2002973556518555, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ad_performance_daily_report')}}\n\n), fields as (\n\n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        clicks,\n        impressions,\n        spend\n    from base\n\n)\n\nselect *\nfrom fields", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__ad_performance_daily_report"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "package_name": "microsoft_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__ad_performance_daily_report.sql", "original_file_path": "models/stg_microsoft_ads__ad_performance_daily_report.sql", "name": "stg_microsoft_ads__ad_performance_daily_report", "resource_type": "model", "alias": "stg_microsoft_ads__ad_performance_daily_report", "checksum": {"name": "sha256", "checksum": "145e193000e5fc77f910f3fe9e3f47104b54389a6da7c9796c82867d0cbe9b92"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["microsoft_ads", "ad_performance_daily_report"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.microsoft_ads_source.microsoft_ads.ad_performance_daily_report"]}, "description": "Each record in this table represents the daily performance of a Microsoft ad.", "columns": {"date_day": {"name": "date_day", "description": "The date of the ad performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the corresponding campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the corresponding ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the corresponding ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "The currency that spend and other metrics are reported in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of advertising spend that occurred for that ad on the date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/run/microsoft_ads_source/models/stg_microsoft_ads__ad_performance_daily_report.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.ad_performance_daily_report\n\n), fields as (\n\n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        clicks,\n        impressions,\n        spend\n    from base\n\n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.ad_performance_daily_report\n\n), fields as (\n\n    select \n        date as date_day,\n        account_id,\n        campaign_id,\n        ad_group_id,\n        ad_id,\n        currency_code,\n        clicks,\n        impressions,\n        spend\n    from base\n\n)\n\nselect *\nfrom fields"}, "error": "Database Error in model stg_microsoft_ads__ad_performance_daily_report (models/stg_microsoft_ads__ad_performance_daily_report.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.BINGADS' does not exist or not authorized.\n  compiled SQL at target/run/microsoft_ads_source/models/stg_microsoft_ads__ad_performance_daily_report.sql", "status": "ERROR", "execution_time": 2.1783206462860107, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('campaign_history') }}\n\n), fields as (\n\n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','modified_timestamp']) }} as campaign_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads_source", "stg_microsoft_ads__campaign_history"], "unique_id": "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "package_name": "microsoft_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads_source", "path": "stg_microsoft_ads__campaign_history.sql", "original_file_path": "models/stg_microsoft_ads__campaign_history.sql", "name": "stg_microsoft_ads__campaign_history", "resource_type": "model", "alias": "stg_microsoft_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "362c1e62ce15b237e40d5f8c4e6e1c5d42b008ef5c554141250aec06ca272c14"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["microsoft_ads", "campaign_history"]], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": ["source.microsoft_ads_source.microsoft_ads.campaign_history"]}, "description": "Each record in this table represents a version of a Microsoft campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the corresponding account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "The time each version record was last modified, i.e. when that version was 'created'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_version_id": {"name": "campaign_version_id", "description": "A unique ID for the version of an campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_version": {"name": "is_most_recent_version", "description": "A boolean field for whether the version is the most up-to-date version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_microsoft_ads.yml", "build_path": "target/run/microsoft_ads_source/models/stg_microsoft_ads__campaign_history.sql", "deferred": false, "compiled_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.campaign_history\n\n), fields as (\n\n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as campaign_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\n\n    select *\n    from DATAFLOTEST_DATABASE.bingads.campaign_history\n\n), fields as (\n\n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        modified_time as modified_timestamp\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(\n    \n    coalesce(cast(campaign_id as \n    varchar\n), '') || '-' || coalesce(cast(modified_timestamp as \n    varchar\n), '')\n\n as \n    varchar\n)) as campaign_version_id\n    from fields\n\n), most_recent_record as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by modified_timestamp desc) = 1 as is_most_recent_version\n    from surrogate_key\n\n)\n\nselect *\nfrom most_recent_record"}, "error": "Database Error in model stg_microsoft_ads__campaign_history (models/stg_microsoft_ads__campaign_history.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.BINGADS' does not exist or not authorized.\n  compiled SQL at target/run/microsoft_ads_source/models/stg_microsoft_ads__campaign_history.sql", "status": "ERROR", "execution_time": 2.220310926437378, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('ad_group_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__ad_group_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "name": "stg_pinterest_ads__ad_group_history_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__ad_group_history_tmp", "checksum": {"name": "sha256", "checksum": "23726e9b019c8268e9aaae828c6c1430685538bef615e52f2c17436dd3615dfa"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["pinterest_ads", "ad_group_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.pinterest_source.pinterest_ads.ad_group_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/pinterest_source/models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.ad_group_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.ad_group_history"}, "error": "Database Error in model stg_pinterest_ads__ad_group_history_tmp (models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.PINTEREST_ADS' does not exist or not authorized.\n  compiled SQL at target/run/pinterest_source/models/tmp/stg_pinterest_ads__ad_group_history_tmp.sql", "status": "ERROR", "execution_time": 2.196789264678955, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__campaign_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "name": "stg_pinterest_ads__campaign_history_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "ea41c8d4ba83ff540a5f38f481cbd17406e99954f8b9b7b086ac94203a8dd6bd"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["pinterest_ads", "campaign_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.pinterest_source.pinterest_ads.campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/pinterest_source/models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.campaign_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.campaign_history"}, "error": "Database Error in model stg_pinterest_ads__campaign_history_tmp (models/tmp/stg_pinterest_ads__campaign_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.PINTEREST_ADS' does not exist or not authorized.\n  compiled SQL at target/run/pinterest_source/models/tmp/stg_pinterest_ads__campaign_history_tmp.sql", "status": "ERROR", "execution_time": 2.358105421066284, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('pin_promotion_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_history_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_history_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_history_tmp", "checksum": {"name": "sha256", "checksum": "065bd24ab667bb3742cf11e3d96295c4c78ecdc04bb4d86a8bfa521482c55e71"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["pinterest_ads", "pin_promotion_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.pinterest_source.pinterest_ads.pin_promotion_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.pin_promotion_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.pin_promotion_history"}, "error": "Database Error in model stg_pinterest_ads__pin_promotion_history_tmp (models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.PINTEREST_ADS' does not exist or not authorized.\n  compiled SQL at target/run/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_history_tmp.sql", "status": "ERROR", "execution_time": 2.18902850151062, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('pin_promotion_report') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "tmp", "stg_pinterest_ads__pin_promotion_report_tmp"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "original_file_path": "models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "name": "stg_pinterest_ads__pin_promotion_report_tmp", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_report_tmp", "checksum": {"name": "sha256", "checksum": "18cfa5bd72f823f350eb4fd5f5400957cc628d66510236ca582e0186f4ed24f4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["pinterest_ads", "pin_promotion_report"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.pinterest_source.pinterest_ads.pin_promotion_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.pin_promotion_report", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.pinterest_ads.pin_promotion_report"}, "error": "Database Error in model stg_pinterest_ads__pin_promotion_report_tmp (models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.PINTEREST_ADS' does not exist or not authorized.\n  compiled SQL at target/run/pinterest_source/models/tmp/stg_pinterest_ads__pin_promotion_report_tmp.sql", "status": "ERROR", "execution_time": 2.1935932636260986, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('account_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__account_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__account_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__account_history_tmp.sql", "name": "stg_twitter_ads__account_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__account_history_tmp", "checksum": {"name": "sha256", "checksum": "6151f500892f8291a211d3042fa8a914d37cc5bd4934ec2821bf61b6391f9b3a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["twitter_ads", "account_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.twitter_ads_source.twitter_ads.account_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/twitter_ads_source/models/tmp/stg_twitter_ads__account_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.account_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.account_history"}, "error": "Database Error in model stg_twitter_ads__account_history_tmp (models/tmp/stg_twitter_ads__account_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.TWITTER_ADS' does not exist or not authorized.\n  compiled SQL at target/run/twitter_ads_source/models/tmp/stg_twitter_ads__account_history_tmp.sql", "status": "ERROR", "execution_time": 2.399477005004883, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('campaign_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__campaign_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "name": "stg_twitter_ads__campaign_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "d695c134485444137d663f41732085a5cfa81de49f3ec2676e9f8e58f1c62c02"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["twitter_ads", "campaign_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.twitter_ads_source.twitter_ads.campaign_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/twitter_ads_source/models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.campaign_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.campaign_history"}, "error": "Database Error in model stg_twitter_ads__campaign_history_tmp (models/tmp/stg_twitter_ads__campaign_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.TWITTER_ADS' does not exist or not authorized.\n  compiled SQL at target/run/twitter_ads_source/models/tmp/stg_twitter_ads__campaign_history_tmp.sql", "status": "ERROR", "execution_time": 2.162109613418579, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('line_item_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__line_item_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__line_item_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "name": "stg_twitter_ads__line_item_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__line_item_history_tmp", "checksum": {"name": "sha256", "checksum": "50568a1b16de7a4a21448a595d2dac8a5ef6cc53134150ba5ccca4a9ce8ac3f7"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["twitter_ads", "line_item_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.twitter_ads_source.twitter_ads.line_item_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/twitter_ads_source/models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.line_item_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.line_item_history"}, "error": "Database Error in model stg_twitter_ads__line_item_history_tmp (models/tmp/stg_twitter_ads__line_item_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.TWITTER_ADS' does not exist or not authorized.\n  compiled SQL at target/run/twitter_ads_source/models/tmp/stg_twitter_ads__line_item_history_tmp.sql", "status": "ERROR", "execution_time": 2.3437201976776123, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_history') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_history_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_history_tmp", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_history_tmp", "checksum": {"name": "sha256", "checksum": "318c404eef398ff876b5c1aeed0868355f7adc9f8a87e8e253a21d9a111d67e9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["twitter_ads", "promoted_tweet_history"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.twitter_ads_source.twitter_ads.promoted_tweet_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.promoted_tweet_history", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.promoted_tweet_history"}, "error": "Database Error in model stg_twitter_ads__promoted_tweet_history_tmp (models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.TWITTER_ADS' does not exist or not authorized.\n  compiled SQL at target/run/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_history_tmp.sql", "status": "ERROR", "execution_time": 2.1933844089508057, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('promoted_tweet_report') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__promoted_tweet_report_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "name": "stg_twitter_ads__promoted_tweet_report_tmp", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_report_tmp", "checksum": {"name": "sha256", "checksum": "bee4be3006388dac42d90797172a8b1060fd93c4afacff61aa61c0f48881d922"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["twitter_ads", "promoted_tweet_report"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.twitter_ads_source.twitter_ads.promoted_tweet_report"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.promoted_tweet_report", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.promoted_tweet_report"}, "error": "Database Error in model stg_twitter_ads__promoted_tweet_report_tmp (models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.TWITTER_ADS' does not exist or not authorized.\n  compiled SQL at target/run/twitter_ads_source/models/tmp/stg_twitter_ads__promoted_tweet_report_tmp.sql", "status": "ERROR", "execution_time": 2.1788148880004883, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('tweet_url') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "tmp", "stg_twitter_ads__tweet_url_tmp"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "tmp/stg_twitter_ads__tweet_url_tmp.sql", "original_file_path": "models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "name": "stg_twitter_ads__tweet_url_tmp", "resource_type": "model", "alias": "stg_twitter_ads__tweet_url_tmp", "checksum": {"name": "sha256", "checksum": "a3a5504a33848aa67f78a84a61c25b21c0afd6de09849963d1031c8f003b3e2d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["twitter_ads", "tweet_url"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.twitter_ads_source.twitter_ads.tweet_url"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/twitter_ads_source/models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.tweet_url", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.twitter_ads.tweet_url"}, "error": "Database Error in model stg_twitter_ads__tweet_url_tmp (models/tmp/stg_twitter_ads__tweet_url_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.TWITTER_ADS' does not exist or not authorized.\n  compiled SQL at target/run/twitter_ads_source/models/tmp/stg_twitter_ads__tweet_url_tmp.sql", "status": "ERROR", "execution_time": 2.194608211517334, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('google_ads__final_url_performance') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads_source", "tmp", "stg_google_ads__final_url_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__final_url_performance_tmp", "package_name": "google_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads_source", "path": "tmp/stg_google_ads__final_url_performance_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__final_url_performance_tmp.sql", "name": "stg_google_ads__final_url_performance_tmp", "resource_type": "model", "alias": "stg_google_ads__final_url_performance_tmp", "checksum": {"name": "sha256", "checksum": "39bc5a08bad45382306a5471022da5a84fe9b0a136a098fbfe755133362fedf7"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["adwords", "final_url_performance"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.google_ads_source.adwords.final_url_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/google_ads_source/models/tmp/stg_google_ads__final_url_performance_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.adwords.final_url_performance", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.adwords.final_url_performance"}, "error": "Database Error in model stg_google_ads__final_url_performance_tmp (models/tmp/stg_google_ads__final_url_performance_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.ADWORDS' does not exist or not authorized.\n  compiled SQL at target/run/google_ads_source/models/tmp/stg_google_ads__final_url_performance_tmp.sql", "status": "ERROR", "execution_time": 2.4479165077209473, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('google_ads__click_performance') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads_source", "tmp", "stg_google_ads__click_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__click_performance_tmp", "package_name": "google_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads_source", "path": "tmp/stg_google_ads__click_performance_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__click_performance_tmp.sql", "name": "stg_google_ads__click_performance_tmp", "resource_type": "model", "alias": "stg_google_ads__click_performance_tmp", "checksum": {"name": "sha256", "checksum": "c9d788fde9d96b012d19958261fe0ebb10f29fece959e828a14d7fbae3eec1ce"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["adwords", "click_performance"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.google_ads_source.adwords.click_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/google_ads_source/models/tmp/stg_google_ads__click_performance_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.adwords.click_performance", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.adwords.click_performance"}, "error": "Database Error in model stg_google_ads__click_performance_tmp (models/tmp/stg_google_ads__click_performance_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.ADWORDS' does not exist or not authorized.\n  compiled SQL at target/run/google_ads_source/models/tmp/stg_google_ads__click_performance_tmp.sql", "status": "ERROR", "execution_time": 2.1605563163757324, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ var('google_ads__criteria_performance') }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads_source", "tmp", "stg_google_ads__criteria_performance_tmp"], "unique_id": "model.google_ads_source.stg_google_ads__criteria_performance_tmp", "package_name": "google_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads_source", "path": "tmp/stg_google_ads__criteria_performance_tmp.sql", "original_file_path": "models/tmp/stg_google_ads__criteria_performance_tmp.sql", "name": "stg_google_ads__criteria_performance_tmp", "resource_type": "model", "alias": "stg_google_ads__criteria_performance_tmp", "checksum": {"name": "sha256", "checksum": "7dcd0105ffa8756de05ceb01442e8a8a0f5ffc49c768f1dc9019b4bf97e39646"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["adwords", "criteria_performance"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view"], "nodes": ["source.google_ads_source.adwords.criteria_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/google_ads_source/models/tmp/stg_google_ads__criteria_performance_tmp.sql", "deferred": false, "compiled_sql": "select *\nfrom DATAFLOTEST_DATABASE.adwords.criteria_performance", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom DATAFLOTEST_DATABASE.adwords.criteria_performance"}, "error": "Database Error in model stg_google_ads__criteria_performance_tmp (models/tmp/stg_google_ads__criteria_performance_tmp.sql)\n  002003 (02000): SQL compilation error:\n  Schema 'DATAFLOTEST_DATABASE.ADWORDS' does not exist or not authorized.\n  compiled SQL at target/run/google_ads_source/models/tmp/stg_google_ads__criteria_performance_tmp.sql", "status": "ERROR", "execution_time": 2.337005853652954, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "With calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_ads AS(\n            --==================== 1.LI_ADS ====================================================================\n      select\n           \n            Sum(cost_in_local_currency) as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            Sum(cost_in_local_currency)/ NULLIF(Sum(clicks),0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      ---========================== 2.GA ADS ===========================================\n\n      union\n        select\n           \n            coalesce(sum(cost), 0)  as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      union\n        select\n            coalesce(Sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(sum(cost)/ Sum(clicks), 0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      ---========================= 3.GSC =====================================================\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            195 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n     union\n        select\n           \n            coalesce(sum(impressions), 0)  as r_value,\n            198 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6         \n\n    union\n        select\n           \n            coalesce(sum(CTR), 0)  as r_value,\n            199 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n       -- =============== 4. FB_ADS ===========================================================   \n\n       union\n        select\n           \n            coalesce(sum(spend), 0)  as r_value,\n            172 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n         union\n        select\n           \n            coalesce(sum(INLINE_LINK_CLICKS), 0)  as r_value,\n            173 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6  \n\n      union\n        select\n           \n            coalesce(sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6     \n\n       union\n        select\n           \n            coalesce(sum(CTR), 0)  as r_value,\n            177 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n       union\n        select\n           \n            coalesce(sum(CPC), 0)  as r_value,\n            179 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6        \n\n       union\n        select\n           \n            coalesce(sum(CPM), 0)  as r_value,\n            188 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6    \n\n        union\n        select\n           \n            coalesce(sum(REACH), 0)  as r_value,\n            189 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6            \n      \n       union\n        select\n           \n            coalesce(sum(FREQUENCY), 0)  as r_value,\n            190 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6            \n\n) \n\nselect * from r_ads where 1=1\n--and r_metric_id=172 \nand r_source_type='FB_ADS_DRGRILL_30032021'", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "ADS_FACT"], "unique_id": "model.DBTTest.ADS_FACT", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/ADS_FACT.sql", "original_file_path": "models/UAT_Testing/ADS_FACT.sql", "name": "ADS_FACT", "resource_type": "model", "alias": "ADS_FACT", "checksum": {"name": "sha256", "checksum": "5fe9b7fe47074ec2343bd0355181de13ea30e09d13f310fe23309c2b4ea2a9ca"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/ADS_FACT.sql", "deferred": false, "compiled_sql": "With calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_ads AS(\n            --==================== 1.LI_ADS ====================================================================\n      select\n           \n            Sum(cost_in_local_currency) as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            Sum(cost_in_local_currency)/ NULLIF(Sum(clicks),0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      ---========================== 2.GA ADS ===========================================\n\n      union\n        select\n           \n            coalesce(sum(cost), 0)  as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      union\n        select\n            coalesce(Sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(sum(cost)/ Sum(clicks), 0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      ---========================= 3.GSC =====================================================\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            195 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n     union\n        select\n           \n            coalesce(sum(impressions), 0)  as r_value,\n            198 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6         \n\n    union\n        select\n           \n            coalesce(sum(CTR), 0)  as r_value,\n            199 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n       -- =============== 4. FB_ADS ===========================================================   \n\n       union\n        select\n           \n            coalesce(sum(spend), 0)  as r_value,\n            172 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n         union\n        select\n           \n            coalesce(sum(INLINE_LINK_CLICKS), 0)  as r_value,\n            173 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6  \n\n      union\n        select\n           \n            coalesce(sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6     \n\n       union\n        select\n           \n            coalesce(sum(CTR), 0)  as r_value,\n            177 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n       union\n        select\n           \n            coalesce(sum(CPC), 0)  as r_value,\n            179 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6        \n\n       union\n        select\n           \n            coalesce(sum(CPM), 0)  as r_value,\n            188 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6    \n\n        union\n        select\n           \n            coalesce(sum(REACH), 0)  as r_value,\n            189 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6            \n      \n       union\n        select\n           \n            coalesce(sum(FREQUENCY), 0)  as r_value,\n            190 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6            \n\n) \n\nselect * from r_ads where 1=1\n--and r_metric_id=172 \nand r_source_type='FB_ADS_DRGRILL_30032021'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "With calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_ads AS(\n            --==================== 1.LI_ADS ====================================================================\n      select\n           \n            Sum(cost_in_local_currency) as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6\n      union\n        select\n           \n            Sum(cost_in_local_currency)/ NULLIF(Sum(clicks),0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Ad_Analytics_By_Creative eng inner join calendar on to_date(DAY)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DAY) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      ---========================== 2.GA ADS ===========================================\n\n      union\n        select\n           \n            coalesce(sum(cost), 0)  as r_value,\n            172 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      union\n        select\n            coalesce(Sum(clicks), 0)  as r_value,\n            173 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(Sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(Sum(clicks)/ Sum(impressions), 0)  as r_value,\n            177 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6      \n\n      union\n        select\n            coalesce(sum(cost)/ Sum(clicks), 0)  as r_value,\n            179 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Final_URL_Performance eng inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n      ---========================= 3.GSC =====================================================\n\n      union\n        select\n           \n            coalesce(sum(clicks), 0)  as r_value,\n            195 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n     union\n        select\n           \n            coalesce(sum(impressions), 0)  as r_value,\n            198 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6         \n\n    union\n        select\n           \n            coalesce(sum(CTR), 0)  as r_value,\n            199 AS r_metric_id,\n            Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from DBT_SALESDATAFLO.Stg_Site_Report_By_Site site inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n       -- =============== 4. FB_ADS ===========================================================   \n\n       union\n        select\n           \n            coalesce(sum(spend), 0)  as r_value,\n            172 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n         union\n        select\n           \n            coalesce(sum(INLINE_LINK_CLICKS), 0)  as r_value,\n            173 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6  \n\n      union\n        select\n           \n            coalesce(sum(impressions), 0)  as r_value,\n            175 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6     \n\n       union\n        select\n           \n            coalesce(sum(CTR), 0)  as r_value,\n            177 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6   \n\n       union\n        select\n           \n            coalesce(sum(CPC), 0)  as r_value,\n            179 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6        \n\n       union\n        select\n           \n            coalesce(sum(CPM), 0)  as r_value,\n            188 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6    \n\n        union\n        select\n           \n            coalesce(sum(REACH), 0)  as r_value,\n            189 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6            \n      \n       union\n        select\n           \n            coalesce(sum(FREQUENCY), 0)  as r_value,\n            190 AS r_metric_id,\n            'FB_ADS_DRGRILL_30032021' as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n      from FB_ADS_DRGRILL_30032021.BASIC_AD BASIC_AD inner join calendar on to_date(DATE)=CLDR_DATE\n         where \n         timeframe_type is not null\n         and to_date(DATE) between calendar.start_date and calendar.end_date \n         group by 3,4,5,6            \n\n) \n\nselect * from r_ads where 1=1\n--and r_metric_id=172 \nand r_source_type='FB_ADS_DRGRILL_30032021'"}, "error": null, "status": "SUCCESS 1", "execution_time": 4.813898324966431, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:05.552655Z", "completed_at": "2021-05-24T00:34:05.594896Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:05.595186Z", "completed_at": "2021-05-24T00:34:09.947709Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_metric AS (\n    --- SF  oppor_won-1\n       select \n            count(OPPORTUNITY.source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and OPPORTUNITY.Source_type=usr.Source_type\n         and to_date(OPPORTUNITY.close_date) between PERIOD.start_date and PERIOD.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7\n\n         union   --Oppor loss -10\n        select \n            count(OPPORTUNITY.source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            10 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where OPPORTUNITY.IS_WON='false'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and OPPORTUNITY.Source_type=usr.Source_type\n         and to_date(OPPORTUNITY.close_date) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --converted_leads-3\n        select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            3 AS r_metric_id,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr  \n        where UPPER(IS_CONVERTED) = 'TRUE'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CONVERTED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       union --new leads -4\n        select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            4 AS r_metric_id,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where UPPER(led.IS_CONVERTED) = 'FALSE'\n         and upper(led.status)='NEW'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --accounts -27\n        select \n            count(acc.source_id) as r_count,\n            0 AS r_amount,\n            27 AS r_metric_id,\n            acc.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc,PERIOD,DBT_SALESDATAFLO.STG_USER  usr   \n        where 1=1\n         and timeframe_type is not null\n         and acc.owner_id=usr.source_id\n         and acc.Source_type=usr.Source_type\n         and to_date(acc.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --contact -29\n        select \n            count(contact.source_id) as r_count,\n            0 AS r_amount,\n            29 AS r_metric_id,\n            contact.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Contact contact,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr  \n        where 1=1\n         and timeframe_type is not null\n         and contact.owner_id=usr.source_id\n         and contact.Source_type=usr.Source_type\n         and to_date(contact.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       --HS\n        union   --deal won -1 PROPERTY_HS_CREATEDATE\n        select\n           \n            count(deal.Source_DEAL_ID) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            1 AS r_metric_id,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year \n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on to_date(deal.PROPERTY_CLOSEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n       \n        union   -- Deal Los -10\n        select\n           \n            COALESCE(count(deal.Source_DEAL_ID),0) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            10 AS r_metric_id,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal  inner join calendar on to_date(PROPERTY_CLOSEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n      union -- calls -39\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            39 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='CALL'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n    union -- Task completed -89\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            89 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='TASK'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7     \n\n    union -- (Marketing MEETING) -71\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            71 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='MEETING'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7      \n\n    union -- (Notes) -76\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            76 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='NOTE'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7       \n\n    union -- (Emails Logged) -66\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            66 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='EMAIL'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7            \n\n\n\n\n\n\n\n\n),fs AS(\n    select sum(count) as f_count,\n    sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(1000)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n union\n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7  \n   \n\n), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from r_metric ,fs where r_metric.r_metric_id=fs.f_metric_id \n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result  where 1=1\n  and R_SOURCE_TYPE ='HS_RKLIVE_01042021'\n--  and r_metric_id=1\n  and r_type='Year'", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "HS_SF_FACT"], "unique_id": "model.DBTTest.HS_SF_FACT", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/HS_SF_FACT.sql", "original_file_path": "models/UAT_Testing/HS_SF_FACT.sql", "name": "HS_SF_FACT", "resource_type": "model", "alias": "HS_SF_FACT", "checksum": {"name": "sha256", "checksum": "4404955118387b421a78101565695f4bce0b1e66a7868eb44d442c0a2c844463"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/HS_SF_FACT.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_metric AS (\n    --- SF  oppor_won-1\n       select \n            count(OPPORTUNITY.source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and OPPORTUNITY.Source_type=usr.Source_type\n         and to_date(OPPORTUNITY.close_date) between PERIOD.start_date and PERIOD.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7\n\n         union   --Oppor loss -10\n        select \n            count(OPPORTUNITY.source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            10 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where OPPORTUNITY.IS_WON='false'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and OPPORTUNITY.Source_type=usr.Source_type\n         and to_date(OPPORTUNITY.close_date) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --converted_leads-3\n        select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            3 AS r_metric_id,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr  \n        where UPPER(IS_CONVERTED) = 'TRUE'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CONVERTED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       union --new leads -4\n        select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            4 AS r_metric_id,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where UPPER(led.IS_CONVERTED) = 'FALSE'\n         and upper(led.status)='NEW'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --accounts -27\n        select \n            count(acc.source_id) as r_count,\n            0 AS r_amount,\n            27 AS r_metric_id,\n            acc.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc,PERIOD,DBT_SALESDATAFLO.STG_USER  usr   \n        where 1=1\n         and timeframe_type is not null\n         and acc.owner_id=usr.source_id\n         and acc.Source_type=usr.Source_type\n         and to_date(acc.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --contact -29\n        select \n            count(contact.source_id) as r_count,\n            0 AS r_amount,\n            29 AS r_metric_id,\n            contact.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Contact contact,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr  \n        where 1=1\n         and timeframe_type is not null\n         and contact.owner_id=usr.source_id\n         and contact.Source_type=usr.Source_type\n         and to_date(contact.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       --HS\n        union   --deal won -1 PROPERTY_HS_CREATEDATE\n        select\n           \n            count(deal.Source_DEAL_ID) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            1 AS r_metric_id,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year \n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on to_date(deal.PROPERTY_CLOSEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n       \n        union   -- Deal Los -10\n        select\n           \n            COALESCE(count(deal.Source_DEAL_ID),0) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            10 AS r_metric_id,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal  inner join calendar on to_date(PROPERTY_CLOSEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n      union -- calls -39\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            39 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='CALL'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n    union -- Task completed -89\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            89 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='TASK'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7     \n\n    union -- (Marketing MEETING) -71\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            71 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='MEETING'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7      \n\n    union -- (Notes) -76\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            76 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='NOTE'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7       \n\n    union -- (Emails Logged) -66\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            66 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='EMAIL'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7            \n\n\n\n\n\n\n\n\n),fs AS(\n    select sum(count) as f_count,\n    sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(1000)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n union\n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7  \n   \n\n), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from r_metric ,fs where r_metric.r_metric_id=fs.f_metric_id \n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result  where 1=1\n  and R_SOURCE_TYPE ='HS_RKLIVE_01042021'\n--  and r_metric_id=1\n  and r_type='Year'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE, CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE, CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),r_metric AS (\n    --- SF  oppor_won-1\n       select \n            count(OPPORTUNITY.source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and OPPORTUNITY.Source_type=usr.Source_type\n         and to_date(OPPORTUNITY.close_date) between PERIOD.start_date and PERIOD.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7\n\n         union   --Oppor loss -10\n        select \n            count(OPPORTUNITY.source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            10 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where OPPORTUNITY.IS_WON='false'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and OPPORTUNITY.Source_type=usr.Source_type\n         and to_date(OPPORTUNITY.close_date) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --converted_leads-3\n        select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            3 AS r_metric_id,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr  \n        where UPPER(IS_CONVERTED) = 'TRUE'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CONVERTED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       union --new leads -4\n        select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            4 AS r_metric_id,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr \n        where UPPER(led.IS_CONVERTED) = 'FALSE'\n         and upper(led.status)='NEW'\n         and timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --accounts -27\n        select \n            count(acc.source_id) as r_count,\n            0 AS r_amount,\n            27 AS r_metric_id,\n            acc.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc,PERIOD,DBT_SALESDATAFLO.STG_USER  usr   \n        where 1=1\n         and timeframe_type is not null\n         and acc.owner_id=usr.source_id\n         and acc.Source_type=usr.Source_type\n         and to_date(acc.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n        union --contact -29\n        select \n            count(contact.source_id) as r_count,\n            0 AS r_amount,\n            29 AS r_metric_id,\n            contact.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Contact contact,PERIOD ,DBT_SALESDATAFLO.STG_USER  usr  \n        where 1=1\n         and timeframe_type is not null\n         and contact.owner_id=usr.source_id\n         and contact.Source_type=usr.Source_type\n         and to_date(contact.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7\n\n       --HS\n        union   --deal won -1 PROPERTY_HS_CREATEDATE\n        select\n           \n            count(deal.Source_DEAL_ID) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            1 AS r_metric_id,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year \n        from DBT_SALESDATAFLO.Stg_Deal deal inner join calendar on to_date(deal.PROPERTY_CLOSEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%WON%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n       \n        union   -- Deal Los -10\n        select\n           \n            COALESCE(count(deal.Source_DEAL_ID),0) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            10 AS r_metric_id,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal  inner join calendar on to_date(PROPERTY_CLOSEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(DEAL_PIPELINE_STAGE_ID) like '%CLOSED%LOS%' \n         and PROPERTY_HS_IS_CLOSED='true'\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(PROPERTY_CLOSEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n      union -- calls -39\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            39 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='CALL'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7\n\n    union -- Task completed -89\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            89 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='TASK'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7     \n\n    union -- (Marketing MEETING) -71\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            71 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='MEETING'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7      \n\n    union -- (Notes) -76\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            76 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='NOTE'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7       \n\n    union -- (Emails Logged) -66\n        select\n           \n            count(eng.Source_ID) as r_count,\n            0 AS r_amount,\n            66 AS r_metric_id,\n            eng.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Engagement eng inner join calendar on to_date(eng.CREATED_AT)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where Upper(eng.TYPE) ='EMAIL'\n         and eng.Owner_id  =  usr.Source_OWNER_ID and eng.Source_type = usr.Source_type\n         and timeframe_type is not null\n         and to_date(eng.CREATED_AT) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7            \n\n\n\n\n\n\n\n\n),fs AS(\n    select sum(count) as f_count,\n    sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(1000)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n union\n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7\n\n  union \n  \n    select sum(count) as f_count,sum(amount)as f_amount,entity_id as f_entity_id ,metric_id as f_metric_id,tmf.year as f_year,timeframe_type as f_timeframe_type,tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7  \n   \n\n), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from r_metric ,fs where r_metric.r_metric_id=fs.f_metric_id \n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result  where 1=1\n  and R_SOURCE_TYPE ='HS_RKLIVE_01042021'\n--  and r_metric_id=1\n  and r_type='Year'"}, "error": null, "status": "SUCCESS 1", "execution_time": 8.275815725326538, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:10.521892Z", "completed_at": "2021-05-24T00:34:10.559292Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:10.559585Z", "completed_at": "2021-05-24T00:34:18.379130Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) \n            ELSE NULL end r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN trim(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3)) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as r_month_name   \n      \n      from SF_RKLIVE_06012021.PERIOD \n\n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_Quarter_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_Quarter_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        timeframe_d.QUTR_NUMBER\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Q'--'M','Q','W','D','PIT'\n    and timeframe_d.QUARTEREND_FLAG = 'TRUE'\n    and sales_f.report_date = timeframe_d.QUARTER_END\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year,timeframe_d.QUTR_NUMBER\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        r_entity_id,\n        entity_id,\n        r_year_num,\n        year,\n        r_Quarter_name,\n        QUTR_NUMBER,\n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_Quarter_name <> QUTR_NUMBER THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num  \n        and fact1.QUTR_NUMBER = raw1.r_Quarter_name \n\n    )\n\n   select * from  result_set", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "intermediate", "Quarter_wise"], "unique_id": "model.DBTTest.Quarter_wise", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "intermediate/Quarter_wise.sql", "original_file_path": "models/intermediate/Quarter_wise.sql", "name": "Quarter_wise", "resource_type": "model", "alias": "Quarter_wise", "checksum": {"name": "sha256", "checksum": "86e43d7b6f825ac741f5d741ea1e3e657f70e76065811f9a38b5a1c7b4f5c05f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/intermediate/Quarter_wise.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) \n            ELSE NULL end r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN trim(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3)) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as r_month_name   \n      \n      from SF_RKLIVE_06012021.PERIOD \n\n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_Quarter_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_Quarter_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        timeframe_d.QUTR_NUMBER\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Q'--'M','Q','W','D','PIT'\n    and timeframe_d.QUARTEREND_FLAG = 'TRUE'\n    and sales_f.report_date = timeframe_d.QUARTER_END\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year,timeframe_d.QUTR_NUMBER\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        r_entity_id,\n        entity_id,\n        r_year_num,\n        year,\n        r_Quarter_name,\n        QUTR_NUMBER,\n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_Quarter_name <> QUTR_NUMBER THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num  \n        and fact1.QUTR_NUMBER = raw1.r_Quarter_name \n\n    )\n\n   select * from  result_set", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) \n            ELSE NULL end r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN trim(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3)) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as r_month_name   \n      \n      from SF_RKLIVE_06012021.PERIOD \n\n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_Quarter_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_Quarter_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_Quarter_name \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        timeframe_d.QUTR_NUMBER\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Q'--'M','Q','W','D','PIT'\n    and timeframe_d.QUARTEREND_FLAG = 'TRUE'\n    and sales_f.report_date = timeframe_d.QUARTER_END\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year,timeframe_d.QUTR_NUMBER\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        r_entity_id,\n        entity_id,\n        r_year_num,\n        year,\n        r_Quarter_name,\n        QUTR_NUMBER,\n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_Quarter_name <> QUTR_NUMBER THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num  \n        and fact1.QUTR_NUMBER = raw1.r_Quarter_name \n\n    )\n\n   select * from  result_set"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.6637535095214844, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:18.800354Z", "completed_at": "2021-05-24T00:34:18.831526Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:18.831833Z", "completed_at": "2021-05-24T00:34:21.046619Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE,CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE,CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),segr_metric AS (\n    --- SF  New Leads by industry 7\n       select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            7 AS r_metric_id,\n            led.INDUSTRY as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         --and owner_id in (select distinct source_id from DBT_SALESDATAFLO.STG_USER)\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8\n\n         -- New Leads by Lead Source 18\n     union\n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            18 AS r_metric_id,\n            led.LEAD_SOURCE as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --New Leads by Lead Status 19      \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            19 AS r_metric_id,\n            led.STATUS as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --Accounts by Type 28      \n     select \n            count(acc.source_id) as r_count,\n            0 AS r_amount,\n            28 AS r_metric_id,\n            acc.TYPE as r_segment_name,\n            acc.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc ,PERIOD, DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and acc.Source_type=usr.Source_type\n         and to_date(acc.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n       \n      union    --Leads by emp_id= 30     \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            30 AS r_metric_id,\n            led.owner_id as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8  \n\n      union    --Leads by location= 31   \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            31 AS r_metric_id,\n            concat(led.street,' ',led.city,' ',led.state,' ',led.postal_code,' ',led.country) as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead as led ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n     \n      union    --Opportunities by type = 32  \n     select \n            count(oppo.source_id) as r_count,\n            sum(oppo.AMOUNT) AS r_amount,\n            32 AS r_metric_id,\n            oppo.TYPE as r_segment_name,\n            oppo.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as oppo ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and oppo.Source_type=usr.Source_type\n         and to_date(oppo.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n  -- HS\n       union    --Deals by Original Source Data= 52 \n      select \n            count(deal.Source_deal_id) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            52 AS r_metric_id,\n            OPPORTUNITY_STG.Source as r_segment_name,\n            deal.Source_type as r_Source_type, \n            calendar.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal \n        left join DBT_SALESDATAFLO.Stg_Deal_Stage as OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = deal.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = deal.Source_type \n        inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n        ,DBT_SALESDATAFLO.Stg_Owner usr\n        where \n         timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date\n        group by 4,5,6,7,8   \n    \n    union   --Deals Created by Pipeline 62\n\n        select\n           \n            count(deal.Source_DEAL_ID) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            62 AS r_metric_id,\n            deal.DEAL_PIPELINE_STAGE_ID as r_segment_name,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal \n        inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE, DBT_SALESDATAFLO.Stg_Owner usr\n         where \n         timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n    \n    union   --Revenue by Company 85\n\n        select\n           \n            count(cmpy.Source_ID) as r_count,\n            COALESCE(sum(cmpy.PROPERTY_ANNUALREVENUE),0) AS r_amount,\n            85 AS r_metric_id,\n            cmpy.PROPERTY_NAME as r_segment_name,\n            cmpy.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Company cmpy inner join calendar on to_date(PROPERTY_CREATEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where \n         timeframe_type is not null\n         and cmpy.PROPERTY_HUBSPOT_OWNER_ID  =  usr.Source_OWNER_ID and cmpy.Source_type = usr.Source_type\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n\n\n\n \n\n),seg_fs AS(\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(10)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7,8\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe  from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n),compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_segment_name,\n    f_segment_name,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES'\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from segr_metric ,seg_fs where segr_metric.r_metric_id=seg_fs.f_metric_id \n    and r_segment_name = f_segment_name\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\n\nselect * from compare_result where r_type='Year' and R_SOURCE_TYPE ='HS_RKLIVE_01042021' --and r_metric_id= 32", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "SF_HF_segmented"], "unique_id": "model.DBTTest.SF_HF_segmented", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/SF_HF_segmented.sql", "original_file_path": "models/UAT_Testing/SF_HF_segmented.sql", "name": "SF_HF_segmented", "resource_type": "model", "alias": "SF_HF_segmented", "checksum": {"name": "sha256", "checksum": "bf0fde090497ebd5b001b9289b7cbac1ecc9be13c0e67e2177df0ba18efff78c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/SF_HF_segmented.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE,CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE,CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),segr_metric AS (\n    --- SF  New Leads by industry 7\n       select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            7 AS r_metric_id,\n            led.INDUSTRY as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         --and owner_id in (select distinct source_id from DBT_SALESDATAFLO.STG_USER)\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8\n\n         -- New Leads by Lead Source 18\n     union\n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            18 AS r_metric_id,\n            led.LEAD_SOURCE as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --New Leads by Lead Status 19      \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            19 AS r_metric_id,\n            led.STATUS as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --Accounts by Type 28      \n     select \n            count(acc.source_id) as r_count,\n            0 AS r_amount,\n            28 AS r_metric_id,\n            acc.TYPE as r_segment_name,\n            acc.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc ,PERIOD, DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and acc.Source_type=usr.Source_type\n         and to_date(acc.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n       \n      union    --Leads by emp_id= 30     \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            30 AS r_metric_id,\n            led.owner_id as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8  \n\n      union    --Leads by location= 31   \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            31 AS r_metric_id,\n            concat(led.street,' ',led.city,' ',led.state,' ',led.postal_code,' ',led.country) as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead as led ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n     \n      union    --Opportunities by type = 32  \n     select \n            count(oppo.source_id) as r_count,\n            sum(oppo.AMOUNT) AS r_amount,\n            32 AS r_metric_id,\n            oppo.TYPE as r_segment_name,\n            oppo.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as oppo ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and oppo.Source_type=usr.Source_type\n         and to_date(oppo.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n  -- HS\n       union    --Deals by Original Source Data= 52 \n      select \n            count(deal.Source_deal_id) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            52 AS r_metric_id,\n            OPPORTUNITY_STG.Source as r_segment_name,\n            deal.Source_type as r_Source_type, \n            calendar.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal \n        left join DBT_SALESDATAFLO.Stg_Deal_Stage as OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = deal.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = deal.Source_type \n        inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n        ,DBT_SALESDATAFLO.Stg_Owner usr\n        where \n         timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date\n        group by 4,5,6,7,8   \n    \n    union   --Deals Created by Pipeline 62\n\n        select\n           \n            count(deal.Source_DEAL_ID) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            62 AS r_metric_id,\n            deal.DEAL_PIPELINE_STAGE_ID as r_segment_name,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal \n        inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE, DBT_SALESDATAFLO.Stg_Owner usr\n         where \n         timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n    \n    union   --Revenue by Company 85\n\n        select\n           \n            count(cmpy.Source_ID) as r_count,\n            COALESCE(sum(cmpy.PROPERTY_ANNUALREVENUE),0) AS r_amount,\n            85 AS r_metric_id,\n            cmpy.PROPERTY_NAME as r_segment_name,\n            cmpy.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Company cmpy inner join calendar on to_date(PROPERTY_CREATEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where \n         timeframe_type is not null\n         and cmpy.PROPERTY_HUBSPOT_OWNER_ID  =  usr.Source_OWNER_ID and cmpy.Source_type = usr.Source_type\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n\n\n\n \n\n),seg_fs AS(\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(10)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7,8\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe  from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n),compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_segment_name,\n    f_segment_name,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES'\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from segr_metric ,seg_fs where segr_metric.r_metric_id=seg_fs.f_metric_id \n    and r_segment_name = f_segment_name\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\n\nselect * from compare_result where r_type='Year' and R_SOURCE_TYPE ='HS_RKLIVE_01042021' --and r_metric_id= 32", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select TYPE,start_date,end_date,\n            CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as timeframe_type from SF_RKLIVE_06012021.PERIOD\n       union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n           WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        union\n        Select TYPE,start_date,end_date,\n        CASE\n             WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as varchar(1100)) \n            ELSE NULL end as year ,\n        CASE\n             WHEN TYPE='Quarter'  THEN UPPER(LTRIM(RTRIM(CAST(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) AS varchar(100))))) ELSE NULL END as timeframe_type from SF_RKLIVE_06012021.PERIOD\n        \n),calendar AS(\n      select CLDR_DATE,CLDR_YEAR_START_DT as start_date,CLDR_YEAR_END_DT as end_date,year,'Year' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,cast(year as varchar(1000)) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR \n     union\n     select CLDR_DATE,CLDR_MNTH_STRT_DT as start_date,CLDR_MNTH_END_DT as end_date,year,'Month' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(MONTH_NAME) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n    union\n     select CLDR_DATE,WEEK_START_DATE as start_date,WEEK_END_DATE as end_date,year,'Week'as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,CONCAT('W',cast(CLDR_WEEK_NUM as varchar(1000))) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n     union\n     select CLDR_DATE,CLDR_QTR_STRT_DT as start_date,CLDR_QTR_END_DT as end_date,year,'Quarter' as type,MONTH_NAME,CLDR_WEEK_NUM,CLDR_QTR,UPPER(CLDR_QTR) as timeframe_type from DBT_SALESDATAFLO.DIM_CALENDAR\n\n),segr_metric AS (\n    --- SF  New Leads by industry 7\n       select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            7 AS r_metric_id,\n            led.INDUSTRY as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         --and owner_id in (select distinct source_id from DBT_SALESDATAFLO.STG_USER)\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8\n\n         -- New Leads by Lead Source 18\n     union\n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            18 AS r_metric_id,\n            led.LEAD_SOURCE as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --New Leads by Lead Status 19      \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            19 AS r_metric_id,\n            led.STATUS as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n\n      union    --Accounts by Type 28      \n     select \n            count(acc.source_id) as r_count,\n            0 AS r_amount,\n            28 AS r_metric_id,\n            acc.TYPE as r_segment_name,\n            acc.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Account acc ,PERIOD, DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and acc.Source_type=usr.Source_type\n         and to_date(acc.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8 \n       \n      union    --Leads by emp_id= 30     \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            30 AS r_metric_id,\n            led.owner_id as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead led,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8  \n\n      union    --Leads by location= 31   \n     select \n            count(led.source_id) as r_count,\n            0 AS r_amount,\n            31 AS r_metric_id,\n            concat(led.street,' ',led.city,' ',led.state,' ',led.postal_code,' ',led.country) as r_segment_name,\n            led.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Lead as led ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and led.Source_type=usr.Source_type\n         and to_date(led.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n     \n      union    --Opportunities by type = 32  \n     select \n            count(oppo.source_id) as r_count,\n            sum(oppo.AMOUNT) AS r_amount,\n            32 AS r_metric_id,\n            oppo.TYPE as r_segment_name,\n            oppo.Source_type as r_Source_type, \n            PERIOD.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as oppo ,PERIOD,DBT_SALESDATAFLO.STG_USER  usr\n        where \n         timeframe_type is not null\n         and owner_id=usr.source_id\n         and oppo.Source_type=usr.Source_type\n         and to_date(oppo.CREATED_DATE) between PERIOD.start_date and PERIOD.end_date\n        group by 4,5,6,7,8   \n  -- HS\n       union    --Deals by Original Source Data= 52 \n      select \n            count(deal.Source_deal_id) as r_count,\n            COALESCE(sum(PROPERTY_AMOUNT),0) AS r_amount,\n            52 AS r_metric_id,\n            OPPORTUNITY_STG.Source as r_segment_name,\n            deal.Source_type as r_Source_type, \n            calendar.TYPE as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal \n        left join DBT_SALESDATAFLO.Stg_Deal_Stage as OPPORTUNITY_STG on OPPORTUNITY_STG.SOURCE_DEAL_ID = deal.Source_DEAL_ID \n        and OPPORTUNITY_STG.Source_type = deal.Source_type \n        inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE\n        ,DBT_SALESDATAFLO.Stg_Owner usr\n        where \n         timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date\n        group by 4,5,6,7,8   \n    \n    union   --Deals Created by Pipeline 62\n\n        select\n           \n            count(deal.Source_DEAL_ID) as r_count,\n            COALESCE(sum(deal.PROPERTY_AMOUNT),0) AS r_amount,\n            62 AS r_metric_id,\n            deal.DEAL_PIPELINE_STAGE_ID as r_segment_name,\n            deal.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Deal deal \n        inner join calendar on to_date(deal.PROPERTY_CREATEDATE)=CLDR_DATE, DBT_SALESDATAFLO.Stg_Owner usr\n         where \n         timeframe_type is not null\n         and deal.Owner_id  =  usr.Source_OWNER_ID and deal.Source_type = usr.Source_type\n         and to_date(deal.PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n    \n    union   --Revenue by Company 85\n\n        select\n           \n            count(cmpy.Source_ID) as r_count,\n            COALESCE(sum(cmpy.PROPERTY_ANNUALREVENUE),0) AS r_amount,\n            85 AS r_metric_id,\n            cmpy.PROPERTY_NAME as r_segment_name,\n            cmpy.Source_type as r_Source_type,\n            calendar.type as r_type,\n            timeframe_type as r_timeframe_type,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Company cmpy inner join calendar on to_date(PROPERTY_CREATEDATE)=CLDR_DATE,DBT_SALESDATAFLO.Stg_Owner usr\n         where \n         timeframe_type is not null\n         and cmpy.PROPERTY_HUBSPOT_OWNER_ID  =  usr.Source_OWNER_ID and cmpy.Source_type = usr.Source_type\n         and to_date(PROPERTY_CREATEDATE) between calendar.start_date and calendar.end_date \n         group by 4,5,6,7,8\n\n\n\n \n\n),seg_fs AS(\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    cast(tmf.year as varchar(10)) as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7,8\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    UPPER(MONTH_NAME) as f_types_timeframe  from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='M'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.MONTH_END\n        and MONTHEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.QUTR_NUMBER as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='Q'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.QUARTER_END\n        and QUARTEREND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n    union\n    select sum(count) as f_count,sum(amount)as f_amount,cast(entity_id as varchar(1000)) as f_entity_id,\n    metric_id as f_metric_id,segment_name as f_segment_name,tmf.year as f_year,timeframe_type as f_timeframe_type,\n    tmf.WEEK_NUM as f_types_timeframe from DBT_SALESDATAFLO.FACT_SALES_SEGMENTED as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME as tmf\n    where \n        TIMEFRAME_TYPE='W'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.WEEK_END\n        and WEEKEND_FLAG='TRUE'\n    group by 3,4,5,6,7,8\n\n),compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_segment_name,\n    f_segment_name,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN case when r_type='Week' then 'W' else null end <> f_timeframe_type THEN 'YES'\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from segr_metric ,seg_fs where segr_metric.r_metric_id=seg_fs.f_metric_id \n    and r_segment_name = f_segment_name\n    and SUBSTRING(CAST(r_type AS varchar(1100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\n\nselect * from compare_result where r_type='Year' and R_SOURCE_TYPE ='HS_RKLIVE_01042021' --and r_metric_id= 32"}, "error": null, "status": "SUCCESS 1", "execution_time": 8.901753902435303, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:21.466676Z", "completed_at": "2021-05-24T00:34:21.505872Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:21.506178Z", "completed_at": "2021-05-24T00:34:29.948848Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "With timeframe AS (\n  select TIMEFRAMEID,SOURCE_TYPE,year,week_start as start_date,week_end as end_date,'Week' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,WEEK_NUM as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(weekend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,month_start as start_date,month_end as end_date,'Month' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,MONTH_NAME as timeframe_type from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(monthend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,QUARTER_START as start_date,QUARTER_END as end_date,'Quarter' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,QUTR_NUMBER as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(QUARTEREND_FLAG)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,YEAR_START as start_date,YEAR_END as end_date,'Year' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER, cast(year as varchar(10)) as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(YEAREND_FLAG)='TRUE'\n  \n  ),r_metric AS (\n    select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            timeframe.type as r_type,\n            timeframe_type as r_timeframe_type,\n            WEEK_NUM as r_week_num,MONTH_NAME as r_month_name,QUTR_NUMBER as r_qutr_num,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,timeframe --inner join timeframe on to_date(OPPORTUNITY.CREATED_DATE) = timeframe.TIMEFRAMEID\n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between timeframe.start_date and timeframe.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7,8,9,10\n ),fs AS(\n    select sum(count) as f_count,\n            sum(AMOUNT) AS f_amount,\n            metric_id AS f_metric_id,\n            ENTITY_ID as f_entity_id, \n            TIMEFRAME_TYPE as f_timeframe_type,\n            cast(tmf.year as varchar(1000)) as f_types_timeframe,\n            tmf.year as f_year\n          from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf  \n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n\n ), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from fs inner join r_metric on fs.f_metric_id=r_metric.r_metric_id where fs.f_metric_id=r_metric.r_metric_id\n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result where f_timeframe_type='Y' and f_metric_id=1  and f_entity_id='SF_RKLIVE_06012021'", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "UAT_Testing", "Test_timeframe"], "unique_id": "model.DBTTest.Test_timeframe", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "UAT_Testing/Test_timeframe.sql", "original_file_path": "models/UAT_Testing/Test_timeframe.sql", "name": "Test_timeframe", "resource_type": "model", "alias": "Test_timeframe", "checksum": {"name": "sha256", "checksum": "20854f2cca89170381f9fa2bcc39bf73adfb2c59befa9bc553a43794f04556ec"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/UAT_Testing/Test_timeframe.sql", "deferred": false, "compiled_sql": "With timeframe AS (\n  select TIMEFRAMEID,SOURCE_TYPE,year,week_start as start_date,week_end as end_date,'Week' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,WEEK_NUM as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(weekend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,month_start as start_date,month_end as end_date,'Month' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,MONTH_NAME as timeframe_type from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(monthend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,QUARTER_START as start_date,QUARTER_END as end_date,'Quarter' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,QUTR_NUMBER as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(QUARTEREND_FLAG)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,YEAR_START as start_date,YEAR_END as end_date,'Year' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER, cast(year as varchar(10)) as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(YEAREND_FLAG)='TRUE'\n  \n  ),r_metric AS (\n    select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            timeframe.type as r_type,\n            timeframe_type as r_timeframe_type,\n            WEEK_NUM as r_week_num,MONTH_NAME as r_month_name,QUTR_NUMBER as r_qutr_num,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,timeframe --inner join timeframe on to_date(OPPORTUNITY.CREATED_DATE) = timeframe.TIMEFRAMEID\n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between timeframe.start_date and timeframe.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7,8,9,10\n ),fs AS(\n    select sum(count) as f_count,\n            sum(AMOUNT) AS f_amount,\n            metric_id AS f_metric_id,\n            ENTITY_ID as f_entity_id, \n            TIMEFRAME_TYPE as f_timeframe_type,\n            cast(tmf.year as varchar(1000)) as f_types_timeframe,\n            tmf.year as f_year\n          from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf  \n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n\n ), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from fs inner join r_metric on fs.f_metric_id=r_metric.r_metric_id where fs.f_metric_id=r_metric.r_metric_id\n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result where f_timeframe_type='Y' and f_metric_id=1  and f_entity_id='SF_RKLIVE_06012021'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "With timeframe AS (\n  select TIMEFRAMEID,SOURCE_TYPE,year,week_start as start_date,week_end as end_date,'Week' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,WEEK_NUM as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(weekend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,month_start as start_date,month_end as end_date,'Month' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,MONTH_NAME as timeframe_type from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(monthend_flag)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,QUARTER_START as start_date,QUARTER_END as end_date,'Quarter' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER,QUTR_NUMBER as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(QUARTEREND_FLAG)='TRUE'\n  union \n  select TIMEFRAMEID,SOURCE_TYPE,year,YEAR_START as start_date,YEAR_END as end_date,'Year' as type,WEEK_NUM,MONTH_NAME,QUTR_NUMBER, cast(year as varchar(10)) as timeframe_type  from DBT_SALESDATAFLO.DIM_TIMEFRAME where UPPER(YEAREND_FLAG)='TRUE'\n  \n  ),r_metric AS (\n    select \n            count(source_id) as r_count,\n            sum(OPPORTUNITY.AMOUNT) AS r_amount,\n            1 AS r_metric_id,\n            OPPORTUNITY.Source_type as r_Source_type, \n            timeframe.type as r_type,\n            timeframe_type as r_timeframe_type,\n            WEEK_NUM as r_week_num,MONTH_NAME as r_month_name,QUTR_NUMBER as r_qutr_num,\n            year as r_year\n        from DBT_SALESDATAFLO.Stg_Opportunity as OPPORTUNITY,timeframe --inner join timeframe on to_date(OPPORTUNITY.CREATED_DATE) = timeframe.TIMEFRAMEID\n        where OPPORTUNITY.IS_WON='true'\n         and OPPORTUNITY.IS_CLOSED='true'\n         and timeframe_type is not null\n         and to_date(close_date) between timeframe.start_date and timeframe.end_date\n         --and to_date(close_date) between '2017-01-01' and '2021-03-31'\n        group by 4,5,6,7,8,9,10\n ),fs AS(\n    select sum(count) as f_count,\n            sum(AMOUNT) AS f_amount,\n            metric_id AS f_metric_id,\n            ENTITY_ID as f_entity_id, \n            TIMEFRAME_TYPE as f_timeframe_type,\n            cast(tmf.year as varchar(1000)) as f_types_timeframe,\n            tmf.year as f_year\n          from DBT_SALESDATAFLO.FACT_SALES as sf,DBT_SALESDATAFLO.DIM_TIMEFRAME  tmf  \n    where \n        TIMEFRAME_TYPE='Y'\n        and sf.entity_id = tmf.source_type\n        and REPORT_DATE=tmf.year_end\n        and Yearend_flag='TRUE'\n    group by 3,4,5,6,7\n\n ), compare_result AS(\n    select \n    r_count,\n    f_count,\n    r_amount,\n    f_amount,\n    r_metric_id,\n    f_metric_id,\n    r_Source_type,\n    f_entity_id,\n    r_type,\n    f_timeframe_type,\n    r_timeframe_type,\n    f_types_timeframe,\n    r_year,\n    f_year,\n    CASE\n            WHEN r_count <> f_count THEN 'YES'\n            WHEN r_amount <> f_amount THEN 'YES'\n            WHEN r_metric_id <> f_metric_id THEN 'YES'\n            WHEN r_Source_type <> f_entity_id THEN 'YES'\n            WHEN case when r_type='Year' then 'Y' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Month' then 'M' else null end <> f_timeframe_type THEN 'YES'\n            WHEN case when r_type='Quarter' then 'Q' else null end <> f_timeframe_type THEN 'YES' --Month,Year,Quarter,Week\n            WHEN r_timeframe_type <> f_types_timeframe THEN 'YES'\n            WHEN r_year <> f_year THEN 'YES'\n            ELSE 'NO'\n            END as value_mismatch\n\n    from fs inner join r_metric on fs.f_metric_id=r_metric.r_metric_id where fs.f_metric_id=r_metric.r_metric_id\n    --and case when r_type='Year' then cast('Y' as varchar(100)) else null end = cast(f_timeframe_type as varchar(1000)) ='Y'\n    and SUBSTRING(CAST(r_type AS varchar(100)),1,1) = f_timeframe_type\n    and TRIM(r_timeframe_type)= TRIM(f_types_timeframe)\n    and r_year=f_year\n    and r_Source_type=f_entity_id\n\n\n)\n\nselect * from compare_result where f_timeframe_type='Y' and f_metric_id=1  and f_entity_id='SF_RKLIVE_06012021'"}, "error": null, "status": "SUCCESS 1", "execution_time": 3.4612066745758057, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:30.371481Z", "completed_at": "2021-05-24T00:34:30.395779Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:30.396040Z", "completed_at": "2021-05-24T00:34:33.410768Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) \n            ELSE NULL end r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN trim(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3)) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as r_month_name   \n      \n      from SF_RKLIVE_06012021.PERIOD \n\n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_month_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_month_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        timeframe_d.MONTH_NAME\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'M'--'M','Q','W','D','PIT'\n    and timeframe_d.MONTHEND_FLAG = 'TRUE'\n    and sales_f.report_date = timeframe_d.MONTH_END\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year,timeframe_d.MONTH_NAME\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        r_entity_id,\n        entity_id,\n        r_year_num,\n        year,\n        r_month_name,\n        MONTH_NAME,\n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_month_name <> MONTH_NAME THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num  \n        and fact1.MONTH_NAME = raw1.r_month_name \n    \n )\n\n   select * from  result_set", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "intermediate", "month_wise_metric_validation"], "unique_id": "model.DBTTest.month_wise_metric_validation", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "intermediate/month_wise_metric_validation.sql", "original_file_path": "models/intermediate/month_wise_metric_validation.sql", "name": "month_wise_metric_validation", "resource_type": "model", "alias": "month_wise_metric_validation", "checksum": {"name": "sha256", "checksum": "bbdc98b42db87e234d103c31217ad1d8950a39ce3c9bde8a009d3d9e75da76ca"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/intermediate/month_wise_metric_validation.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) \n            ELSE NULL end r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN trim(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3)) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as r_month_name   \n      \n      from SF_RKLIVE_06012021.PERIOD \n\n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_month_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_month_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        timeframe_d.MONTH_NAME\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'M'--'M','Q','W','D','PIT'\n    and timeframe_d.MONTHEND_FLAG = 'TRUE'\n    and sales_f.report_date = timeframe_d.MONTH_END\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year,timeframe_d.MONTH_NAME\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        r_entity_id,\n        entity_id,\n        r_year_num,\n        year,\n        r_month_name,\n        MONTH_NAME,\n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_month_name <> MONTH_NAME THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num  \n        and fact1.MONTH_NAME = raw1.r_month_name \n    \n )\n\n   select * from  result_set", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' OR TYPE='Quarter' or TYPE='Month' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) \n            ELSE NULL end r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN trim(SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3)) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN UPPER(LTRIM(RTRIM(REPLACE(split(FULLY_QUALIFIED_LABEL,'FY ')[0],'\"', '')))) ELSE NULL END as r_month_name   \n      \n      from SF_RKLIVE_06012021.PERIOD \n\n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_month_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num,\n        per_stg.r_month_name\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5,6 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num,\n            per_stg.r_month_name \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5,6\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        timeframe_d.MONTH_NAME\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'M'--'M','Q','W','D','PIT'\n    and timeframe_d.MONTHEND_FLAG = 'TRUE'\n    and sales_f.report_date = timeframe_d.MONTH_END\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year,timeframe_d.MONTH_NAME\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        r_entity_id,\n        entity_id,\n        r_year_num,\n        year,\n        r_month_name,\n        MONTH_NAME,\n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_month_name <> MONTH_NAME THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num  \n        and fact1.MONTH_NAME = raw1.r_month_name \n    \n )\n\n   select * from  result_set"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.696061849594116, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:33.835237Z", "completed_at": "2021-05-24T00:34:33.865306Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:33.865726Z", "completed_at": "2021-05-24T00:34:36.115226Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) ELSE NULL END as r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN split(FULLY_QUALIFIED_LABEL,'FY ')[0] ELSE NULL END as r_month_name   \n      from SF_RKLIVE_06012021.PERIOD \n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Y'--'M','Q','W','D','PIT'\n    and timeframe_d.Yearend_flag = 'TRUE'\n    and sales_f.report_date = timeframe_d.year_end\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        entity_id,\n        r_year_num,\n        year,\n        \n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num   \n\n    )\n\n   select * from  result_set", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "intermediate", "yearwise_metric_validation"], "unique_id": "model.DBTTest.yearwise_metric_validation", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "intermediate/yearwise_metric_validation.sql", "original_file_path": "models/intermediate/yearwise_metric_validation.sql", "name": "yearwise_metric_validation", "resource_type": "model", "alias": "yearwise_metric_validation", "checksum": {"name": "sha256", "checksum": "d818a00deb47756a191684a94b704275666c1542a29fd0f41d86e0037c13ced9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/intermediate/yearwise_metric_validation.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) ELSE NULL END as r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN split(FULLY_QUALIFIED_LABEL,'FY ')[0] ELSE NULL END as r_month_name   \n      from SF_RKLIVE_06012021.PERIOD \n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Y'--'M','Q','W','D','PIT'\n    and timeframe_d.Yearend_flag = 'TRUE'\n    and sales_f.report_date = timeframe_d.year_end\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        entity_id,\n        r_year_num,\n        year,\n        \n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num   \n\n    )\n\n   select * from  result_set", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) ELSE NULL END as r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN split(FULLY_QUALIFIED_LABEL,'FY ')[0] ELSE NULL END as r_month_name   \n      from SF_RKLIVE_06012021.PERIOD \n ), metric1 AS (\n\n    Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        1 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and Is_closed = 'true'\n        and IS_won = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5 \n\n        union\n\n        Select\n        sum(Opp_stg.amount) as r_amount ,\n        count(Opp_stg.ID) as r_count,\n        10 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.OPPORTUNITY as Opp_stg,PERIOD as per_stg\n        where 1=1\n        and IS_won = 'false'\n        and Is_closed = 'true'\n        and to_date(close_date) >= per_stg.start_date\n        and to_date(close_date) <= per_stg.end_date\n        group by 5 \n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            3 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='true' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union\n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            4 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num\n            from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n        where 1=1\n        and lead_stg.IS_CONVERTED='false' \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union\n\n        Select  \n            0 as r_amount,\n            count(*) as r_count, \n            27 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num \n        from \"SF_RKLIVE_06012021\".\"ACCOUNT\" acc_stg,PERIOD per_stg\n        where 1=1\n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n        union \n\n        Select \n            0 as r_amount,\n            count(*) as r_count, \n            29 as raw_metric_id,\n            'SF_RKLIVE_06012021' as r_entity_id,\n            per_stg.r_year_num \n        from SF_RKLIVE_06012021.CONTACT contact_stg,PERIOD per_stg\n        where 1=1    \n        and to_date(CREATED_DATE) >= per_stg.start_date\n        and to_date(CREATED_DATE) <= per_stg.end_date\n        group by 5\n\n    ),FACT_SALES as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Y'--'M','Q','W','D','PIT'\n    and timeframe_d.Yearend_flag = 'TRUE'\n    and sales_f.report_date = timeframe_d.year_end\n    --and timeframe_d.year = 2018\n    group by entity_id,metric_id,timeframe_d.year\n    \n    ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        entity_id,\n        r_year_num,\n        year,\n        \n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from FACT_SALES fact1,metric1 raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num   \n\n    )\n\n   select * from  result_set"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.3329732418060303, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:36.534851Z", "completed_at": "2021-05-24T00:34:36.567773Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:36.568040Z", "completed_at": "2021-05-24T00:34:38.450270Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) ELSE NULL END as r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN split(FULLY_QUALIFIED_LABEL,'FY ')[0] ELSE NULL END as r_month_name   \n      from SF_RKLIVE_06012021.PERIOD \n ), segment_raw AS (\n\n     Select \n        0 as r_amount,\n        count(*) as r_count, \n        7 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.INDUSTRY as r_segmentName,\n        per_stg.r_year_num\n    from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.INDUSTRY,per_stg.r_year_num\n\n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        11 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and Is_closed = 'true'\n    and IS_won = 'false'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.owner_id,per_stg.r_year_num\n    \n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        14 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.name as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and Is_closed = 'true'\n    and IS_won = 'false'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.name,per_stg.r_year_num\n\n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        22 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.name as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and IS_won = 'true'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.name,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        18 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.LEAD_SOURCE as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.LEAD_SOURCE,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        19 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.STATUS as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.STATUS,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(acc_stg.ID) as r_count,\n        28 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        acc_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"ACCOUNT\" acc_stg,PERIOD per_stg\n    where 1=1\n    and to_date(acc_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(acc_stg.CREATED_DATE) <= per_stg.end_date \n    group by acc_stg.owner_id,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        30 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.owner_id,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(*) as r_count,\n        31 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        concat(lead_stg.street,' ',lead_stg.city,' ',lead_stg.state,' ',lead_stg.postal_code,' ',lead_stg.country) as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by concat(lead_stg.street,' ',lead_stg.city,' ',lead_stg.state,' ',lead_stg.postal_code,' ',lead_stg.country),per_stg.r_year_num\n\n ),fact_segment as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        segment_name as f_segmentName,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        sales_f.timeframe_type\n\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES_SEGMENTED\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    --and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Y'--'M','Q','W','D','PIT'\n    and timeframe_d.Yearend_flag = 'TRUE'\n    and sales_f.report_date = timeframe_d.year_end\n    --and timeframe_d.year = 2018\n  \n    group by entity_id,segment_name,metric_id,timeframe_d.year,sales_f.timeframe_type\n\n ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        r_segmentName,\n        f_segmentName,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        entity_id,\n        r_year_num,\n        year,\n        timeframe_type,\n        \n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_segmentName <> f_segmentName THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from fact_segment fact1,segment_raw raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num\n        and fact1.f_segmentName=raw1.r_segmentName   \n\n    )\n\nSelect * from result_set", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test_UAT_Testing", "fqn": ["DBTTest", "intermediate", "yearwise_segment_fact_sales"], "unique_id": "model.DBTTest.yearwise_segment_fact_sales", "package_name": "DBTTest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316", "path": "intermediate/yearwise_segment_fact_sales.sql", "original_file_path": "models/intermediate/yearwise_segment_fact_sales.sql", "name": "yearwise_segment_fact_sales", "resource_type": "model", "alias": "yearwise_segment_fact_sales", "checksum": {"name": "sha256", "checksum": "272728fd2024639158bad3cb2f25d206cfade1ae8a9f82c7499c381bd06fe37e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "UAT_Testing", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/DBTTest/models/intermediate/yearwise_segment_fact_sales.sql", "deferred": false, "compiled_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) ELSE NULL END as r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN split(FULLY_QUALIFIED_LABEL,'FY ')[0] ELSE NULL END as r_month_name   \n      from SF_RKLIVE_06012021.PERIOD \n ), segment_raw AS (\n\n     Select \n        0 as r_amount,\n        count(*) as r_count, \n        7 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.INDUSTRY as r_segmentName,\n        per_stg.r_year_num\n    from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.INDUSTRY,per_stg.r_year_num\n\n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        11 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and Is_closed = 'true'\n    and IS_won = 'false'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.owner_id,per_stg.r_year_num\n    \n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        14 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.name as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and Is_closed = 'true'\n    and IS_won = 'false'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.name,per_stg.r_year_num\n\n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        22 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.name as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and IS_won = 'true'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.name,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        18 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.LEAD_SOURCE as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.LEAD_SOURCE,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        19 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.STATUS as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.STATUS,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(acc_stg.ID) as r_count,\n        28 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        acc_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"ACCOUNT\" acc_stg,PERIOD per_stg\n    where 1=1\n    and to_date(acc_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(acc_stg.CREATED_DATE) <= per_stg.end_date \n    group by acc_stg.owner_id,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        30 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.owner_id,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(*) as r_count,\n        31 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        concat(lead_stg.street,' ',lead_stg.city,' ',lead_stg.state,' ',lead_stg.postal_code,' ',lead_stg.country) as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by concat(lead_stg.street,' ',lead_stg.city,' ',lead_stg.state,' ',lead_stg.postal_code,' ',lead_stg.country),per_stg.r_year_num\n\n ),fact_segment as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        segment_name as f_segmentName,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        sales_f.timeframe_type\n\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES_SEGMENTED\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    --and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Y'--'M','Q','W','D','PIT'\n    and timeframe_d.Yearend_flag = 'TRUE'\n    and sales_f.report_date = timeframe_d.year_end\n    --and timeframe_d.year = 2018\n  \n    group by entity_id,segment_name,metric_id,timeframe_d.year,sales_f.timeframe_type\n\n ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        r_segmentName,\n        f_segmentName,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        entity_id,\n        r_year_num,\n        year,\n        timeframe_type,\n        \n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_segmentName <> f_segmentName THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from fact_segment fact1,segment_raw raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num\n        and fact1.f_segmentName=raw1.r_segmentName   \n\n    )\n\nSelect * from result_set", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH PERIOD AS(\n     Select *,\n        CASE\n            WHEN TYPE='Year' THEN cast (split(FULLY_QUALIFIED_LABEL,'FY ')[1] as integer) ELSE NULL END as r_year_num,\n        CASE\n            WHEN TYPE='Quarter' THEN SUBSTRING(FULLY_QUALIFIED_LABEL, 2, 3) ELSE NULL END as r_Quarter_name,\n        CASE\n            WHEN TYPE='Month' THEN split(FULLY_QUALIFIED_LABEL,'FY ')[0] ELSE NULL END as r_month_name   \n      from SF_RKLIVE_06012021.PERIOD \n ), segment_raw AS (\n\n     Select \n        0 as r_amount,\n        count(*) as r_count, \n        7 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.INDUSTRY as r_segmentName,\n        per_stg.r_year_num\n    from  SF_RKLIVE_06012021.LEAD lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.INDUSTRY,per_stg.r_year_num\n\n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        11 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and Is_closed = 'true'\n    and IS_won = 'false'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.owner_id,per_stg.r_year_num\n    \n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        14 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.name as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and Is_closed = 'true'\n    and IS_won = 'false'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.name,per_stg.r_year_num\n\n    union \n\n    Select \n        sum(Opp_stg.amount) as r_amount,\n        count(Opp_stg.ID) as r_count,\n        22 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        Opp_stg.name as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"OPPORTUNITY\" Opp_stg,PERIOD per_stg\n    where 1=1\n    and IS_won = 'true'\n    and to_date(Opp_stg.close_date) >= per_stg.start_date\n    and to_date(Opp_stg.close_date) <= per_stg.end_date \n    group by Opp_stg.name,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        18 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.LEAD_SOURCE as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.LEAD_SOURCE,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        19 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.STATUS as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.STATUS,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(acc_stg.ID) as r_count,\n        28 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        acc_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"ACCOUNT\" acc_stg,PERIOD per_stg\n    where 1=1\n    and to_date(acc_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(acc_stg.CREATED_DATE) <= per_stg.end_date \n    group by acc_stg.owner_id,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(lead_stg.ID) as r_count,\n        30 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        lead_stg.owner_id as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by lead_stg.owner_id,per_stg.r_year_num\n\n    union \n\n    Select \n        0 as r_amount,\n        count(*) as r_count,\n        31 as raw_metric_id,\n        'SF_RKLIVE_06012021' as r_entity_id,\n        concat(lead_stg.street,' ',lead_stg.city,' ',lead_stg.state,' ',lead_stg.postal_code,' ',lead_stg.country) as r_segmentName,\n        per_stg.r_year_num\n        from SF_RKLIVE_06012021.\"LEAD\" lead_stg,PERIOD per_stg\n    where 1=1\n    and to_date(lead_stg.CREATED_DATE) >= per_stg.start_date\n    and to_date(lead_stg.CREATED_DATE) <= per_stg.end_date \n    group by concat(lead_stg.street,' ',lead_stg.city,' ',lead_stg.state,' ',lead_stg.postal_code,' ',lead_stg.country),per_stg.r_year_num\n\n ),fact_segment as(\n    select \n        sum(sales_f.amount) as f_amount, \n        sum(sales_f.count) as f_count,\n        segment_name as f_segmentName,\n        metric_id,\n        sales_f.entity_id,\n        timeframe_d.year,\n        sales_f.timeframe_type\n\n    from \"DBT_SALESDATAFLO\".\"FACT_SALES_SEGMENTED\" Sales_f, \"DBT_SALESDATAFLO\".\"DIM_TIMEFRAME\" timeframe_d\n    where 1=1\n    and sales_f.entity_id = timeframe_d.source_type\n    --and sales_f.entity_id = 'SF_RKLIVE_06012021'\n    --and sales_f.metric_id = 1\n    and sales_f.timeframe_type = 'Y'--'M','Q','W','D','PIT'\n    and timeframe_d.Yearend_flag = 'TRUE'\n    and sales_f.report_date = timeframe_d.year_end\n    --and timeframe_d.year = 2018\n  \n    group by entity_id,segment_name,metric_id,timeframe_d.year,sales_f.timeframe_type\n\n ),result_set as (\n    select\n        r_amount,\n        f_amount,\n        (r_amount-f_amount) as amount_difference,\n        r_count,\n        f_count,\n        (r_count-f_count) as count_difference,\n        r_segmentName,\n        f_segmentName,\n        raw_metric_id,\n        metric_id as f_metric_id,\n        entity_id,\n        r_year_num,\n        year,\n        timeframe_type,\n        \n        CASE\n            WHEN r_amount <> f_amount THEN 'true'\n            WHEN r_count <> f_count THEN 'true'\n            WHEN raw_metric_id <> metric_id THEN 'true'\n            WHEN r_entity_id <> entity_id THEN 'true'\n            WHEN r_year_num <> year THEN 'true'\n            WHEN r_segmentName <> f_segmentName THEN 'true'\n            ELSE 'false'\n            END as value_mismatch\n            \n    from fact_segment fact1,segment_raw raw1\n    where 1=1\n        and metric_id=raw_metric_id\n        and fact1.entity_id = raw1.r_entity_id\n        and fact1.year= raw1.r_year_num\n        and fact1.f_segmentName=raw1.r_segmentName   \n\n    )\n\nSelect * from result_set"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.375314474105835, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:38.870487Z", "completed_at": "2021-05-24T00:34:38.903063Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:38.903356Z", "completed_at": "2021-05-24T00:34:40.823782Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ dbt_utils.generate_series(upper_bound=1000) }}", "compiled": true, "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_creative_history", "redshift", "utils__facebook_ads__numbers"], "unique_id": "model.facebook_ads_creative_history.utils__facebook_ads__numbers", "package_name": "facebook_ads_creative_history", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_creative_history", "path": "redshift/utils__facebook_ads__numbers.sql", "original_file_path": "models/redshift/utils__facebook_ads__numbers.sql", "name": "utils__facebook_ads__numbers", "resource_type": "model", "alias": "utils__facebook_ads__numbers", "checksum": {"name": "sha256", "checksum": "d0b8959131dfc9e1f7b1116c0adfb9e7f1b8a548be9ace85fc293a379eeeaf9c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/facebook_ads_creative_history/models/redshift/utils__facebook_ads__numbers.sql", "deferred": false, "compiled_sql": "\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1000\n    order by generated_number\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n     + \n    \n    p8.generated_number * pow(2, 8)\n     + \n    \n    p9.generated_number * pow(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1000\n    order by generated_number\n\n"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.786405324935913, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-05-24T00:34:41.248373Z", "completed_at": "2021-05-24T00:34:41.286866Z"}, {"name": "execute", "started_at": "2021-05-24T00:34:41.287169Z", "completed_at": "2021-05-24T00:34:43.613697Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__creative_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        _fivetran_id,\n        id as creative_id,\n        account_id,\n        name as creative_name,\n        page_link,\n        template_page_link,\n        url_tags,\n        asset_feed_spec_link_urls,\n        object_story_link_data_child_attachments,\n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        template_app_link_spec_ios,\n        template_app_link_spec_ipad,\n        template_app_link_spec_android,\n        template_app_link_spec_iphone,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n    \n)\n\nselect * from fields_xf", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__creative_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__creative_history", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__creative_history.sql", "original_file_path": "models/stg_facebook_ads__creative_history.sql", "name": "stg_facebook_ads__creative_history", "resource_type": "model", "alias": "stg_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "c74654b447b4ca1e0d10f1e5fb025312f0458f8b7683433cebd25a9d95f67bdc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history_tmp"], ["stg_facebook_ads__creative_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history_tmp", "model.facebook_ads_source.stg_facebook_ads__creative_history_tmp"]}, "description": "Each record in this table reflects a Facebook creative.", "columns": {"creative_id": {"name": "creative_id", "description": "Unique ID for an ad creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Ad account ID for the account this ad creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "Name of this ad creative as seen in the ad account's library.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The full URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_tags": {"name": "url_tags", "description": "A set of query string parameters which will replace or be appended to urls clicked from page post ads, message of the post, and canvas app install creatives only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__account_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as account_id,\n        name as account_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__account_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__account_history", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__account_history.sql", "original_file_path": "models/stg_facebook_ads__account_history.sql", "name": "stg_facebook_ads__account_history", "resource_type": "model", "alias": "stg_facebook_ads__account_history", "checksum": {"name": "sha256", "checksum": "245b808f02f27b223acce2c393df93b9089346a2dfec021eeaaf9ab438d11157"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__account_history_tmp"], ["stg_facebook_ads__account_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__account_history_tmp", "model.facebook_ads_source.stg_facebook_ads__account_history_tmp"]}, "description": "Each record in this table reflects a Facebook ad account.", "columns": {"account_id": {"name": "account_id", "description": "The ID of the ad account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_history_tmp')),\n                staging_columns=get_ad_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_id,\n        account_id,\n        ad_set_id,\n        campaign_id,\n        creative_id,\n        name as ad_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_history", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__ad_history.sql", "original_file_path": "models/stg_facebook_ads__ad_history.sql", "name": "stg_facebook_ads__ad_history", "resource_type": "model", "alias": "stg_facebook_ads__ad_history", "checksum": {"name": "sha256", "checksum": "33bcef2482cf9b7b791d788af5cfbcd29caae94b03cc4bda011342bacaa6c914"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__ad_history_tmp"], ["stg_facebook_ads__ad_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_history_tmp"]}, "description": "Each record in this table reflects a Facebook ad.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "ID of the ad set that contains the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the ad creative to be used by this ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "Name of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__ad_set_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__ad_set_history_tmp')),\n                staging_columns=get_ad_set_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as ad_set_id,\n        account_id,\n        campaign_id,\n        name as ad_set_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__ad_set_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__ad_set_history.sql", "original_file_path": "models/stg_facebook_ads__ad_set_history.sql", "name": "stg_facebook_ads__ad_set_history", "resource_type": "model", "alias": "stg_facebook_ads__ad_set_history", "checksum": {"name": "sha256", "checksum": "c2280a510952f0a75838ea19362c3b5ed1488df69d668ec60bd700200d26146a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__ad_set_history_tmp"], ["stg_facebook_ads__ad_set_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_ad_set_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp", "model.facebook_ads_source.stg_facebook_ads__ad_set_history_tmp"]}, "description": "Each record in this table reflects a Facebook ad set.", "columns": {"ad_set_id": {"name": "ad_set_id", "description": "The ID of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad set belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Ad campaign that contains this ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__basic_ad_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__basic_ad_tmp')),\n                staging_columns=get_basic_ad_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ad_id,\n        date as date_day,\n        account_id,\n        impressions,\n        inline_link_clicks as clicks,\n        spend\n    from fields\n)\n\nselect * from final", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__basic_ad"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__basic_ad", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__basic_ad.sql", "original_file_path": "models/stg_facebook_ads__basic_ad.sql", "name": "stg_facebook_ads__basic_ad", "resource_type": "model", "alias": "stg_facebook_ads__basic_ad", "checksum": {"name": "sha256", "checksum": "027a6dcd9090806d456a02a7637e4d39fc83d8edb5f33f8f8c85e498c992e86a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__basic_ad_tmp"], ["stg_facebook_ads__basic_ad_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_basic_ad_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp", "model.facebook_ads_source.stg_facebook_ads__basic_ad_tmp"]}, "description": "Each record represents the daily performance of an ad in Facebook.", "columns": {"ad_id": {"name": "ad_id", "description": "The ID of the ad the report relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the reported performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this ad belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_facebook_ads__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_facebook_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfields_xf as (\n    \n    select \n        id as campaign_id,\n        account_id,\n        name as campaign_name,\n        row_number() over (partition by id order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from fields\n\n)\n\nselect * from fields_xf", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_source", "stg_facebook_ads__campaign_history"], "unique_id": "model.facebook_ads_source.stg_facebook_ads__campaign_history", "package_name": "facebook_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_source", "path": "stg_facebook_ads__campaign_history.sql", "original_file_path": "models/stg_facebook_ads__campaign_history.sql", "name": "stg_facebook_ads__campaign_history", "resource_type": "model", "alias": "stg_facebook_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "a6d89567bc6b46074191adc36db46e6a84280697789ba33ddc5faeb56707284f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__campaign_history_tmp"], ["stg_facebook_ads__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.facebook_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp", "model.facebook_ads_source.stg_facebook_ads__campaign_history_tmp"]}, "description": "Each record in this table reflects a Facebook campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the ad account that this campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Boolean representing whether a record is the most recent version of that record. All records should have this value set to True given we filter on it.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_facebook_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__account_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as account_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        name as account_name,\n        currency,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by account_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by account_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['account_id','version_tag']) }} as account_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "stg_linkedin__account_history"], "unique_id": "model.linkedin_source.stg_linkedin__account_history", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "stg_linkedin__account_history.sql", "original_file_path": "models/stg_linkedin__account_history.sql", "name": "stg_linkedin__account_history", "resource_type": "model", "alias": "stg_linkedin__account_history", "checksum": {"name": "sha256", "checksum": "47289b364cf0c57c36e3148c7a6b35dbbea35b58c7aae107a3c0ad9de72a3df6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__account_history_tmp"], ["stg_linkedin__account_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__account_history_tmp", "model.linkedin_source.stg_linkedin__account_history_tmp"]}, "description": "", "columns": {"account_version_id": {"name": "account_version_id", "description": "A unique key, a combination of account_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The ISO 4217 currency code of the account, such as 'USD' for United States Dollar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__ad_analytics_by_creative_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__ad_analytics_by_creative_tmp')),\n                staging_columns=get_ad_analytics_by_creative_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        creative_id,\n        day as date_day,\n        clicks, \n        impressions,\n        {% if var('linkedin__use_local_currency') %}\n        cost_in_local_currency as cost\n        {% else %}\n        cost_in_usd as cost\n        {% endif %}\n    from macro\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','creative_id']) }} as daily_creative_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "stg_linkedin__ad_analytics_by_creative"], "unique_id": "model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "stg_linkedin__ad_analytics_by_creative.sql", "original_file_path": "models/stg_linkedin__ad_analytics_by_creative.sql", "name": "stg_linkedin__ad_analytics_by_creative", "resource_type": "model", "alias": "stg_linkedin__ad_analytics_by_creative", "checksum": {"name": "sha256", "checksum": "7c9fa54e76fcd8c0bc3dbd15f20e976882ee0876f96215b9dd1c91c9a39068b9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative_tmp"], ["stg_linkedin__ad_analytics_by_creative_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_ad_analytics_by_creative_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp", "model.linkedin_source.stg_linkedin__ad_analytics_by_creative_tmp"]}, "description": "", "columns": {"daily_creative_id": {"name": "daily_creative_id", "description": "A unique key, a combination of creative_id and date_day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__campaign_group_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__campaign_group_history_tmp')),\n                staging_columns=get_campaign_group_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_group_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        created_time as created_at,\n        name as campaign_group_name\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_group_id order by last_modified_at) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_group_id order by last_modified_at) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_group_id','last_modified_at']) }} as campaign_group_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "stg_linkedin__campaign_group_history"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_group_history", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "stg_linkedin__campaign_group_history.sql", "original_file_path": "models/stg_linkedin__campaign_group_history.sql", "name": "stg_linkedin__campaign_group_history", "resource_type": "model", "alias": "stg_linkedin__campaign_group_history", "checksum": {"name": "sha256", "checksum": "3e88f6e64c57280b2359b49d0d7e932e3ae856bf123bf10e60a4d6a7ecf5a3df"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__campaign_group_history_tmp"], ["stg_linkedin__campaign_group_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_campaign_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_group_history_tmp", "model.linkedin_source.stg_linkedin__campaign_group_history_tmp"]}, "description": "", "columns": {"campaign_group_version_id": {"name": "campaign_group_version_id", "description": "A unique key, a combination of campaign_group_id and last_modified_at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign group belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign group was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__campaign_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        id as campaign_id,\n        last_modified_time as last_modified_at,\n        account_id,\n        campaign_group_id,\n        created_time as created_at,\n        name as campaign_name,\n        cast(version_tag as numeric) as version_tag\n    from macro\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by campaign_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by campaign_id order by version_tag) as valid_to\n    from fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','version_tag']) }} as campaign_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "stg_linkedin__campaign_history"], "unique_id": "model.linkedin_source.stg_linkedin__campaign_history", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "stg_linkedin__campaign_history.sql", "original_file_path": "models/stg_linkedin__campaign_history.sql", "name": "stg_linkedin__campaign_history", "resource_type": "model", "alias": "stg_linkedin__campaign_history", "checksum": {"name": "sha256", "checksum": "eed133513eebb453786e95474020e8c843724fb71b9e5a6aa77e526a641f720c"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__campaign_history_tmp"], ["stg_linkedin__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__campaign_history_tmp", "model.linkedin_source.stg_linkedin__campaign_history_tmp"]}, "description": "", "columns": {"campaign_version_id": {"name": "campaign_version_id", "description": "A unique key, a combination of campaign_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "The ID of the campaign group the campaign belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the campaign was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_linkedin__creative_history_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin__creative_history_tmp')),\n                staging_columns=get_creative_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        id as creative_id,\n        last_modified_time as last_modified_at,\n        created_time as created_at,\n        campaign_id,\n        type as creative_type,\n        cast(version_tag as numeric) as version_tag,\n        status as creative_status,\n        click_uri\n    from macro\n\n), url_fields as (\n\n    select \n        *,\n        {{ dbt_utils.split_part('click_uri', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('click_uri') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('click_uri') }} as url_path,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('click_uri', 'utm_term') }} as utm_term\n    from fields\n\n), valid_dates as (\n\n    select \n        *,\n        case \n            when row_number() over (partition by creative_id order by version_tag) = 1 then created_at\n            else last_modified_at\n        end as valid_from,\n        lead(last_modified_at) over (partition by creative_id order by version_tag) as valid_to\n    from url_fields\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['creative_id','version_tag']) }} as creative_version_id\n    from valid_dates\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin_source", "stg_linkedin__creative_history"], "unique_id": "model.linkedin_source.stg_linkedin__creative_history", "package_name": "linkedin_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin_source", "path": "stg_linkedin__creative_history.sql", "original_file_path": "models/stg_linkedin__creative_history.sql", "name": "stg_linkedin__creative_history", "resource_type": "model", "alias": "stg_linkedin__creative_history", "checksum": {"name": "sha256", "checksum": "a637fb0eb85e160ee0c7c1a8348ba82aaca98687277a54cf33f33cca42e92f91"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__creative_history_tmp"], ["stg_linkedin__creative_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.linkedin_source.get_creative_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.linkedin_source.stg_linkedin__creative_history_tmp", "model.linkedin_source.stg_linkedin__creative_history_tmp"]}, "description": "", "columns": {"creative_version_id": {"name": "creative_version_id", "description": "A unique key, a combination of creative_id and version_tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "Unique internal ID representing the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the version is valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the version is valid to, null if record is still active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "The timestamp of when the version was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The timestamp of when the creative was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign the creative belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "TEXT_AD - Text with Sponsored Link to landing page on your site.\nSPONSORED_STATUS_UPDATE - Sponsored status update from a profile page.\nSPONSORED_INMAILS - Single message ad delivered to the member's inbox\nSPONSORED_MESSAGE - Conversation ad containing a tree of pre-determined messages delivered to the member's inbox\nSPONSORED_VIDEO - Sponsored videos.\nSPONSORED_UPDATE_CAROUSEL - Sponsored Carousels\nFOLLOW_COMPANY_V2 - Dynamic Follow Ad\nSPOTLIGHT_V2 - Dynamic Spotlight Ad\nJOBS_V2 - Dynamic Job Ad\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "An integer representation of the version of the creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_status": {"name": "creative_status", "description": "ACTIVE - Creative creation is complete and creative is available for review and serve.\nPAUSED - Creative creation is complete and creative is current, but should temporarily not be served. This status is not valid upon creation.\nDRAFT - Creative creation is incomplete and may still be edited.\nARCHIVED - Creative creation is complete, but creative should not be served and should be separated from non-archived creatives in any UI.\nCANCELED - Creative is permanently canceled.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_uri": {"name": "click_uri", "description": "Required when creative type is TEXT_AD. Maximum character limit of 500 after URL encoding all special characters. \nLimit does not include the \"https://\" prefix.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('microsoft_ads_ad_performance_daily_report') }}\n\n), ads as (\n\n    select *\n    from {{ var('microsoft_ads_ad_history') }}\n    where is_most_recent_version = True\n\n), ad_groups as (\n\n    select *\n    from {{ var('microsoft_ads_ad_group_history') }}\n    where is_most_recent_version = True\n\n), campaigns as (\n\n    select *\n    from {{ var('microsoft_ads_campaign_history') }}\n    where is_most_recent_version = True\n\n), accounts as (\n\n    select *\n    from {{ var('microsoft_ads_account_history') }}\n    where is_most_recent_version = True\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_name,\n        accounts.account_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        ad_groups.ad_group_name,\n        ad_groups.ad_group_id,\n        ads.base_url,\n        ads.url_host,\n        ads.url_path,\n        ads.utm_source,\n        ads.utm_medium,\n        ads.utm_campaign,\n        ads.utm_content,\n        ads.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads\n        on report.ad_id = ads.ad_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns\n        on report.campaign_id = campaigns.campaign_id\n    left join accounts\n        on report.account_id = accounts.account_id\n    {{ dbt_utils.group_by(15) }}\n\n)\n\nselect *\nfrom joined", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads", "microsoft_ads__ad_adapter"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_adapter", "package_name": "microsoft_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads", "path": "microsoft_ads__ad_adapter.sql", "original_file_path": "models/microsoft_ads__ad_adapter.sql", "name": "microsoft_ads__ad_adapter", "resource_type": "model", "alias": "microsoft_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "60fe48771ded6b0f53447054ef1921ab4ca9ddb602a9c03a747625a0549ee25a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_microsoft_ads__ad_performance_daily_report"], ["stg_microsoft_ads__ad_history"], ["stg_microsoft_ads__ad_group_history"], ["stg_microsoft_ads__campaign_history"], ["stg_microsoft_ads__account_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads_source.stg_microsoft_ads__ad_performance_daily_report", "model.microsoft_ads_source.stg_microsoft_ads__ad_history", "model.microsoft_ads_source.stg_microsoft_ads__ad_group_history", "model.microsoft_ads_source.stg_microsoft_ads__campaign_history", "model.microsoft_ads_source.stg_microsoft_ads__account_history"]}, "description": "Each record in this table represents the daily performance of ads at the ad and url level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__ad_group_history_tmp') }}\n\n), fields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__ad_group_history_tmp')),\n                staging_columns=get_ad_group_history_columns()\n            )\n        }}\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ad_group_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "stg_pinterest_ads__ad_group_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__ad_group_history", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__ad_group_history.sql", "original_file_path": "models/stg_pinterest_ads__ad_group_history.sql", "name": "stg_pinterest_ads__ad_group_history", "resource_type": "model", "alias": "stg_pinterest_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "d305d0a0db070a7392c8d0aded88ab650d97b26fd7a7139e27940c942200637e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__ad_group_history_tmp"], ["stg_pinterest_ads__ad_group_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_ad_group_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp", "model.pinterest_source.stg_pinterest_ads__ad_group_history_tmp"]}, "description": "Each record represents a version of a Pinterest Ad Group.", "columns": {"ad_group_id": {"name": "ad_group_id", "description": "Ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Parent Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Ad group creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Ad group name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Ad group. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "Ad group start time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "Ad group end time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of an Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__campaign_history_tmp') }}\n\n), fields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n    from base\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['campaign_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "stg_pinterest_ads__campaign_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__campaign_history", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__campaign_history.sql", "original_file_path": "models/stg_pinterest_ads__campaign_history.sql", "name": "stg_pinterest_ads__campaign_history", "resource_type": "model", "alias": "stg_pinterest_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "ef4b3a80dc6e9826455ce0c9597553afbc1d0d4b6721f546b392579403020da2"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__campaign_history_tmp"], ["stg_pinterest_ads__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__campaign_history_tmp", "model.pinterest_source.stg_pinterest_ads__campaign_history_tmp"]}, "description": "Each record represents a version of a Pinterest Campaign.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Campaign ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Campaign creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Campaign name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Campaign. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of a Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_history_tmp') }}\n\n), macro as (\n\n    select\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_history_tmp')),\n                staging_columns=get_pin_promotion_history_columns()\n            )\n        }}\n\n    from base\n\n), fields as (\n\n    select\n        id as pin_promotion_id,\n        ad_group_id,\n        created_time as created_timestamp,\n        destination_url,\n        {{ dbt_utils.split_part('destination_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('destination_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('destination_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('destination_url', 'utm_term') }} as utm_term,\n        name,\n        pin_id,\n        status,\n        creative_type,\n        _fivetran_synced\n    from macro\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['pin_promotion_id','_fivetran_synced'] )}} as version_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_history"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_history", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_history.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_history.sql", "name": "stg_pinterest_ads__pin_promotion_history", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_history", "checksum": {"name": "sha256", "checksum": "f8ec0f2068f6f46e9de886d61835b934a12362e55ab69f6dc9cb346674944d4c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_history_tmp"], ["stg_pinterest_ads__pin_promotion_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_history_tmp"]}, "description": "Each record represents a version of a Pinterest Pin promotion.", "columns": {"pin_promotion_id": {"name": "pin_promotion_id", "description": "Pin promotion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "Pin promotion ad group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Pin creation time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination_url": {"name": "destination_url", "description": "Pin destination URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Pin promotion name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_id": {"name": "pin_id", "description": "Original pin ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the Pin promotion. One of \"ACTIVE\", \"ARCHIVED\", \"PAUSED\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_type": {"name": "creative_type", "description": "The creative type. \nOne of \"APP\", \"APP_VIDEO\", \"BOARD\", \"CAROUSEL\", \"CINEMATIC\", \"COMMERCE\", \"MAX_VIDEO\", \"NATIVE_VIDEO\", \"REGULAR\", \n\"SEARCH_PROMINENCE\", \"SEARCH_PROMINENCE_CAROUSEL\", \"SHOPPING\", \"SHOP_THE_PIN\", \"THIRD_PARTY\", or \"VIDEO\".\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID for the version of a Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_pinterest_ads__pin_promotion_report_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_pinterest_ads__pin_promotion_report_tmp')),\n                staging_columns=get_pin_promotion_report_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select \n        date as date_day,\n        pin_promotion_id,\n        ad_group_id,\n        campaign_id,\n        advertiser_id,\n        _fivetran_synced,\n        coalesce(impression_1,0) + coalesce(impression_2,0) as impressions,\n        coalesce(clickthrough_1,0) + coalesce(clickthrough_2,0) as clicks,\n        spend_in_micro_dollar / 1000000.0 as spend\n    from base\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','pin_promotion_id']) }} as report_id\n    from fields\n\n)\n\nselect *\nfrom surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest_source", "stg_pinterest_ads__pin_promotion_report"], "unique_id": "model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "package_name": "pinterest_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest_source", "path": "stg_pinterest_ads__pin_promotion_report.sql", "original_file_path": "models/stg_pinterest_ads__pin_promotion_report.sql", "name": "stg_pinterest_ads__pin_promotion_report", "resource_type": "model", "alias": "stg_pinterest_ads__pin_promotion_report", "checksum": {"name": "sha256", "checksum": "1475fadccbc409a9312c2565c194bb1dabc278560c094099102ed27f492adf6d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report_tmp"], ["stg_pinterest_ads__pin_promotion_report_tmp"]], "sources": [], "depends_on": {"macros": ["macro.pinterest_source.get_pin_promotion_report_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.surrogate_key"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp", "model.pinterest_source.stg_pinterest_ads__pin_promotion_report_tmp"]}, "description": "Each record represents the daily performance of a Pinterest Pin promotion.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pin_promotion_id": {"name": "pin_promotion_id", "description": "The ID of the related Pin promotion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_id": {"name": "advertiser_id", "description": "The ID of the related Advertiser.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The time Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "report_id": {"name": "report_id", "description": "The unique ID of each report record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_pinterest_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__account_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__account_history_tmp')),\n                staging_columns=get_account_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by account_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__account_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__account_history", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__account_history.sql", "original_file_path": "models/stg_twitter_ads__account_history.sql", "name": "stg_twitter_ads__account_history", "resource_type": "model", "alias": "stg_twitter_ads__account_history", "checksum": {"name": "sha256", "checksum": "c8a3ddcfbffbf006eab6c6a5623631db378ec6ffb3c154555b91afad266cf137"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__account_history_tmp"], ["stg_twitter_ads__account_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_account_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history_tmp", "model.twitter_ads_source.stg_twitter_ads__account_history_tmp"]}, "description": "Each record represents a version of each account. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_id": {"name": "business_id", "description": "The ID of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "business_name": {"name": "business_name", "description": "The name of the related business.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry_type": {"name": "industry_type", "description": "The industry of the accoutns.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone": {"name": "timezone", "description": "The timezone the account is set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timezone_switch_at": {"name": "timezone_switch_at", "description": "The timestamp the account's timezone was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__campaign_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by campaign_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__campaign_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__campaign_history", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__campaign_history.sql", "original_file_path": "models/stg_twitter_ads__campaign_history.sql", "name": "stg_twitter_ads__campaign_history", "resource_type": "model", "alias": "stg_twitter_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "8ca02f8ef1f5cc8cf28b0afb6343df112654b02eeecd724209196b6dbd2e1514"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__campaign_history_tmp"], ["stg_twitter_ads__campaign_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp", "model.twitter_ads_source.stg_twitter_ads__campaign_history_tmp"]}, "description": "Each record represents a version of each campaign. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currently all metrics for the account are set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_budget_amount_local_micro": {"name": "daily_budget_amount_local_micro", "description": "The daily budget amount to be allocated to the campaign. The currency associated with the specified funding instrument will be used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_in_days": {"name": "duration_in_days", "description": "The time period within which the frequency_cap is achieved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The time the campaign will end", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequency_cap": {"name": "frequency_cap", "description": "The maximum number of times an ad could be delivered to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_servable": {"name": "is_servable", "description": "Whether the campaign is in a state to be actively served to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "standard_delivery": {"name": "standard_delivery", "description": "Whether standard delivery is enabled (vs accelerated delivery).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The time the campaign will start.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__line_item_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__line_item_history_tmp')),\n                staging_columns=get_line_item_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by line_item_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__line_item_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__line_item_history", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__line_item_history.sql", "original_file_path": "models/stg_twitter_ads__line_item_history.sql", "name": "stg_twitter_ads__line_item_history", "resource_type": "model", "alias": "stg_twitter_ads__line_item_history", "checksum": {"name": "sha256", "checksum": "f1ac40767d76fd9083add8db3cba3698ec596f1e8e10d8d44e43f33c6af44644"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__line_item_history_tmp"], ["stg_twitter_ads__line_item_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_line_item_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp", "model.twitter_ads_source.stg_twitter_ads__line_item_history_tmp"]}, "description": "Each record represents a version of each line item. The versions can be differentiated by the updated_at timestamp.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_domain": {"name": "advertiser_domain", "description": "The website domain for this advertiser, without the protocol specification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "advertiser_user_id": {"name": "advertiser_user_id", "description": "The Twitter user identifier for the handle promoting the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatically_select_bid": {"name": "automatically_select_bid", "description": "Whether automatically optimize bidding is enabled based on daily budget and campaign flight dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_amount_local_micro": {"name": "bid_amount_local_micro", "description": "The bid amount to be associated with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_type": {"name": "bid_type", "description": "The bidding mechanism.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bid_unit": {"name": "bid_unit", "description": "The bid unit for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_by": {"name": "charge_by", "description": "The unit to charge this line item by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_source": {"name": "creative_source", "description": "The source of the creatives for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency in which metrics will be reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "The timestamp at which the line item will stop being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objective": {"name": "objective", "description": "The campaign objective for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "optimization": {"name": "optimization", "description": "The optimization setting to use with this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_web_event_tag": {"name": "primary_web_event_tag", "description": "The identifier of the primary web event tag. Allows more accurate tracking of engagements for the campaign pertaining to this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "The type of promoted product that this line item will contain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "The timestamp at which the line item will start being served.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_cpa_local_micro": {"name": "target_cpa_local_micro", "description": "The target cost per acquisition for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_budget_amount_local_micro": {"name": "total_budget_amount_local_micro", "description": "The total budget amount to be allocated to the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_history_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_history_tmp')),\n                staging_columns=get_promoted_tweet_history_columns()\n            )\n        }}\n\n    from source\n\n), latest as (\n\n    select\n        *,\n        row_number() over (partition by promoted_tweet_id order by updated_timestamp asc) = 1 as is_latest_version\n    from renamed \n\n)\n\nselect * from latest", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_history"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_history.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_history.sql", "name": "stg_twitter_ads__promoted_tweet_history", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_history", "checksum": {"name": "sha256", "checksum": "3736846d80ebd96251cc90dbe5133f3bd439990dc6d8024d268c137cec121f30"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_history_tmp"], ["stg_twitter_ads__promoted_tweet_history_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history_tmp"]}, "description": "TEach record represents a version of each promoted tweet. The versions can be differentiated by the updated_at timestamp.BD", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approval_status": {"name": "approval_status", "description": "The approval status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_status": {"name": "entity_status", "description": "The status of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the related line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "The timestamp the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Whether the record is the most latest version for the promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__promoted_tweet_report_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__promoted_tweet_report_tmp')),\n                staging_columns=get_promoted_tweet_report_columns()\n            )\n        }}\n\n    from source\n\n), spend_calc as (\n\n    select\n        *,\n        round(spend_micro / 1000000.0,2) as spend\n    from renamed\n\n)\n\nselect * from spend_calc", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__promoted_tweet_report"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__promoted_tweet_report.sql", "original_file_path": "models/stg_twitter_ads__promoted_tweet_report.sql", "name": "stg_twitter_ads__promoted_tweet_report", "resource_type": "model", "alias": "stg_twitter_ads__promoted_tweet_report", "checksum": {"name": "sha256", "checksum": "5fb2632f5efb7d76f9560f4d5dd51f9dbdf196e6cd6d6dcd19f5f1cb64607dae"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__promoted_tweet_report_tmp"], ["stg_twitter_ads__promoted_tweet_report_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_promoted_tweet_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report_tmp"]}, "description": "Each record represents the performance of a promoted tweet on a given day.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_micro": {"name": "spend_micro", "description": "The spend (in micros) for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The impressions for the promoted tweet on that day.BD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promoted_tweet_id": {"name": "promoted_tweet_id", "description": "The ID of the related promoted tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The url clicks for the promoted tweet on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_twitter_ads__tweet_url_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_twitter_ads__tweet_url_tmp')),\n                staging_columns=get_tweet_url_columns()\n            )\n        }}\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        {{ dbt_utils.split_part('expanded_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('expanded_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('expanded_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('expanded_url', 'utm_term') }} as utm_term\n    from renamed\n\n)\n\nselect * from url_fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads_source", "stg_twitter_ads__tweet_url"], "unique_id": "model.twitter_ads_source.stg_twitter_ads__tweet_url", "package_name": "twitter_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads_source", "path": "stg_twitter_ads__tweet_url.sql", "original_file_path": "models/stg_twitter_ads__tweet_url.sql", "name": "stg_twitter_ads__tweet_url", "resource_type": "model", "alias": "stg_twitter_ads__tweet_url", "checksum": {"name": "sha256", "checksum": "63209d65decd1dbba6b5e8a679297014e165084a010e835feb3dc1711a4917c5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__tweet_url_tmp"], ["stg_twitter_ads__tweet_url_tmp"]], "sources": [], "depends_on": {"macros": ["macro.twitter_ads_source.get_tweet_url_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp", "model.twitter_ads_source.stg_twitter_ads__tweet_url_tmp"]}, "description": "Each record represents a URL used in a tweet.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "When the record was last synced by Fivetran.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_url": {"name": "display_url", "description": "The URL as it will be displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expanded_url": {"name": "expanded_url", "description": "The fully expanded URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the URL within the tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indices": {"name": "indices", "description": "The start and end point of where the URL is placed in the tweet text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tweet_id": {"name": "tweet_id", "description": "The ID of the related tweet.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The 't.co' shortened URL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_twitter_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_google_ads__final_url_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__final_url_performance_tmp')),\n                staging_columns=get_final_url_performance_columns()\n            )\n        }}\n\n    from source\n\n), \n\nurl_fields as (\n\n    select\n        *,\n        {{ dbt_utils.split_part('final_url', \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host('final_url') }} as url_host,\n        '/' || {{ dbt_utils.get_url_path('final_url') }} as url_path,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_source') }} as utm_source,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_medium') }} as utm_medium,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_campaign') }} as utm_campaign,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_content') }} as utm_content,\n        {{ dbt_utils.get_url_parameter('final_url', 'utm_term') }} as utm_term\n    from renamed\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','campaign_id','ad_group_id','final_url']) }} as final_url_performance_id\n    from url_fields\n\n)\n\nselect * from surrogate_key", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads_source", "stg_google_ads__final_url_performance"], "unique_id": "model.google_ads_source.stg_google_ads__final_url_performance", "package_name": "google_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads_source", "path": "stg_google_ads__final_url_performance.sql", "original_file_path": "models/stg_google_ads__final_url_performance.sql", "name": "stg_google_ads__final_url_performance", "resource_type": "model", "alias": "stg_google_ads__final_url_performance", "checksum": {"name": "sha256", "checksum": "c7bcb352042009de5bdbf24781f0c9f9505d5a3f47c3b74b6bb980ff58defdc8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__final_url_performance_tmp"], ["stg_google_ads__final_url_performance_tmp"]], "sources": [], "depends_on": {"macros": ["macro.google_ads_source.get_final_url_performance_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter", "macro.dbt_utils.surrogate_key"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance_tmp", "model.google_ads_source.stg_google_ads__final_url_performance_tmp"]}, "description": "Each record represents the performance of a final url at the ad group level.", "columns": {"final_url_performance_id": {"name": "final_url_performance_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_url": {"name": "final_url", "description": "Effective final URL of the impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `effective_final_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_google_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_google_ads__click_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__click_performance_tmp')),\n                staging_columns=get_click_performance_columns()\n            )\n        }}\n\n    from source\n\n)\n\nselect * from renamed", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads_source", "stg_google_ads__click_performance"], "unique_id": "model.google_ads_source.stg_google_ads__click_performance", "package_name": "google_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads_source", "path": "stg_google_ads__click_performance.sql", "original_file_path": "models/stg_google_ads__click_performance.sql", "name": "stg_google_ads__click_performance", "resource_type": "model", "alias": "stg_google_ads__click_performance", "checksum": {"name": "sha256", "checksum": "09c799096d686097dbbdca7a35775d101b90109a64754b3d5eb6fcc3146e93f1"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__click_performance_tmp"], ["stg_google_ads__click_performance_tmp"]], "sources": [], "depends_on": {"macros": ["macro.google_ads_source.get_click_performance_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__click_performance_tmp", "model.google_ads_source.stg_google_ads__click_performance_tmp"]}, "description": "The Click Performance report includes stats aggregated at each click level.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gclid": {"name": "gclid", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_google_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with source as (\n\n    select *\n    from {{ ref('stg_google_ads__criteria_performance_tmp') }}\n\n),\n\nrenamed as (\n\n    select\n    \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_google_ads__criteria_performance_tmp')),\n                staging_columns=get_criteria_performance_columns()\n            )\n        }}\n\n    from source\n\n)\n\nselect * from renamed", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads_source", "stg_google_ads__criteria_performance"], "unique_id": "model.google_ads_source.stg_google_ads__criteria_performance", "package_name": "google_ads_source", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads_source", "path": "stg_google_ads__criteria_performance.sql", "original_file_path": "models/stg_google_ads__criteria_performance.sql", "name": "stg_google_ads__criteria_performance", "resource_type": "model", "alias": "stg_google_ads__criteria_performance", "checksum": {"name": "sha256", "checksum": "cab386a6e1339cca50efe849aff8dd46e1b218c01435e1c34975695c0d7a7707"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__criteria_performance_tmp"], ["stg_google_ads__criteria_performance_tmp"]], "sources": [], "depends_on": {"macros": ["macro.google_ads_source.get_criteria_performance_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.google_ads_source.stg_google_ads__criteria_performance_tmp", "model.google_ads_source.stg_google_ads__criteria_performance_tmp"]}, "description": "The Criteria Performance report includes statistics aggregated at the ad group criteria level, one row per ad group and criteria combination.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique ID used by Fivetran to sync and dedupe data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The descriptive name of the Customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_status": {"name": "ad_group_status", "description": "Status of the ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_status": {"name": "campaign_status", "description": "Status of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The sum of your cost-per-click (CPC) and cost-per-thousand impressions (CPM) costs during this period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria": {"name": "criteria", "description": "Descriptive string for the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_destination_url": {"name": "criteria_destination_url", "description": "Destination URL of the criterion that triggered ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_type": {"name": "criteria_type", "description": "The type of the Criterion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_customer_id": {"name": "external_customer_id", "description": "The Customer ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the main object of this row.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Count of how often your ad has appeared on a search results page or website on the Google Network.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_google_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        parse_json(url_tags) as url_tags\n    from base\n    where url_tags is not null\n\n\n), flattened_url_tags as (\n    \n    select\n        _fivetran_id,\n        creative_id,\n        url_tags.value:key::string as key,\n        url_tags.value:value::string as value,\n        url_tags.value:type::string as type\n    from required_fields,\n    lateral flatten( input => url_tags ) as url_tags\n\n  \n)\n\nselect *\nfrom flattened_url_tags", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__url_tag"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__url_tag", "package_name": "facebook_ads_creative_history", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__url_tag.sql", "original_file_path": "models/snowflake/stg_facebook_ads__url_tag.sql", "name": "stg_facebook_ads__url_tag", "resource_type": "model", "alias": "stg_facebook_ads__url_tag", "checksum": {"name": "sha256", "checksum": "2b46b0bf1efd42f8f9df7dfa0858f85715db675469093fdb10084190295ae5f7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with metrics as (\n\n    select *\n    from {{ var('ad_analytics_by_creative') }}\n\n), creatives as (\n\n    select *\n    from {{ var('creative_history') }}\n\n), campaigns as (\n    \n    select *\n    from {{ var('campaign_history') }}\n\n), campaign_groups as (\n    \n    select *\n    from {{ var('campaign_group_history') }}\n\n), accounts as (\n    \n    select *\n    from {{ var('account_history') }}\n\n), joined as (\n\n    select\n        metrics.creative_id,\n        metrics.date_day,\n        metrics.clicks,\n        metrics.impressions,\n        metrics.cost,\n        metrics.daily_creative_id,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        campaign_groups.campaign_group_name,\n        campaign_groups.campaign_group_id,\n        accounts.account_name,\n        accounts.account_id\n    from metrics\n    left join creatives\n        on metrics.creative_id = creatives.creative_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= creatives.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(creatives.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join campaigns\n        on creatives.campaign_id = campaigns.campaign_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= campaigns.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(campaigns.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join campaign_groups\n        on campaigns.campaign_group_id = campaign_groups.campaign_group_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= campaign_groups.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(campaign_groups.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n    left join accounts\n        on campaign_groups.account_id = accounts.account_id\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} >= accounts.valid_from\n        and {{ fivetran_utils.timestamp_add('day', 1, 'metrics.date_day') }} <= coalesce(accounts.valid_to, {{ fivetran_utils.timestamp_add('day', 1, dbt_utils.current_timestamp()) }})\n\n)\n\nselect *\nfrom joined", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin", "linkedin__ad_adapter"], "unique_id": "model.linkedin.linkedin__ad_adapter", "package_name": "linkedin", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin", "path": "linkedin__ad_adapter.sql", "original_file_path": "models/linkedin__ad_adapter.sql", "name": "linkedin__ad_adapter", "resource_type": "model", "alias": "linkedin__ad_adapter", "checksum": {"name": "sha256", "checksum": "49ffcb527df4594436c04523f54eb331b5e12682ff203428de8b0b534e82ecfb"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_linkedin__ad_analytics_by_creative"], ["stg_linkedin__creative_history"], ["stg_linkedin__campaign_history"], ["stg_linkedin__campaign_group_history"], ["stg_linkedin__account_history"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.timestamp_add", "macro.dbt_utils.current_timestamp"], "nodes": ["model.linkedin_source.stg_linkedin__ad_analytics_by_creative", "model.linkedin_source.stg_linkedin__creative_history", "model.linkedin_source.stg_linkedin__campaign_history", "model.linkedin_source.stg_linkedin__campaign_group_history", "model.linkedin_source.stg_linkedin__account_history"]}, "description": "Each record in this table represents the daily performance of ads at the creative level.", "columns": {"daily_creative_id": {"name": "daily_creative_id", "description": "A unique key, a combination of creative_id and date_day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `click_uri`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with accounts as (\n\n    select *\n    from {{ var('twitter_account_history') }}\n    where is_latest_version = True\n\n), campaigns as (\n\n    select *\n    from {{ var('twitter_campaign_history') }}\n    where is_latest_version = True\n\n), line_items as (\n\n    select *\n    from {{ var('twitter_line_item_history') }}\n    where is_latest_version = True\n\n), metrics as (\n\n    select *\n    from {{ var('twitter_promoted_tweet_report') }}\n\n), promoted_tweet as (\n\n    select *\n    from {{ var('twitter_promoted_tweet_history')}}\n    where is_latest_version = True\n\n), tweet_url as (\n\n    select *\n    from {{ var('twitter_tweet_url') }}\n\n), joined as (\n\n    select\n        metrics.date_day,\n        tweet_url.base_url,\n        tweet_url.url_host,\n        tweet_url.url_path,\n        tweet_url.utm_source,\n        tweet_url.utm_medium,\n        tweet_url.utm_campaign,\n        tweet_url.utm_content,\n        tweet_url.utm_term,\n        line_items.name as line_item_name,\n        line_items.line_item_id,\n        campaigns.campaign_name,\n        campaigns.campaign_id,\n        sum(metrics.spend) as spend,\n        sum(metrics.clicks) as clicks,\n        sum(metrics.url_clicks) as url_clicks,\n        sum(metrics.impressions) as impressions\n    from metrics\n    left join promoted_tweet\n        using (promoted_tweet_id)\n    left join tweet_url\n        using (tweet_id)\n    left join line_items\n        using (line_item_id)\n    left join campaigns\n        using (campaign_id)\n    {{ dbt_utils.group_by(13) }}\n\n), unique_id as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','base_url','line_item_id','campaign_id']) }} as daily_ad_id\n    from joined\n\n)\n\nselect *\nfrom unique_id", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads", "twitter__ad_adapter"], "unique_id": "model.twitter_ads.twitter__ad_adapter", "package_name": "twitter_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads", "path": "twitter__ad_adapter.sql", "original_file_path": "models/twitter__ad_adapter.sql", "name": "twitter__ad_adapter", "resource_type": "model", "alias": "twitter__ad_adapter", "checksum": {"name": "sha256", "checksum": "3e7b88b1ddd7e7007047bd26b259f32e6dbc8c4daef9f11a1dc0ee7421843c68"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_twitter_ads__account_history"], ["stg_twitter_ads__campaign_history"], ["stg_twitter_ads__line_item_history"], ["stg_twitter_ads__promoted_tweet_report"], ["stg_twitter_ads__promoted_tweet_history"], ["stg_twitter_ads__tweet_url"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads_source.stg_twitter_ads__account_history", "model.twitter_ads_source.stg_twitter_ads__campaign_history", "model.twitter_ads_source.stg_twitter_ads__line_item_history", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_report", "model.twitter_ads_source.stg_twitter_ads__promoted_tweet_history", "model.twitter_ads_source.stg_twitter_ads__tweet_url"]}, "description": "Each record represents the daily performance of a line item at the URL level.", "columns": {"daily_ad_id": {"name": "daily_ad_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `expanded_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/twitter.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n    select \n        _fivetran_id, \n        creative_id, \n        object_story_link_data_caption, \n        object_story_link_data_description, \n        object_story_link_data_link, \n        object_story_link_data_message,\n        parse_json(object_story_link_data_child_attachments) as child_attachments\n    from base\n    where object_story_link_data_child_attachments is not null\n  \n), flattened_child_attachments as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        object_story_link_data_caption as caption, \n        object_story_link_data_description as description, \n        object_story_link_data_message as message,\n        child_attachments as element,\n        attachments.index as index,\n        attachments.value:link  as link,\n        attachments.value:url_tags as url_tags\n  \n    from required_fields, \n    lateral flatten( input => child_attachments ) as attachments\n\n)\n\nselect *\nfrom flattened_child_attachments", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_creative_history", "snowflake", "int__facebook_ads__carousel_media_prep"], "unique_id": "model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep", "package_name": "facebook_ads_creative_history", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_creative_history", "path": "snowflake/int__facebook_ads__carousel_media_prep.sql", "original_file_path": "models/snowflake/int__facebook_ads__carousel_media_prep.sql", "name": "int__facebook_ads__carousel_media_prep", "resource_type": "model", "alias": "int__facebook_ads__carousel_media_prep", "checksum": {"name": "sha256", "checksum": "4547473a459db10c3987d19d0889f640c95d479b049f9af854773468c640cbcc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('final_url_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    {{ dbt_utils.group_by(15) }}\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads", "url", "google_ads__url_ad_adapter"], "unique_id": "model.google_ads.google_ads__url_ad_adapter", "package_name": "google_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads", "path": "url/google_ads__url_ad_adapter.sql", "original_file_path": "models/url/google_ads__url_ad_adapter.sql", "name": "google_ads__url_ad_adapter", "resource_type": "model", "alias": "google_ads__url_ad_adapter", "checksum": {"name": "sha256", "checksum": "06670d8b653b284ce021145e5bb740e18059a6b27f0db71d25da3123b19b417d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__final_url_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__final_url_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__microsoft_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        'Microsoft Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["ad_reporting", "stg_microsoft_ads"], "unique_id": "model.ad_reporting.stg_microsoft_ads", "package_name": "ad_reporting", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/ad_reporting", "path": "stg_microsoft_ads.sql", "original_file_path": "models/stg_microsoft_ads.sql", "name": "stg_microsoft_ads", "resource_type": "model", "alias": "stg_microsoft_ads", "checksum": {"name": "sha256", "checksum": "b2a054a0f77d31906c5cd7349f7e2e895fd5a3636ebac8c48843995425adf717"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n  select *\n  from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (\n\n  select \n    _fivetran_id, \n    creative_id, \n    parse_json(template_app_link_spec_ios) as template_app_link_spec_ios,\n    parse_json(template_app_link_spec_ipad) as template_app_link_spec_ipad,\n    parse_json(template_app_link_spec_android) as template_app_link_spec_android,\n    parse_json(template_app_link_spec_iphone) as template_app_link_spec_iphone\n  from base\n\n{% for app in ['ios','ipad','android','iphone'] %}\n  \n), flattened_{{ app }} as (\n\n  select \n    _fivetran_id,\n    creative_id,\n    '{{ app }}' as app_type,\n    element.value:index::string as index,\n    element.value:app_name::string as app_name,\n    element.value:app_store_id::string as app_store_id,\n    element.value:class_name::string as class_name,\n    element.value:package_name::string as package_name,\n    element.value:template_page::string as template_page\n  from required_fields,\n  lateral flatten( input => template_app_link_spec_{{ app }} ) as element\n\n{% endfor %}\n\n), unioned as (\n\n    select * from flattened_ios\n    union all\n    select * from flattened_iphone\n    union all\n    select * from flattened_ipad\n    union all\n    select * from flattened_android\n\n)\n\nselect *\nfrom unioned", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__app_link"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__app_link", "package_name": "facebook_ads_creative_history", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__app_link.sql", "original_file_path": "models/snowflake/stg_facebook_ads__app_link.sql", "name": "stg_facebook_ads__app_link", "resource_type": "model", "alias": "stg_facebook_ads__app_link", "checksum": {"name": "sha256", "checksum": "250cbd47a248220b82ff9b41c0d0fcdbed3927ea87182db988a74a21dedc6498"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_facebook_ads__creative_history') }}\n\n), required_fields as (  \n  \n    select \n        _fivetran_id, \n        parse_json(asset_feed_spec_link_urls) as asset_feed_spec_link_urls\n    from base\n    where asset_feed_spec_link_urls is not null\n  \n), flattened as (\n\n    select \n        _fivetran_id,\n        nullif(asset_feed_spec_link_urls.value:display_url::string, '') as display_url,\n        nullif(asset_feed_spec_link_urls.value:website_url::string, '') as website_url,\n        asset_feed_spec_link_urls.index as index\n    from required_fields,\n    lateral flatten( input => asset_feed_spec_link_urls ) as asset_feed_spec_link_urls\n\n)\n\nselect *\nfrom flattened", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__creative_history_asset_feed_spec_link_url"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__creative_history_asset_feed_spec_link_url", "package_name": "facebook_ads_creative_history", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "original_file_path": "models/snowflake/stg_facebook_ads__creative_history_asset_feed_spec_link_url.sql", "name": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "resource_type": "model", "alias": "stg_facebook_ads__creative_history_asset_feed_spec_link_url", "checksum": {"name": "sha256", "checksum": "9b26940e00b69c9c5c83a92896cae7a242c3f476d20f133a585f847c82b40367"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('click_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        campaign_id,\n        ad_group_id,\n        criteria_id,\n        gclid,\n        row_number() over (partition by gclid order by date_day) as rn\n    from base\n\n), filtered as ( -- we've heard that sometimes duplicates gclids are an issue. This dedupe ensures no glcids are double counted.\n\n    select *\n    from fields\n    where gclid is not null \n    and rn = 1\n\n)\n\nselect * from filtered", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads", "google_ads__click_performance"], "unique_id": "model.google_ads.google_ads__click_performance", "package_name": "google_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads", "path": "google_ads__click_performance.sql", "original_file_path": "models/google_ads__click_performance.sql", "name": "google_ads__click_performance", "resource_type": "model", "alias": "google_ads__click_performance", "checksum": {"name": "sha256", "checksum": "1ac18c28a1f39d4e4636b5661ebf6d652d763533522edd9cae2b0ded266bef52"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__click_performance"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.google_ads_source.stg_google_ads__click_performance"]}, "description": "Each record represents a click, with a unique Google Click ID (gclid).", "columns": {"date_day": {"name": "date_day", "description": "The date being reported on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the AdGroup.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "criteria_id": {"name": "criteria_id", "description": "The Criterion ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gclid": {"name": "gclid", "description": "The Google Click ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/google_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('criteria_performance') }}\n\n), fields as (\n\n    select\n        date_day,\n        account_name,\n        external_customer_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        criteria, \n        criteria_type,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from base\n    {{ dbt_utils.group_by(9) }}\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["google_ads", "criteria", "google_ads__criteria_ad_adapter"], "unique_id": "model.google_ads.google_ads__criteria_ad_adapter", "package_name": "google_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/google_ads", "path": "criteria/google_ads__criteria_ad_adapter.sql", "original_file_path": "models/criteria/google_ads__criteria_ad_adapter.sql", "name": "google_ads__criteria_ad_adapter", "resource_type": "model", "alias": "google_ads__criteria_ad_adapter", "checksum": {"name": "sha256", "checksum": "9beaea4e5ecb0c34077755163908b48fb8f89ee381daa5c4a5e68ab9a52a9aca"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_google_ads__criteria_performance"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.google_ads_source.stg_google_ads__criteria_performance"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom aggregated", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads", "microsoft_ads__account_report"], "unique_id": "model.microsoft_ads.microsoft_ads__account_report", "package_name": "microsoft_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads", "path": "microsoft_ads__account_report.sql", "original_file_path": "models/microsoft_ads__account_report.sql", "name": "microsoft_ads__account_report", "resource_type": "model", "alias": "microsoft_ads__account_report", "checksum": {"name": "sha256", "checksum": "d0e51d24304c862c15a16157de8972a3f21d97a06c47ee62d1bd7dca5d75096d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        ad_group_name,\n        ad_group_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom aggregated", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads", "microsoft_ads__ad_group_report"], "unique_id": "model.microsoft_ads.microsoft_ads__ad_group_report", "package_name": "microsoft_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads", "path": "microsoft_ads__ad_group_report.sql", "original_file_path": "models/microsoft_ads__ad_group_report.sql", "name": "microsoft_ads__ad_group_report", "resource_type": "model", "alias": "microsoft_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "089a8787c8381d8eb6bed194a491d594dab7f25677f11f887574ae12b22df22b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the ad group level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('microsoft_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        campaign_id,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom aggregated", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["microsoft_ads", "microsoft_ads__campaign_report"], "unique_id": "model.microsoft_ads.microsoft_ads__campaign_report", "package_name": "microsoft_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/microsoft_ads", "path": "microsoft_ads__campaign_report.sql", "original_file_path": "models/microsoft_ads__campaign_report.sql", "name": "microsoft_ads__campaign_report", "resource_type": "model", "alias": "microsoft_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "f0d1fe2c5aaafd12ae2683b826651bf29dc297421d55d5956824eda828657ba4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["microsoft_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.microsoft_ads.microsoft_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"date_day": {"name": "date_day", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/microsoft_ads.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{% set url_field = \"coalesce(page_link,template_page_link)\" %}\n\nwith base as (\n\n    select *\n    from {{ var('creative_history') }}\n    where is_most_recent_record = true\n\n), url_tags as (\n\n    select *\n    from {{ var('url_tag') }}\n\n), url_tags_pivoted as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        min(case when key = 'utm_source' then value end) as utm_source,\n        min(case when key = 'utm_medium' then value end) as utm_medium,\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\n        min(case when key = 'utm_content' then value end) as utm_content,\n        min(case when key = 'utm_term' then value end) as utm_term\n    from url_tags\n    group by 1,2\n\n), fields as (\n\n    select\n        _fivetran_id,\n        creative_id,\n        account_id,\n        creative_name,\n        {{ url_field }} as url,\n        {{ dbt_utils.split_part(url_field, \"'?'\", 1) }} as base_url,\n        {{ dbt_utils.get_url_host(url_field) }} as url_host,\n        '/' || {{ dbt_utils.get_url_path(url_field) }} as url_path,\n        coalesce(url_tags_pivoted.utm_source, {{ dbt_utils.get_url_parameter(url_field, 'utm_source') }}) as utm_source,\n        coalesce(url_tags_pivoted.utm_medium, {{ dbt_utils.get_url_parameter(url_field, 'utm_medium') }}) as utm_medium,\n        coalesce(url_tags_pivoted.utm_campaign, {{ dbt_utils.get_url_parameter(url_field, 'utm_campaign') }}) as utm_campaign,\n        coalesce(url_tags_pivoted.utm_content, {{ dbt_utils.get_url_parameter(url_field, 'utm_content') }}) as utm_content,\n        coalesce(url_tags_pivoted.utm_term, {{ dbt_utils.get_url_parameter(url_field, 'utm_term') }}) as utm_term\n    from base\n    left join url_tags_pivoted\n        using (_fivetran_id, creative_id)\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads", "intermediate", "facebook_ads__creative_history_prep"], "unique_id": "model.facebook_ads.facebook_ads__creative_history_prep", "package_name": "facebook_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads", "path": "intermediate/facebook_ads__creative_history_prep.sql", "original_file_path": "models/intermediate/facebook_ads__creative_history_prep.sql", "name": "facebook_ads__creative_history_prep", "resource_type": "model", "alias": "facebook_ads__creative_history_prep", "checksum": {"name": "sha256", "checksum": "62de9cd1fe2d606faa77dd9e5c8bdcf911f44172876ac4e2faf83d58a38ce5f4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__creative_history"], ["stg_facebook_ads__url_tag"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_path", "macro.dbt_utils.get_url_parameter"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__creative_history", "model.facebook_ads_creative_history.stg_facebook_ads__url_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('pin_promotion_report') }}\n\n), pins as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_pin_promotion') }}\n\n), ad_groups as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_ad_group') }}\n\n), campaigns as (\n\n    select *\n    from {{ ref('int_pinterest_ads__most_recent_campaign') }}\n\n), joined as (\n\n    select \n        report.date_day as campaign_date,\n        report.ad_group_id,\n        report.campaign_id,\n        report.spend,\n        report.impressions,\n        report.clicks,\n        campaigns.name as campaign_name,\n        ad_groups.name as ad_group_name,\n        pins.destination_url,\n        pins.base_url,\n        pins.url_host,\n        pins.url_path,\n        pins.utm_source,\n        pins.utm_medium,\n        pins.utm_campaign,\n        pins.utm_content,\n        pins.utm_term\n    from report \n    left join pins \n        on report.pin_promotion_id = pins.pin_promotion_id\n    left join ad_groups\n        on report.ad_group_id = ad_groups.ad_group_id\n    left join campaigns \n        on report.campaign_id = campaigns.campaign_id\n\n), aggregates as (\n\n    select         \n        {{ dbt_utils.surrogate_key(\n            [\n                'campaign_date',\n                'campaign_id',\n                'ad_group_id',\n                'destination_url'\n            ]\n        ) }} as daily_id,\n\n        campaign_date,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        'pinterest ads' as platform,\n\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from joined\n    {{ dbt_utils.group_by(15) }}\n    \n)\n\nselect * \nfrom aggregates", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest", "pinterest_ads__ad_adapter"], "unique_id": "model.pinterest.pinterest_ads__ad_adapter", "package_name": "pinterest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest", "path": "pinterest_ads__ad_adapter.sql", "original_file_path": "models/pinterest_ads__ad_adapter.sql", "name": "pinterest_ads__ad_adapter", "resource_type": "model", "alias": "pinterest_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "98da74c5a1100513fef60696cebb1f4c1f3d4c3e397e3f1fce7b03f8b70685ac"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads__pin_promotion_report"], ["int_pinterest_ads__most_recent_pin_promotion"], ["int_pinterest_ads__most_recent_ad_group"], ["int_pinterest_ads__most_recent_campaign"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.group_by"], "nodes": ["model.pinterest_source.stg_pinterest_ads__pin_promotion_report", "model.pinterest.int_pinterest_ads__most_recent_pin_promotion", "model.pinterest.int_pinterest_ads__most_recent_ad_group", "model.pinterest.int_pinterest_ads__most_recent_campaign"]}, "description": "Each record in this table represents the daily performance of ads at the ad group and url level.", "columns": {"daily_id": {"name": "daily_id", "description": "A unique key, a combination of the campaign, ad group and campaign date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the `destination_url`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Pinterest Ads", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/pinterest.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__google_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('google_ads__url_ad_adapter')}}\n\n), fields as (\n\n    select\n        'Google Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        external_customer_id as account_id,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        ad_group_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["ad_reporting", "stg_google_ads"], "unique_id": "model.ad_reporting.stg_google_ads", "package_name": "ad_reporting", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/ad_reporting", "path": "stg_google_ads.sql", "original_file_path": "models/stg_google_ads.sql", "name": "stg_google_ads", "resource_type": "model", "alias": "stg_google_ads", "checksum": {"name": "sha256", "checksum": "34d0865ae5bfc20309037b531547ec48378cbc754d4739b6cfcafa05c28e3a86"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["google_ads__url_ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.google_ads.google_ads__url_ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__linkedin_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter')}}\n\n), fields as (\n\n    select\n        'LinkedIn Ads' as platform,\n        cast(date_day as date) as date_day,\n        account_name,\n        account_id,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_group_name as ad_group_name,\n        cast(campaign_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(cost, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["ad_reporting", "stg_linkedin_ads"], "unique_id": "model.ad_reporting.stg_linkedin_ads", "package_name": "ad_reporting", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/ad_reporting", "path": "stg_linkedin_ads.sql", "original_file_path": "models/stg_linkedin_ads.sql", "name": "stg_linkedin_ads", "resource_type": "model", "alias": "stg_linkedin_ads", "checksum": {"name": "sha256", "checksum": "ca89fe398ad06d1516ae53dee87f5973dd4f78fbd37228593bf7af594e97228f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__twitter_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('twitter__ad_adapter')}}\n\n), fields as (\n\n    select\n        'Twitter Ads' as platform,\n        cast(date_day as date) as date_day,\n        campaign_name,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        line_item_name as ad_group_name,\n        cast(line_item_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["ad_reporting", "stg_twitter_ads"], "unique_id": "model.ad_reporting.stg_twitter_ads", "package_name": "ad_reporting", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/ad_reporting", "path": "stg_twitter_ads.sql", "original_file_path": "models/stg_twitter_ads.sql", "name": "stg_twitter_ads", "resource_type": "model", "alias": "stg_twitter_ads", "checksum": {"name": "sha256", "checksum": "8169e8a8b86800e3a9cc4b4eea0cc6cd991c070cb4be375472a600415b8857e8"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n  \n), fields as (\n\n    select \n        _fivetran_id,\n        creative_id,\n        caption, \n        description, \n        message,\n        link,\n        index\n    from base\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__carousel_media"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media", "package_name": "facebook_ads_creative_history", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__carousel_media.sql", "original_file_path": "models/snowflake/stg_facebook_ads__carousel_media.sql", "name": "stg_facebook_ads__carousel_media", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media", "checksum": {"name": "sha256", "checksum": "e25839877e3e134a154419c24289507728e3366316b9b59b56c4e6a24610ef1f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=target.type=='snowflake') }}\n\nwith base as (\n\n    select *\n    from {{ ref('int__facebook_ads__carousel_media_prep') }}\n  \n), unnested as (\n\n    select \n    \n        base._fivetran_id,\n        base.creative_id,\n        base.index,\n        url_tags.value:key::string as key,\n        url_tags.value:value::string as value\n\n    from base, \n    lateral flatten( input => url_tags ) as url_tags\n\n)\n\nselect *\nfrom unnested", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads_creative_history", "snowflake", "stg_facebook_ads__carousel_media_url_tags"], "unique_id": "model.facebook_ads_creative_history.stg_facebook_ads__carousel_media_url_tags", "package_name": "facebook_ads_creative_history", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads_creative_history", "path": "snowflake/stg_facebook_ads__carousel_media_url_tags.sql", "original_file_path": "models/snowflake/stg_facebook_ads__carousel_media_url_tags.sql", "name": "stg_facebook_ads__carousel_media_url_tags", "resource_type": "model", "alias": "stg_facebook_ads__carousel_media_url_tags", "checksum": {"name": "sha256", "checksum": "58c4d94521dc6217ee381c90ad510d2bac9c6ac82afd4ec06522e2b70e3c42a9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int__facebook_ads__carousel_media_prep"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.facebook_ads_creative_history.int__facebook_ads__carousel_media_prep"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook_backwards_compatibility.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom grouped", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin", "linkedin__account_ad_report"], "unique_id": "model.linkedin.linkedin__account_ad_report", "package_name": "linkedin", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin", "path": "linkedin__account_ad_report.sql", "original_file_path": "models/linkedin__account_ad_report.sql", "name": "linkedin__account_ad_report", "resource_type": "model", "alias": "linkedin__account_ad_report", "checksum": {"name": "sha256", "checksum": "65c5ba15940b30007db39de301719d32878a76f4d856c51481b5b0569eef4480"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the account level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_id,\n        campaign_name,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom grouped", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin", "linkedin__campaign_ad_report"], "unique_id": "model.linkedin.linkedin__campaign_ad_report", "package_name": "linkedin", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin", "path": "linkedin__campaign_ad_report.sql", "original_file_path": "models/linkedin__campaign_ad_report.sql", "name": "linkedin__campaign_ad_report", "resource_type": "model", "alias": "linkedin__campaign_ad_report", "checksum": {"name": "sha256", "checksum": "987d650d267a6f163aaa4bc1dd15618debfda818ceace21c57488a13d7271709"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Unique internal ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('linkedin__ad_adapter') }}\n\n), grouped as (\n\n    select \n        date_day,\n        campaign_group_id,\n        campaign_group_name,\n        account_id,\n        account_name,\n        sum(cost) as cost,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom grouped", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["linkedin", "linkedin__campaign_group_ad_report"], "unique_id": "model.linkedin.linkedin__campaign_group_ad_report", "package_name": "linkedin", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/linkedin", "path": "linkedin__campaign_group_ad_report.sql", "original_file_path": "models/linkedin__campaign_group_ad_report.sql", "name": "linkedin__campaign_group_ad_report", "resource_type": "model", "alias": "linkedin__campaign_group_ad_report", "checksum": {"name": "sha256", "checksum": "e89ed71c20435b9d189feeb861bf042d60fdbfe2dfa70e255d7e745e7dc44758"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["linkedin__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.linkedin.linkedin__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign group level.", "columns": {"account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique internal ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of chargeable clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "This is the count of \"impressions\" for Direct Ads and Sponsored Updates and \"sends\" for InMails.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "The cost of the ads in the local currency or USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_name": {"name": "campaign_group_name", "description": "A label for the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_group_id": {"name": "campaign_group_id", "description": "Unique internal ID representing the campaign group.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/linkedin.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('twitter__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n), unique_id as (\n\n    select  \n        *,\n        {{ dbt_utils.surrogate_key(['date_day','campaign_id']) }} as daily_campaign_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads", "twitter__campaign_report"], "unique_id": "model.twitter_ads.twitter__campaign_report", "package_name": "twitter_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads", "path": "twitter__campaign_report.sql", "original_file_path": "models/twitter__campaign_report.sql", "name": "twitter__campaign_report", "resource_type": "model", "alias": "twitter__campaign_report", "checksum": {"name": "sha256", "checksum": "e07bd94ffe796f110278a6463b2e6600c5418291dc9ee29d5bd4a290f2f21ddf"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "Each record represents the daily ad performance of each campaign.", "columns": {"daily_campaign_id": {"name": "daily_campaign_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/twitter.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('twitter__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        line_item_name,\n        line_item_id,\n        campaign_name,\n        campaign_id,\n        sum(spend) as spend,\n        sum(clicks) as clicks,\n        sum(url_clicks) as url_clicks,\n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n), unique_id as (\n\n    select  \n        *,\n        {{ dbt_utils.surrogate_key(['date_day','line_item_id']) }} as daily_line_item_id\n    from aggregated\n\n)\n\nselect *\nfrom unique_id", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["twitter_ads", "twitter__line_item_report"], "unique_id": "model.twitter_ads.twitter__line_item_report", "package_name": "twitter_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/twitter_ads", "path": "twitter__line_item_report.sql", "original_file_path": "models/twitter__line_item_report.sql", "name": "twitter__line_item_report", "resource_type": "model", "alias": "twitter__line_item_report", "checksum": {"name": "sha256", "checksum": "b4747032b54810f802d9c4e4e9ace63279683bda99fc110fff2aaf9e598617a7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["twitter__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key"], "nodes": ["model.twitter_ads.twitter__ad_adapter"]}, "description": "Each record represents the daily ad performance of each line item.", "columns": {"daily_line_item_id": {"name": "daily_line_item_id", "description": "Unique ID for each record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "The ID of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_name": {"name": "line_item_name", "description": "The name of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_clicks": {"name": "url_clicks", "description": "The number of URL clicks on that date.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/twitter.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with report as (\n\n    select *\n    from {{ var('basic_ad') }}\n\n), creatives as (\n\n    select *\n    from {{ ref('facebook_ads__creative_history_prep') }}\n\n), accounts as (\n\n    select *\n    from {{ var('account_history') }}\n    where is_most_recent_record = true\n\n), ads as (\n\n    select *\n    from {{ var('ad_history') }}\n    where is_most_recent_record = true\n\n), ad_sets as (\n\n    select *\n    from {{ var('ad_set_history') }}\n    where is_most_recent_record = true\n\n), campaigns as (\n\n    select *\n    from {{ var('campaign_history') }}\n    where is_most_recent_record = true\n\n), joined as (\n\n    select\n        report.date_day,\n        accounts.account_id,\n        accounts.account_name,\n        campaigns.campaign_id,\n        campaigns.campaign_name,\n        ad_sets.ad_set_id,\n        ad_sets.ad_set_name,\n        ads.ad_id,\n        ads.ad_name,\n        creatives.creative_id,\n        creatives.creative_name,\n        creatives.base_url,\n        creatives.url_host,\n        creatives.url_path,\n        creatives.utm_source,\n        creatives.utm_medium,\n        creatives.utm_campaign,\n        creatives.utm_content,\n        creatives.utm_term,\n        sum(report.clicks) as clicks,\n        sum(report.impressions) as impressions,\n        sum(report.spend) as spend\n    from report\n    left join ads \n        on cast(report.ad_id as {{ dbt_utils.type_bigint() }}) = cast(ads.ad_id as {{ dbt_utils.type_bigint() }})\n    left join creatives\n        on cast(ads.creative_id as {{ dbt_utils.type_bigint() }}) = cast(creatives.creative_id as {{ dbt_utils.type_bigint() }})\n    left join ad_sets\n        on cast(ads.ad_set_id as {{ dbt_utils.type_bigint() }}) = cast(ad_sets.ad_set_id as {{ dbt_utils.type_bigint() }})\n    left join campaigns\n        on cast(ads.campaign_id as {{ dbt_utils.type_bigint() }}) = cast(campaigns.campaign_id as {{ dbt_utils.type_bigint() }})\n    left join accounts\n        on cast(report.account_id as {{ dbt_utils.type_bigint() }}) = cast(accounts.account_id as {{ dbt_utils.type_bigint() }})\n    {{ dbt_utils.group_by(19) }}\n\n\n)\n\nselect *\nfrom joined", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads", "facebook_ads__ad_adapter"], "unique_id": "model.facebook_ads.facebook_ads__ad_adapter", "package_name": "facebook_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads", "path": "facebook_ads__ad_adapter.sql", "original_file_path": "models/facebook_ads__ad_adapter.sql", "name": "facebook_ads__ad_adapter", "resource_type": "model", "alias": "facebook_ads__ad_adapter", "checksum": {"name": "sha256", "checksum": "c05e82c67c92164b2aae820c38e94d7a0dbc747c46200db0414f9e6cbfae2f50"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_facebook_ads__basic_ad"], ["facebook_ads__creative_history_prep"], ["stg_facebook_ads__account_history"], ["stg_facebook_ads__ad_history"], ["stg_facebook_ads__ad_set_history"], ["stg_facebook_ads__campaign_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_bigint", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads_source.stg_facebook_ads__basic_ad", "model.facebook_ads.facebook_ads__creative_history_prep", "model.facebook_ads_source.stg_facebook_ads__account_history", "model.facebook_ads_source.stg_facebook_ads__ad_history", "model.facebook_ads_source.stg_facebook_ads__ad_set_history", "model.facebook_ads_source.stg_facebook_ads__campaign_history"]}, "description": "Each record represents the daily performance of a Facebook ad at the URL level.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "The ID of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_name": {"name": "ad_name", "description": "The name of the related ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_id": {"name": "creative_id", "description": "The ID of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creative_name": {"name": "creative_name", "description": "The name of the related creative.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad, extracted from the page_link and template_page_link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__pinterest_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        cast(campaign_date as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name,\n        cast(ad_group_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_group_name,\n        platform,\n        coalesce(clicks, 0) as clicks,\n        coalesce(impressions, 0) as impressions,\n        coalesce(spend, 0) as spend\n    from base\n\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["ad_reporting", "stg_pinterest_ads"], "unique_id": "model.ad_reporting.stg_pinterest_ads", "package_name": "ad_reporting", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/ad_reporting", "path": "stg_pinterest_ads.sql", "original_file_path": "models/stg_pinterest_ads.sql", "name": "stg_pinterest_ads", "resource_type": "model", "alias": "stg_pinterest_ads", "checksum": {"name": "sha256", "checksum": "4f283ff383cf2ecc1fec1a3afb08160111530942b021b229b3661ffe05ab340d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter') }}\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        ad_group_id,\n        ad_group_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom grouped", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest", "pinterest_ads__ad_group_ad_report"], "unique_id": "model.pinterest.pinterest_ads__ad_group_ad_report", "package_name": "pinterest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest", "path": "pinterest_ads__ad_group_ad_report.sql", "original_file_path": "models/pinterest_ads__ad_group_ad_report.sql", "name": "pinterest_ads__ad_group_ad_report", "resource_type": "model", "alias": "pinterest_ads__ad_group_ad_report", "checksum": {"name": "sha256", "checksum": "fdcf38ebeeb0e16ce6fa4454ad0f684e3d51d9ff15f94e811b4837c239d6ea8d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the ad group level.", "columns": {"campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "The name of the related Ad group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/pinterest.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('pinterest_ads__ad_adapter') }}\n\n), grouped as (\n\n    select \n        campaign_date,\n        campaign_id,\n        campaign_name,\n        sum(spend) as spend,\n        sum(clicks) as clicks, \n        sum(impressions) as impressions\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom grouped", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["pinterest", "pinterest_ads__campaign_ad_report"], "unique_id": "model.pinterest.pinterest_ads__campaign_ad_report", "package_name": "pinterest", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/pinterest", "path": "pinterest_ads__campaign_ad_report.sql", "original_file_path": "models/pinterest_ads__campaign_ad_report.sql", "name": "pinterest_ads__campaign_ad_report", "resource_type": "model", "alias": "pinterest_ads__campaign_ad_report", "checksum": {"name": "sha256", "checksum": "c64645f6eba71e8c169caa5ef0bdd4c1d35a720666c88e38ca1e72a9ac9818d5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["pinterest_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.pinterest.pinterest_ads__ad_adapter"]}, "description": "Each record in this table represents the daily performance of ads at the campaign level.", "columns": {"campaign_date": {"name": "campaign_date", "description": "The performance date of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related Campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The amount of spend that occurred on the day of the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/pinterest.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(enabled=var('ad_reporting__facebook_ads_enabled')) }}\n\nwith base as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter')}}\n\n), fields as (\n\n    select\n        cast(date_day as date) as date_day,\n        base_url,\n        url_host,\n        url_path,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        utm_content,\n        utm_term,\n        cast(campaign_id as {{ dbt_utils.type_string() }}) as campaign_id,\n        campaign_name,\n        cast(ad_set_id as {{ dbt_utils.type_string() }}) as ad_group_id,\n        ad_set_name as ad_group_name,\n        'Facebook Ads' as platform,\n        sum(coalesce(clicks, 0)) as clicks,\n        sum(coalesce(impressions, 0)) as impressions,\n        sum(coalesce(spend, 0)) as spend\n    from base\n    {{ dbt_utils.group_by(14) }}\n\n\n)\n\nselect *\nfrom fields", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["ad_reporting", "stg_facebook_ads"], "unique_id": "model.ad_reporting.stg_facebook_ads", "package_name": "ad_reporting", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/ad_reporting", "path": "stg_facebook_ads.sql", "original_file_path": "models/stg_facebook_ads.sql", "name": "stg_facebook_ads", "resource_type": "model", "alias": "stg_facebook_ads", "checksum": {"name": "sha256", "checksum": "94bad6841cea0a41adeae7887c8b19a2a7d388da958649dae35ead977ad7ca0e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(3) }}\n\n)\n\nselect *\nfrom aggregated", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads", "facebook_ads__account_report"], "unique_id": "model.facebook_ads.facebook_ads__account_report", "package_name": "facebook_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads", "path": "facebook_ads__account_report.sql", "original_file_path": "models/facebook_ads__account_report.sql", "name": "facebook_ads__account_report", "resource_type": "model", "alias": "facebook_ads__account_report", "checksum": {"name": "sha256", "checksum": "e5408441b95d4c2e24bcc42d1593abc8d6ca78fd0d1025c3a80b9ec2c5327b3d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "Each record represents the daily performance of a Facebook account.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        ad_set_id,\n        ad_set_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(7) }}\n\n)\n\nselect *\nfrom aggregated", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads", "facebook_ads__ad_set_report"], "unique_id": "model.facebook_ads.facebook_ads__ad_set_report", "package_name": "facebook_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads", "path": "facebook_ads__ad_set_report.sql", "original_file_path": "models/facebook_ads__ad_set_report.sql", "name": "facebook_ads__ad_set_report", "resource_type": "model", "alias": "facebook_ads__ad_set_report", "checksum": {"name": "sha256", "checksum": "78e9c00573145c6e150285505b125a89df26296d2d301d55cb68b22a87fa9092"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "Each record represents the daily performance of a Facebook ad set.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_id": {"name": "ad_set_id", "description": "The ID of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_set_name": {"name": "ad_set_name", "description": "The name of the related ad set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "with adapter as (\n\n    select *\n    from {{ ref('facebook_ads__ad_adapter') }}\n\n), aggregated as (\n\n    select\n        date_day,\n        account_id,\n        account_name,\n        campaign_id,\n        campaign_name,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(spend) as spend\n    from adapter\n    {{ dbt_utils.group_by(5) }}\n\n)\n\nselect *\nfrom aggregated", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["facebook_ads", "facebook_ads__campaign_report"], "unique_id": "model.facebook_ads.facebook_ads__campaign_report", "package_name": "facebook_ads", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/facebook_ads", "path": "facebook_ads__campaign_report.sql", "original_file_path": "models/facebook_ads__campaign_report.sql", "name": "facebook_ads__campaign_report", "resource_type": "model", "alias": "facebook_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "b28376174ed927010e23da45bb78c471301958da7c791688a01fa9463dc8322f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["facebook_ads__ad_adapter"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.facebook_ads.facebook_ads__ad_adapter"]}, "description": "Each record represents the daily performance of a Facebook campaign.", "columns": {"date_day": {"name": "date_day", "description": "The date of the performance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the related account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the related campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The number of clicks the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The number of impressions the ad had on the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The spend on the ad in the given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/facebook.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}, {"node": {"raw_sql": "{{ config(materialized='table') }}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations(get_staging_files()) }}\n\n)\n\nselect *\nfrom unioned", "database": "DATAFLOTEST_DATABASE", "schema": "dbt_test", "fqn": ["ad_reporting", "ad_reporting"], "unique_id": "model.ad_reporting.ad_reporting", "package_name": "ad_reporting", "root_path": "/usr/src/develop/user-10139/environment-12916/repository-12316/dbt_modules/ad_reporting", "path": "ad_reporting.sql", "original_file_path": "models/ad_reporting.sql", "name": "ad_reporting", "resource_type": "model", "alias": "ad_reporting", "checksum": {"name": "sha256", "checksum": "784246a0409d33272ba9a91588fe732a6a85fa6ff4f1e7774d22d226ca1914db"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_pinterest_ads"], ["stg_microsoft_ads"], ["stg_linkedin_ads"], ["stg_twitter_ads"], ["stg_google_ads"], ["stg_facebook_ads"]], "sources": [], "depends_on": {"macros": ["macro.ad_reporting.get_staging_files", "macro.dbt_utils.union_relations"], "nodes": ["model.ad_reporting.stg_pinterest_ads", "model.ad_reporting.stg_microsoft_ads", "model.ad_reporting.stg_linkedin_ads", "model.ad_reporting.stg_twitter_ads", "model.ad_reporting.stg_google_ads", "model.ad_reporting.stg_facebook_ads"]}, "description": "Each record in this table represents the daily performance of ads.", "columns": {"campaign_name": {"name": "campaign_name", "description": "A label for the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_name": {"name": "ad_group_name", "description": "A label for the ad group, if present in the source data. Mapped from fields including `campaign_group_name`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A label for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The ID representing the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ad_group_id": {"name": "ad_group_id", "description": "The ID representing the ad group, if present in the source data. Mapped from fields including `campaign_group_id`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The ID representing the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "The day of the activity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The count of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "The count of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "The cost of the ads.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_url": {"name": "base_url", "description": "The base URL of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_host": {"name": "url_host", "description": "The URL host of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "The URL path of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "The utm_source parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "The utm_medium parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "The utm_campaign parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_content": {"name": "utm_content", "description": "The utm_content parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_term": {"name": "utm_term", "description": "The utm_term parameter of the ad.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The ad platform the records relate to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/ad_reporting.yml", "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}], "generated_at": "2021-05-24T00:34:46.101253Z", "elapsed_time": 119.09271502494812}